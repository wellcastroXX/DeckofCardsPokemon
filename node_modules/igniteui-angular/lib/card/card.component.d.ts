import { OnInit, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * IgxCardMedia is container for the card media section.
 * Use it to wrap images and videos.
 */
export declare class IgxCardMediaDirective {
    /** @hidden @internal */
    cssClass: string;
    /**
     * Sets the `width` and `min-width` style property
     * of the media container. If not provided it will be set to `auto`.
     *
     * @example
     * ```html
     * <igx-card-media width="300px"></igx-card-media>
     * ```
     */
    width: string;
    /**
     * Sets the `height` style property of the media container.
     * If not provided it will be set to `auto`.
     *
     * @example
     * ```html
     * <igx-card-media height="50%"></igx-card-media>
     * ```
     */
    height: string;
    /**
     * Sets the `role` attribute of the media container.
     */
    role: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardMediaDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardMediaDirective, "igx-card-media", never, { "width": { "alias": "width"; "required": false; }; "height": { "alias": "height"; "required": false; }; "role": { "alias": "role"; "required": false; }; }, {}, never, never, true, never>;
}
/**
 * IgxCardHeader is container for the card header
 */
export declare class IgxCardHeaderComponent {
    /** @hidden @internal */
    cssClass: string;
    /**
     * Sets the layout style of the header.
     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.
     *
     * @example
     * ```html
     * <igx-card-header [vertical]="true"></igx-card-header>
     * ```
     */
    vertical: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCardHeaderComponent, "igx-card-header", never, { "vertical": { "alias": "vertical"; "required": false; }; }, {}, never, ["igx-avatar, igx-card-media, [igxCardThumbnail]", "\n        [igxCardHeaderTitle],\n        [igxCardHeaderSubtitle],\n        .igx-card-header__title,\n        .igx-card-header__title--small,\n        .igx-card-header__subtitle", "*"], true, never>;
    static ngAcceptInputType_vertical: unknown;
}
/**
 * IgxCardThumbnail is container for the card thumbnail section.
 * Use it to wrap anything you want to be used as a thumbnail.
 */
export declare class IgxCardThumbnailDirective {
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardThumbnailDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardThumbnailDirective, "[igxCardThumbnail]", never, {}, {}, never, never, true, never>;
}
/**
 * igxCardHeaderTitle is used to denote the header title in a card.
 * Use it to tag text nodes.
 */
export declare class IgxCardHeaderTitleDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardHeaderTitleDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardHeaderTitleDirective, "[igxCardHeaderTitle]", never, {}, {}, never, never, true, never>;
}
/**
 * igxCardHeaderSubtitle is used to denote the header subtitle in a card.
 * Use it to tag text nodes.
 */
export declare class IgxCardHeaderSubtitleDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardHeaderSubtitleDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardHeaderSubtitleDirective, "[igxCardHeaderSubtitle]", never, {}, {}, never, never, true, never>;
}
/**
 * IgxCardContent is container for the card content.
 */
export declare class IgxCardContentDirective {
    /** @hidden @internal */
    cssClass: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardContentDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardContentDirective, "igx-card-content", never, {}, {}, never, never, true, never>;
}
/**
 * IgxCardFooter is container for the card footer
 */
export declare class IgxCardFooterDirective {
    /**
     * Sets the value of the `role` attribute of the card footer.
     * By default the value is set to `footer`.
     *
     * @example
     * ```html
     * <igx-card-footer role="footer"></igx-card-footer>
     * ```
     */
    role: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardFooterDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxCardFooterDirective, "igx-card-footer", never, { "role": { "alias": "role"; "required": false; }; }, {}, never, never, true, never>;
}
/**
 * Card provides a way to display organized content in appealing way.
 *
 * @igxModule IgxCardModule
 *
 * @igxTheme igx-card-theme, igx-icon-theme, igx-button-theme
 *
 * @igxKeywords card, button, avatar, icon
 *
 * @igxGroup Layouts
 *
 * @remarks
 * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are
 * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.
 *
 * @example
 * ```html
 * <igx-card>
 *   <igx-card-header>
 *     <h3 igxCardHeaderTitle>{{title}}</h3>
 *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>
 *   </igx-card-header>
 *   <igx-card-actions>
 *       <button type="button" igxButton igxRipple>Share</button>
 *       <button type="button" igxButton igxRipple>Play Album</button>
 *   </igx-card-actions>
 * </igx-card>
 * ```
 */
/**
 * @deprecated in 17.0.0. To switch between `outlined` and `elevated` card use the `elevated` property.
 * Since version 17.0.0 the card component is `outlined` by default.
 */
export declare const IgxCardType: {
    ELEVATED: "elevated";
    OUTLINED: "outlined";
};
export type IgxCardType = (typeof IgxCardType)[keyof typeof IgxCardType];
export declare class IgxCardComponent {
    private static ngAcceptInputType_elevated;
    /**
     * Sets/gets the `id` of the card.
     * If not set, `id` will have value `"igx-card-0"`;
     *
     * @example
     * ```html
     * <igx-card id="my-first-card"></igx-card>
     * ```
     * ```typescript
     * let cardId =  this.card.id;
     * ```
     */
    id: string;
    /**
     * Sets the `igx-card` css class to the card component.
     *
     * @hidden
     * @internal
     */
    cssClass: string;
    /**
     * Sets the value of the `role` attribute of the card.
     * By default the value is set to `group`.
     *
     * @example
     * ```html
     * <igx-card role="group"></igx-card>
     * ```
     */
    role: string;
    /**
     * Sets the value of the `type` attribute of the card.
     * By default the value is set to `outlined`. You can make the card use the
     * elevated style by setting the value to `elevated`.
     *
     * @deprecated in version 17.0.0. Use `elevated` property instead.
     */
    type: IgxCardType | string;
    /**
     * A getter which will return true if the card type is `outlined`.
     */
    get isOutlinedCard(): boolean;
    /**
     * A getter which will return true if the card type is `elevated`.
     */
    protected get isElevatedCard(): boolean;
    /**
     * Sets/gets whether the card is elevated.
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-card elevated></igx-card>
     * ```
     * ```typescript
     * let cardElevation = this.card.elevated;
     * ```
     */
    get elevated(): boolean;
    set elevated(value: boolean);
    /**
     * Sets the value of the `horizontal` attribute of the card.
     * Setting this to `true` will make the different card sections align horizontally,
     * essentially flipping the card to the side.
     *
     * @example
     * ```html
     * <igx-card [horizontal]="true"></igx-card>
     * ```
     */
    horizontal: boolean;
    /**
     * @hidden
     * @internal
     */
    private _elevated;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCardComponent, "igx-card", never, { "id": { "alias": "id"; "required": false; }; "role": { "alias": "role"; "required": false; }; "type": { "alias": "type"; "required": false; }; "elevated": { "alias": "elevated"; "required": false; }; "horizontal": { "alias": "horizontal"; "required": false; }; }, {}, never, ["*"], true, never>;
    static ngAcceptInputType_horizontal: unknown;
}
export declare const IgxCardActionsLayout: {
    START: "start";
    JUSTIFY: "justify";
};
export type IgxCardActionsLayout = (typeof IgxCardActionsLayout)[keyof typeof IgxCardActionsLayout];
/**
 * IgxCardActions is container for the card actions.
 */
export declare class IgxCardActionsComponent implements OnInit, OnChanges {
    card: IgxCardComponent;
    /**
     * Sets the layout style of the actions.
     * You can justify the elements slotted in the igx-card-action container
     * so that they are positioned equally from one another taking up all the
     * space available along the card actions axis.
     *
     * @example
     * ```html
     * <igx-card-actions layout="justify"></igx-card-actions>
     * ```
     */
    layout: IgxCardActionsLayout | string;
    /**
     * Sets the vertical attribute of the actions.
     * When set to `true` the actions will be layed out vertically.
     */
    vertical: boolean;
    /**
     * A getter that returns `true` when the layout has been
     * set to `justify`.
     */
    get isJustifyLayout(): boolean;
    /**
     * Reverses the order of the buttons in the actions area.
     *
     * @deprecated in version 15.1.0.
     */
    reverse: boolean;
    private isVerticalSet;
    constructor(card: IgxCardComponent);
    /**
     * @hidden
     * @internal
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     * @internal
     */
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCardActionsComponent, [{ optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCardActionsComponent, "igx-card-actions", never, { "layout": { "alias": "layout"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; "reverse": { "alias": "reverse"; "required": false; }; }, {}, never, ["[igxStart], [igxButton]:not([igxEnd])", "*", "[igxEnd], [igxIconButton]:not([igxStart]), igx-icon:not([igxStart])"], true, never>;
    static ngAcceptInputType_vertical: unknown;
    static ngAcceptInputType_reverse: unknown;
}
