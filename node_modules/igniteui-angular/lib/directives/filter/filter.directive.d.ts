import { EventEmitter, OnChanges, PipeTransform, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class IgxFilterOptions {
    inputValue: string;
    key: string | string[];
    items: any[];
    get_value(item: any, key: string): string;
    formatter(valueToTest: string): string;
    matchFn(valueToTest: string, inputValue: string): boolean;
    metConditionFn(item: any): void;
    overdueConditionFn(item: any): void;
}
export declare class IgxFilterDirective implements OnChanges {
    filtering: EventEmitter<any>;
    filtered: EventEmitter<any>;
    filterOptions: IgxFilterOptions;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    private filter;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxFilterDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<IgxFilterDirective, "[igxFilter]", never, { "filterOptions": { "alias": "igxFilter"; "required": false; }; }, { "filtering": "filtering"; "filtered": "filtered"; }, never, never, true, never>;
}
export declare class IgxFilterPipe implements PipeTransform {
    private findMatchByKey;
    transform(items: any[], options: IgxFilterOptions): any[];
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxFilterPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<IgxFilterPipe, "igxFilter", true>;
}
