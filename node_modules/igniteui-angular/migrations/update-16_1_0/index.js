"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UpdateChanges_1 = require("../common/UpdateChanges");
const util_1 = require("../common/util");
// use bare specifier to escape the schematics encapsulation for the dynamic import:
const import_helper_js_1 = require("igniteui-angular/migrations/common/import-helper.js");
const version = '16.1.0';
exports.default = () => (host, context) => __awaiter(void 0, void 0, void 0, function* () {
    context.logger.info(`Applying migration for Ignite UI for Angular to version ${version}`);
    const { HtmlParser } = yield (0, import_helper_js_1.nativeImport)('@angular/compiler');
    const update = new UpdateChanges_1.UpdateChanges(__dirname, host, context);
    update.applyChanges();
    const prop = ['[multiSelection]'];
    const changes = new Map();
    const applyChanges = () => {
        for (const [path, change] of changes.entries()) {
            let buffer = host.read(path).toString();
            change.sort((c, c1) => c.position - c1.position)
                .reverse()
                .forEach(c => buffer = c.apply(buffer));
            host.overwrite(path, buffer);
        }
    };
    const addChange = (path, change) => {
        if (changes.has(path)) {
            changes.get(path).push(change);
        }
        else {
            changes.set(path, [change]);
        }
    };
    for (const path of update.templateFiles) {
        const buttonGroups = (0, util_1.findElementNodes)((0, util_1.parseFile)(new HtmlParser(), host, path), 'igx-buttongroup');
        buttonGroups
            .filter(node => (0, util_1.hasAttribute)(node, prop))
            .map(node => (0, util_1.getSourceOffset)(node))
            .forEach(offset => {
            const { startTag, file, node } = offset;
            const { name, value } = (0, util_1.getAttribute)(node, prop)[0];
            const repTxt = file.content.substring(startTag.start, startTag.end);
            const property = `${name}="${value}"`;
            if (value === 'true') {
                const removePropTxt = repTxt.replace(property, `[selectionMode]="'multi'"`);
                addChange(file.url, new util_1.FileChange(startTag.start, removePropTxt, repTxt, 'replace'));
            }
            else {
                const removePropTxt = repTxt.replace(property, '');
                addChange(file.url, new util_1.FileChange(startTag.start, removePropTxt, repTxt, 'replace'));
            }
        });
    }
    applyChanges();
});
