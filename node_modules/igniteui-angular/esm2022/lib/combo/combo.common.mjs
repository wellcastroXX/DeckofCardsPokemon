import { booleanAttribute, ContentChild, ContentChildren, Directive, EventEmitter, forwardRef, HostBinding, Inject, InjectionToken, Input, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { caseSensitive } from '@igniteui/material-icons-extended';
import { noop, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { cloneArray, isNaNvalue, rem } from '../core/utils';
import { SortingDirection } from '../data-operations/sorting-strategy';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/inputGroupType';
import { IgxInputDirective, IgxInputGroupComponent, IgxInputState, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective } from '../input-group/public_api';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';
import { IgxComboAddItemDirective, IgxComboClearIconDirective, IgxComboEmptyDirective, IgxComboFooterDirective, IgxComboHeaderDirective, IgxComboHeaderItemDirective, IgxComboItemDirective, IgxComboToggleIconDirective } from './combo.directives';
import { ComboResourceStringsEN } from '../core/i18n/combo-resources';
import { getCurrentResourceStrings } from '../core/i18n/resources';
import * as i0 from "@angular/core";
import * as i1 from "../core/selection";
import * as i2 from "./combo.api";
import * as i3 from "../icon/icon.service";
export const IGX_COMBO_COMPONENT = /*@__PURE__*/ new InjectionToken('IgxComboComponentToken');
let NEXT_ID = 0;
/**
 * @hidden
 * The default number of items that should be in the combo's
 * drop-down list if no `[itemsMaxHeight]` is specified
 */
const itemsInContainer = 10; // TODO: make private readonly
/** @hidden @internal */
const ItemHeights = {
    comfortable: 40,
    cosy: 32,
    compact: 28,
};
export class IgxComboBaseDirective extends DisplayDensityBase {
    /**
     * Configures the drop down list height
     *
     * ```typescript
     * // get
     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsMaxHeight]='320'></igx-combo>
     * ```
     */
    get itemsMaxHeight() {
        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {
            return this.itemHeight * itemsInContainer;
        }
        return this._itemsMaxHeight;
    }
    set itemsMaxHeight(val) {
        this._itemsMaxHeight = val;
    }
    /** @hidden */
    get itemsMaxHeightInRem() {
        return rem(this.itemsMaxHeight);
    }
    /**
     * Configures the drop down list item height
     *
     * ```typescript
     * // get
     * let myComboItemHeight = this.combo.itemHeight;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemHeight]='32'></igx-combo>
     * ```
     */
    get itemHeight() {
        if (this._itemHeight === null || this._itemHeight === undefined) {
            return ItemHeights[this.displayDensity];
        }
        return this._itemHeight;
    }
    set itemHeight(val) {
        this._itemHeight = val;
    }
    /**
     * Combo data source.
     *
     * ```html
     * <!--set-->
     * <igx-combo [data]='items'></igx-combo>
     * ```
     */
    get data() {
        return this._data;
    }
    set data(val) {
        // igxFor directive ignores undefined values
        // if the combo uses simple data and filtering is applied
        // an error will occur due to the mismatch of the length of the data
        // this can occur during filtering for the igx-combo and
        // during filtering & selection for the igx-simple-combo
        // since the simple combo's input is both a container for the selection and a filter
        this._data = (val) ? val.filter(x => x !== undefined) : [];
    }
    set displayKey(val) {
        this._displayKey = val;
    }
    /**
     * Determines which column in the data source is used to determine the display value.
     *
     * ```typescript
     * // get
     * let myComboDisplayKey = this.combo.displayKey;
     *
     * // set
     * this.combo.displayKey = 'val';
     *
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>
     * ```
     */
    get displayKey() {
        return this._displayKey ? this._displayKey : this.valueKey;
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```html
     * <!--set-->
     * <igx-combo [groupKey]='newGroupKey'></igx-combo>
     * ```
     */
    set groupKey(val) {
        this._groupKey = val;
    }
    /**
     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
     *
     * ```typescript
     * // get
     * let currentGroupKey = this.combo.groupKey;
     * ```
     */
    get groupKey() {
        return this._groupKey;
    }
    /**
     * Sets groups sorting order.
     *
     * @example
     * ```html
     * <igx-combo [groupSortingDirection]="groupSortingDirection"></igx-combo>
     * ```
     * ```typescript
     * public groupSortingDirection = SortingDirection.Asc;
     * ```
     */
    get groupSortingDirection() {
        return this._groupSortingDirection;
    }
    set groupSortingDirection(val) {
        this._groupSortingDirection = val;
    }
    /**
     * Sets the visual combo type.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
     * ```html
     * <igx-combo [type]="'line'">
     * ```
     */
    get type() {
        return this._type || this._inputGroupType || 'box';
    }
    set type(val) {
        this._type = val;
    }
    /**
     * Gets/Sets the resource strings.
     *
     * @remarks
     * By default it uses EN resources.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /** @hidden @internal */
    get searchValue() {
        return this._searchValue;
    }
    set searchValue(val) {
        this.filterValue = val;
        this._searchValue = val;
    }
    /** @hidden @internal */
    get isRemote() {
        return this.totalItemCount > 0 &&
            this.valueKey &&
            this.dataType === "complex" /* DataTypes.COMPLEX */;
    }
    /** @hidden @internal */
    get dataType() {
        if (this.displayKey) {
            return "complex" /* DataTypes.COMPLEX */;
        }
        return "primitive" /* DataTypes.PRIMITIVE */;
    }
    /**
     * Gets if control is valid, when used in a form
     *
     * ```typescript
     * // get
     * let valid = this.combo.valid;
     * ```
     */
    get valid() {
        return this._valid;
    }
    /**
     * Sets if control is valid, when used in a form
     *
     * ```typescript
     * // set
     * this.combo.valid = IgxInputState.INVALID;
     * ```
     */
    set valid(valid) {
        this._valid = valid;
        this.comboInput.valid = valid;
    }
    /**
     * The value of the combo
     *
     * ```typescript
     * // get
     * let comboValue = this.combo.value;
     * ```
     */
    get value() {
        return this._value;
    }
    /**
     * The text displayed in the combo input
     *
     * ```typescript
     * // get
     * let comboDisplayValue = this.combo.displayValue;
     * ```
     */
    get displayValue() {
        return this._displayValue;
    }
    /**
     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
     *
     * ```typescript
     * // get
     * let state = this.combo.virtualizationState;
     * ```
     */
    get virtualizationState() {
        return this.virtDir.state;
    }
    /**
     * Sets the current state of the virtualized data.
     *
     * ```typescript
     * // set
     * this.combo.virtualizationState(state);
     * ```
     */
    set virtualizationState(state) {
        this.virtDir.state = state;
    }
    /**
     * Gets drop down state.
     *
     * ```typescript
     * let state = this.combo.collapsed;
     * ```
     */
    get collapsed() {
        return this.dropdown.collapsed;
    }
    /**
     * Gets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // get
     * let count = this.combo.totalItemCount;
     * ```
     */
    get totalItemCount() {
        return this.virtDir.totalItemCount;
    }
    /**
     * Sets total count of the virtual data items, when using remote service.
     *
     * ```typescript
     * // set
     * this.combo.totalItemCount(remoteService.count);
     * ```
     */
    set totalItemCount(count) {
        this.virtDir.totalItemCount = count;
    }
    /** @hidden @internal */
    get template() {
        this._dataType = this.dataType;
        if (this.itemTemplate) {
            return this.itemTemplate;
        }
        if (this._dataType === "complex" /* DataTypes.COMPLEX */) {
            return this.complexTemplate;
        }
        return this.primitiveTemplate;
    }
    /**
     * Configures the way combo items will be filtered.
     *
     * ```typescript
     * // get
     * let myFilteringOptions = this.combo.filteringOptions;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [filteringOptions]='myFilteringOptions'></igx-combo>
     * ```
     */
    get filteringOptions() {
        return this._filteringOptions || this._defaultFilteringOptions;
    }
    set filteringOptions(value) {
        this._filteringOptions = value;
    }
    constructor(elementRef, cdr, selectionService, comboAPI, _iconService, _displayDensityOptions, _inputGroupType, _injector) {
        super(_displayDensityOptions, elementRef);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selectionService = selectionService;
        this.comboAPI = comboAPI;
        this._iconService = _iconService;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        this._injector = _injector;
        /**
         * Defines whether the caseSensitive icon should be shown in the search input
         *
         * ```typescript
         * // get
         * let myComboShowSearchCaseIcon = this.combo.showSearchCaseIcon;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [showSearchCaseIcon]='true'></igx-combo>
         * ```
         */
        this.showSearchCaseIcon = false;
        /**
         * Set custom overlay settings that control how the combo's list of items is displayed.
         * Set:
         * ```html
         * <igx-combo [overlaySettings]="customOverlaySettings"></igx-combo>
         * ```
         *
         * ```typescript
         *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };
         *  combo.overlaySettings = customSettings;
         * ```
         * Get any custom overlay settings used by the combo:
         * ```typescript
         *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;
         * ```
         */
        this.overlaySettings = null;
        /**
         * Gets/gets combo id.
         *
         * ```typescript
         * // get
         * let id = this.combo.id;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [id]='combo1'></igx-combo>
         * ```
         */
        this.id = `igx-combo-${NEXT_ID++}`;
        /**
         * Controls whether custom values can be added to the collection
         *
         * ```typescript
         * // get
         * let comboAllowsCustomValues = this.combo.allowCustomValues;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [allowCustomValues]='true'></igx-combo>
         * ```
         */
        this.allowCustomValues = false;
        /**
         * Determines which column in the data source is used to determine the value.
         *
         * ```typescript
         * // get
         * let myComboValueKey = this.combo.valueKey;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [valueKey]='myKey'></igx-combo>
         * ```
         */
        this.valueKey = null;
        /** @hidden @internal */
        this.cssClass = 'igx-combo'; // Independent of display density for the time being
        /**
         * Disables the combo. The default is `false`.
         * ```html
         * <igx-combo [disabled]="'true'">
         * ```
         */
        this.disabled = false;
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-combo opening='handleOpening($event)'></igx-combo>
         * ```
         */
        this.opening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-combo (opened)='handleOpened($event)'></igx-combo>
         * ```
         */
        this.opened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-combo (closing)='handleClosing($event)'></igx-combo>
         * ```
         */
        this.closing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-combo (closed)='handleClosed($event)'></igx-combo>
         * ```
         */
        this.closed = new EventEmitter();
        /**
         * Emitted when an item is being added to the data collection
         *
         * ```html
         * <igx-combo (addition)='handleAdditionEvent($event)'></igx-combo>
         * ```
         */
        this.addition = new EventEmitter();
        /**
         * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
         *
         * ```html
         * <igx-combo (searchInputUpdate)='handleSearchInputEvent($event)'></igx-combo>
         * ```
         */
        this.searchInputUpdate = new EventEmitter();
        /**
         * Emitted when new chunk of data is loaded from the virtualization
         *
         * ```html
         * <igx-combo (dataPreLoad)='handleDataPreloadEvent($event)'></igx-combo>
         * ```
         */
        this.dataPreLoad = new EventEmitter();
        /**
         * The custom template, if any, that should be used when rendering ITEMS in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.itemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboItem let-item let-key="valueKey">
         *          <div class="custom-item">
         *              <div class="custom-item__name">{{ item[key] }}</div>
         *              <div class="custom-item__cost">{{ item.cost }}</div>
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.itemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the HEADER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeader>
         *          <div class="combo__header">
         *              This is a custom header
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.headerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the FOOTER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.footerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboFooter>
         *          <div class="combo__footer">
         *              This is a custom footer
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.footerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeaderItem let-item let-key="groupKey">
         *          <div class="custom-item--group">Group header for {{ item[key] }}</div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.headerItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.addItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboAddItem>
         *          <button type="button" igxButton="contained" class="combo__add-button">
         *              Click to add item
         *          </button>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.addItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.emptyTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboEmpty>
         *          <div class="combo--empty">
         *              There are no items to display
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.emptyTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.toggleIconTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo CLEAR button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.clearIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboClearIcon>
         *          <igx-icon>clear</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        this.clearIconTemplate = null;
        /** @hidden @internal */
        this.searchInput = null;
        this.dropdownContainer = null;
        /** @hidden @internal */
        this.customValueFlag = true;
        /** @hidden @internal */
        this.filterValue = '';
        /** @hidden @internal */
        this.defaultFallbackGroup = 'Other';
        /** @hidden @internal */
        this.activeDescendant = '';
        this._data = [];
        this._value = [];
        this._displayValue = '';
        this._groupKey = '';
        this._searchValue = '';
        this._filteredData = [];
        this._remoteSelection = {};
        this._resourceStrings = getCurrentResourceStrings(ComboResourceStringsEN);
        this._valid = IgxInputState.INITIAL;
        this.ngControl = null;
        this.destroy$ = new Subject();
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
        this.compareCollator = new Intl.Collator();
        this._type = null;
        this._dataType = '';
        this._itemHeight = null;
        this._itemsMaxHeight = null;
        this._groupSortingDirection = SortingDirection.Asc;
        this._defaultFilteringOptions = { caseSensitive: false, filterable: true };
        this.onStatusChanged = () => {
            if (this.ngControl && this.isTouchedOrDirty && !this.disabled) {
                if (this.hasValidators && (!this.collapsed || this.inputGroup.isFocused)) {
                    this.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
                }
                else {
                    this.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
                }
            }
            else {
                // B.P. 18 May 2021: IgxDatePicker does not reset its state upon resetForm #9526
                this.valid = IgxInputState.INITIAL;
            }
            this.manageRequiredAsterisk();
        };
        this.findMatch = (element) => {
            const value = this.displayKey ? element[this.displayKey] : element;
            const searchValue = this.searchValue || this.comboInput?.value;
            return value?.toString().trim().toLowerCase() === searchValue.trim().toLowerCase();
        };
    }
    ngAfterViewChecked() {
        const targetElement = this.inputGroup.element.nativeElement.querySelector('.igx-input-group__bundle');
        this._overlaySettings = {
            target: targetElement,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(),
            modal: false,
            closeOnOutsideClick: true,
            excludeFromOutsideClick: [targetElement]
        };
    }
    /** @hidden @internal */
    ngAfterContentChecked() {
        if (this.inputGroup && this.prefixes?.length > 0) {
            this.inputGroup.prefixes = this.prefixes;
        }
        if (this.inputGroup && this.suffixes?.length > 0) {
            this.inputGroup.suffixes = this.suffixes;
        }
    }
    /** @hidden @internal */
    ngOnInit() {
        super.ngOnInit();
        this.ngControl = this._injector.get(NgControl, null);
        this.selectionService.set(this.id, new Set());
        this._iconService.addSvgIconFromText(caseSensitive.name, caseSensitive.value, 'imx-icons');
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.filteredData = [...this.data];
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);
            this.manageRequiredAsterisk();
            this.cdr.detectChanges();
        }
        this.virtDir.chunkPreload.pipe(takeUntil(this.destroy$)).subscribe((e) => {
            const eventArgs = Object.assign({}, e, { owner: this });
            this.dataPreLoad.emit(eventArgs);
        });
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboAPI.clear();
        this.selectionService.delete(this.id);
    }
    /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button type="button" (click)="combo.toggle()">Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    toggle() {
        if (this.collapsed && this._displayValue.length !== 0) {
            this.filterValue = '';
            this.cdr.detectChanges();
        }
        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.toggle(overlaySettings);
        if (!this.collapsed) {
            this.setActiveDescendant();
        }
    }
    /**
     * A method that opens the combo.
     *
     * ```html
     * <button type="button" (click)="combo.open()">Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    open() {
        if (this.collapsed && this._displayValue.length !== 0) {
            this.filterValue = '';
            this.cdr.detectChanges();
        }
        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.open(overlaySettings);
        this.setActiveDescendant();
    }
    /**
     * A method that closes the combo.
     *
     * ```html
     * <button type="button" (click)="combo.close()">Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     */
    close() {
        this.dropdown.close();
    }
    /**
     * Triggers change detection on the combo view
     */
    triggerCheck() {
        this.cdr.detectChanges();
    }
    /**
     * Get current selection state
     *
     * @returns Array of selected items
     * ```typescript
     * let mySelection = this.combo.selection;
     * ```
     */
    get selection() {
        const items = Array.from(this.selectionService.get(this.id));
        return this.convertKeysToItems(items);
    }
    /**
     * Returns if the specified itemID is selected
     *
     * @hidden
     * @internal
     */
    isItemSelected(item) {
        return this.selectionService.is_item_selected(this.id, item);
    }
    /** @hidden @internal */
    get toggleIcon() {
        if (this.inputGroup.theme === 'material') {
            return this.dropdown.collapsed
                ? 'expand_more'
                : 'expand_less';
        }
        return this.dropdown.collapsed
            ? 'arrow_drop_down'
            : 'arrow_drop_up';
    }
    /** @hidden @internal */
    get clearIcon() {
        return this.inputGroup.theme === 'material'
            ? 'cancel'
            : 'clear';
    }
    /** @hidden @internal */
    addItemToCollection() {
        if (!this.searchValue) {
            return;
        }
        const addedItem = this.displayKey ? {
            [this.valueKey]: this.searchValue,
            [this.displayKey]: this.searchValue
        } : this.searchValue;
        if (this.groupKey) {
            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });
        }
        // expose shallow copy instead of this.data in event args so this.data can't be mutated
        const oldCollection = [...this.data];
        const newCollection = [...this.data, addedItem];
        const args = {
            oldCollection, addedItem, newCollection, owner: this, cancel: false
        };
        this.addition.emit(args);
        if (args.cancel) {
            return;
        }
        this.data.push(args.addedItem);
        // trigger re-render
        this.data = cloneArray(this.data);
        this.select(this.valueKey !== null && this.valueKey !== undefined ?
            [args.addedItem[this.valueKey]] : [args.addedItem], false);
        this.customValueFlag = false;
        this.searchInput?.nativeElement.focus();
        this.dropdown.focusedItem = null;
        this.virtDir.scrollTo(0);
    }
    /** @hidden @internal */
    isAddButtonVisible() {
        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;
        return this.searchValue !== '' && this.customValueFlag;
    }
    /** @hidden @internal */
    handleInputChange(event) {
        if (event !== undefined) {
            const args = {
                searchText: typeof event === 'string' ? event : event.target.value,
                owner: this,
                cancel: false
            };
            this.searchInputUpdate.emit(args);
            if (args.cancel) {
                this.filterValue = null;
            }
        }
        this.checkMatch();
    }
    /**
     * Event handlers
     *
     * @hidden
     * @internal
     */
    handleOpening(e) {
        const args = { owner: this, event: e.event, cancel: e.cancel };
        this.opening.emit(args);
        e.cancel = args.cancel;
    }
    /** @hidden @internal */
    handleClosing(e) {
        const args = { owner: this, event: e.event, cancel: e.cancel };
        this.closing.emit(args);
        e.cancel = args.cancel;
        if (e.cancel) {
            return;
        }
        this.searchValue = '';
        if (!e.event) {
            this.comboInput?.nativeElement.focus();
        }
    }
    /** @hidden @internal */
    handleClosed() {
        this.closed.emit({ owner: this });
    }
    /** @hidden @internal */
    handleKeyDown(event) {
        if (event.key === 'ArrowUp' || event.key === 'Up') {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /** @hidden @internal */
    onClick(event) {
        event.stopPropagation();
        event.preventDefault();
        if (!this.disabled) {
            this.toggle();
        }
    }
    /** @hidden @internal */
    onBlur() {
        if (this.collapsed) {
            this._onTouchedCallback();
            if (this.ngControl && this.ngControl.invalid) {
                this.valid = IgxInputState.INVALID;
            }
            else {
                this.valid = IgxInputState.INITIAL;
            }
        }
    }
    /** @hidden @internal */
    setActiveDescendant() {
        this.activeDescendant = this.dropdown.focusedItem?.id || '';
    }
    /** @hidden @internal */
    toggleCaseSensitive() {
        this.filteringOptions = Object.assign({}, this.filteringOptions, { caseSensitive: !this.filteringOptions.caseSensitive });
    }
    get isTouchedOrDirty() {
        return (this.ngControl.control.touched || this.ngControl.control.dirty);
    }
    get hasValidators() {
        return (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);
    }
    /** if there is a valueKey - map the keys to data items, else - just return the keys */
    convertKeysToItems(keys) {
        if (this.valueKey === null || this.valueKey === undefined) {
            return keys;
        }
        return keys.map(key => {
            const item = isNaNvalue(key)
                ? this.data.find(entry => isNaNvalue(entry[this.valueKey]))
                : this.data.find(entry => entry[this.valueKey] === key);
            return item !== undefined ? item : { [this.valueKey]: key };
        });
    }
    checkMatch() {
        const itemMatch = this.filteredData.some(this.findMatch);
        this.customValueFlag = this.allowCustomValues && !itemMatch;
    }
    manageRequiredAsterisk() {
        if (this.ngControl) {
            if (this.ngControl.control.validator) {
                // Run the validation with empty object to check if required is enabled.
                const error = this.ngControl.control.validator({});
                this.inputGroup.isRequired = error && error.required;
            }
            else {
                // P.M. 18 May 2022: IgxCombo's asterisk not removed when removing required validator dynamically in reactive form #11543
                this.inputGroup.isRequired = false;
            }
        }
    }
    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */
    registerRemoteEntries(ids, add = true) {
        if (add) {
            const selection = this.getValueDisplayPairs(ids);
            for (const entry of selection) {
                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];
            }
        }
        else {
            for (const entry of ids) {
                delete this._remoteSelection[entry];
            }
        }
    }
    /**
     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`
     */
    getValueDisplayPairs(ids) {
        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => ({
            [this.valueKey]: e[this.valueKey],
            [this.displayKey]: e[this.displayKey]
        }));
    }
    getRemoteSelection(newSelection, oldSelection) {
        if (!newSelection.length) {
            // If new selection is empty, clear all items
            this.registerRemoteEntries(oldSelection, false);
            return '';
        }
        const removedItems = oldSelection.filter(e => newSelection.indexOf(e) < 0);
        const addedItems = newSelection.filter(e => oldSelection.indexOf(e) < 0);
        this.registerRemoteEntries(addedItems);
        this.registerRemoteEntries(removedItems, false);
        return Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');
    }
    get required() {
        if (this.ngControl && this.ngControl.control && this.ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this.ngControl.control.validator({});
            return error && error.required;
        }
        return false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboBaseDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.IgxSelectionAPIService }, { token: i2.IgxComboAPIService }, { token: i3.IgxIconService }, { token: DisplayDensityToken, optional: true }, { token: IGX_INPUT_GROUP_TYPE, optional: true }, { token: i0.Injector, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxComboBaseDirective, inputs: { showSearchCaseIcon: ["showSearchCaseIcon", "showSearchCaseIcon", booleanAttribute], overlaySettings: "overlaySettings", id: "id", width: "width", allowCustomValues: ["allowCustomValues", "allowCustomValues", booleanAttribute], itemsMaxHeight: "itemsMaxHeight", itemHeight: "itemHeight", itemsWidth: "itemsWidth", placeholder: "placeholder", data: "data", valueKey: "valueKey", displayKey: "displayKey", groupKey: "groupKey", groupSortingDirection: "groupSortingDirection", filterFunction: "filterFunction", ariaLabelledBy: "ariaLabelledBy", disabled: ["disabled", "disabled", booleanAttribute], type: "type", resourceStrings: "resourceStrings", filteringOptions: "filteringOptions" }, outputs: { opening: "opening", opened: "opened", closing: "closing", closed: "closed", addition: "addition", searchInputUpdate: "searchInputUpdate", dataPreLoad: "dataPreLoad" }, host: { properties: { "attr.id": "this.id", "style.width": "this.width", "class.igx-combo": "this.cssClass" } }, queries: [{ propertyName: "itemTemplate", first: true, predicate: IgxComboItemDirective, descendants: true, read: TemplateRef }, { propertyName: "headerTemplate", first: true, predicate: IgxComboHeaderDirective, descendants: true, read: TemplateRef }, { propertyName: "footerTemplate", first: true, predicate: IgxComboFooterDirective, descendants: true, read: TemplateRef }, { propertyName: "headerItemTemplate", first: true, predicate: IgxComboHeaderItemDirective, descendants: true, read: TemplateRef }, { propertyName: "addItemTemplate", first: true, predicate: IgxComboAddItemDirective, descendants: true, read: TemplateRef }, { propertyName: "emptyTemplate", first: true, predicate: IgxComboEmptyDirective, descendants: true, read: TemplateRef }, { propertyName: "toggleIconTemplate", first: true, predicate: IgxComboToggleIconDirective, descendants: true, read: TemplateRef }, { propertyName: "clearIconTemplate", first: true, predicate: IgxComboClearIconDirective, descendants: true, read: TemplateRef }, { propertyName: "label", first: true, predicate: i0.forwardRef(() => IgxLabelDirective), descendants: true, static: true }, { propertyName: "prefixes", predicate: IgxPrefixDirective, descendants: true }, { propertyName: "suffixes", predicate: IgxSuffixDirective, descendants: true }], viewQueries: [{ propertyName: "inputGroup", first: true, predicate: ["inputGroup"], descendants: true, read: IgxInputGroupComponent, static: true }, { propertyName: "comboInput", first: true, predicate: ["comboInput"], descendants: true, read: IgxInputDirective, static: true }, { propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }, { propertyName: "virtualScrollContainer", first: true, predicate: IgxForOfDirective, descendants: true, static: true }, { propertyName: "virtDir", first: true, predicate: IgxForOfDirective, descendants: true, read: IgxForOfDirective, static: true }, { propertyName: "dropdownContainer", first: true, predicate: ["dropdownItemContainer"], descendants: true, static: true }, { propertyName: "primitiveTemplate", first: true, predicate: ["primitive"], descendants: true, read: TemplateRef, static: true }, { propertyName: "complexTemplate", first: true, predicate: ["complex"], descendants: true, read: TemplateRef, static: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.IgxSelectionAPIService }, { type: i2.IgxComboAPIService }, { type: i3.IgxIconService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_INPUT_GROUP_TYPE]
                }] }, { type: i0.Injector, decorators: [{
                    type: Optional
                }] }], propDecorators: { showSearchCaseIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], overlaySettings: [{
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }, {
                type: Input
            }], allowCustomValues: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], itemsMaxHeight: [{
                type: Input
            }], itemHeight: [{
                type: Input
            }], itemsWidth: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], data: [{
                type: Input
            }], valueKey: [{
                type: Input
            }], displayKey: [{
                type: Input
            }], groupKey: [{
                type: Input
            }], groupSortingDirection: [{
                type: Input
            }], filterFunction: [{
                type: Input
            }], ariaLabelledBy: [{
                type: Input
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-combo']
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], type: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }], opening: [{
                type: Output
            }], opened: [{
                type: Output
            }], closing: [{
                type: Output
            }], closed: [{
                type: Output
            }], addition: [{
                type: Output
            }], searchInputUpdate: [{
                type: Output
            }], dataPreLoad: [{
                type: Output
            }], itemTemplate: [{
                type: ContentChild,
                args: [IgxComboItemDirective, { read: TemplateRef }]
            }], headerTemplate: [{
                type: ContentChild,
                args: [IgxComboHeaderDirective, { read: TemplateRef }]
            }], footerTemplate: [{
                type: ContentChild,
                args: [IgxComboFooterDirective, { read: TemplateRef }]
            }], headerItemTemplate: [{
                type: ContentChild,
                args: [IgxComboHeaderItemDirective, { read: TemplateRef }]
            }], addItemTemplate: [{
                type: ContentChild,
                args: [IgxComboAddItemDirective, { read: TemplateRef }]
            }], emptyTemplate: [{
                type: ContentChild,
                args: [IgxComboEmptyDirective, { read: TemplateRef }]
            }], toggleIconTemplate: [{
                type: ContentChild,
                args: [IgxComboToggleIconDirective, { read: TemplateRef }]
            }], clearIconTemplate: [{
                type: ContentChild,
                args: [IgxComboClearIconDirective, { read: TemplateRef }]
            }], label: [{
                type: ContentChild,
                args: [forwardRef(() => IgxLabelDirective), { static: true }]
            }], inputGroup: [{
                type: ViewChild,
                args: ['inputGroup', { read: IgxInputGroupComponent, static: true }]
            }], comboInput: [{
                type: ViewChild,
                args: ['comboInput', { read: IgxInputDirective, static: true }]
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], virtualScrollContainer: [{
                type: ViewChild,
                args: [IgxForOfDirective, { static: true }]
            }], virtDir: [{
                type: ViewChild,
                args: [IgxForOfDirective, { read: IgxForOfDirective, static: true }]
            }], dropdownContainer: [{
                type: ViewChild,
                args: ['dropdownItemContainer', { static: true }]
            }], primitiveTemplate: [{
                type: ViewChild,
                args: ['primitive', { read: TemplateRef, static: true }]
            }], complexTemplate: [{
                type: ViewChild,
                args: ['complex', { read: TemplateRef, static: true }]
            }], prefixes: [{
                type: ContentChildren,
                args: [IgxPrefixDirective, { descendants: true }]
            }], suffixes: [{
                type: ContentChildren,
                args: [IgxSuffixDirective, { descendants: true }]
            }], filteringOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,