import { Inject, Pipe } from '@angular/core';
import { SortingDirection } from '../data-operations/sorting-strategy';
import { IGX_COMBO_COMPONENT } from './combo.common';
import * as i0 from "@angular/core";
/** @hidden */
export class IgxComboFilteringPipe {
    transform(collection, searchValue, displayKey, filteringOptions, filterFunction = defaultFilterFunction) {
        if (!collection) {
            return [];
        }
        if (!filteringOptions.filterable) {
            return collection;
        }
        filteringOptions.filteringKey = filteringOptions.filteringKey ?? displayKey;
        return filterFunction(collection, searchValue, filteringOptions);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboFilteringPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxComboFilteringPipe, isStandalone: true, name: "comboFiltering" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboFilteringPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'comboFiltering',
                    standalone: true
                }]
        }] });
/** @hidden */
export class IgxComboGroupingPipe {
    constructor(combo) {
        this.combo = combo;
    }
    transform(collection, groupKey, valueKey, sortingDirection, compareCollator) {
        // TODO: should filteredData be changed here?
        this.combo.filteredData = collection;
        if ((!groupKey && groupKey !== 0) || !collection.length) {
            return collection;
        }
        const groups = Object.entries(groupBy(collection, (item) => item[groupKey] ?? 'Other'));
        if (sortingDirection !== SortingDirection.None) {
            const reverse = sortingDirection === SortingDirection.Desc ? -1 : 1;
            groups.sort((a, b) => {
                return compareCollator.compare(a[0], b[0]) * reverse;
            });
        }
        const result = groups.flatMap(([_, items]) => {
            items.unshift({
                isHeader: true,
                [valueKey]: items[0][groupKey],
                [groupKey]: items[0][groupKey]
            });
            return items;
        });
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboGroupingPipe, deps: [{ token: IGX_COMBO_COMPONENT }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxComboGroupingPipe, isStandalone: true, name: "comboGrouping" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxComboGroupingPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'comboGrouping',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_COMBO_COMPONENT]
                }] }] });
function defaultFilterFunction(collection, searchValue, filteringOptions) {
    if (!searchValue) {
        return collection;
    }
    const { caseSensitive, filteringKey } = filteringOptions;
    const term = caseSensitive ? searchValue : searchValue.toLowerCase();
    return collection.filter(item => {
        const str = filteringKey ? `${item[filteringKey]}` : `${item}`;
        return (caseSensitive ? str : str.toLowerCase()).includes(term);
    });
}
function normalizeString(str, caseSensitive = false) {
    return (caseSensitive ? str : str.toLocaleLowerCase())
        .normalize('NFKD')
        .replace(/\p{M}/gu, '');
}
function groupBy(data, key) {
    const result = {};
    const _get = typeof key === 'function' ? key : (item) => item[key];
    for (const item of data) {
        const category = _get(item);
        const group = result[category];
        Array.isArray(group) ? group.push(item) : (result[category] = [item]);
    }
    return result;
}
/**
 * Combo filter function which does not distinguish between accented letters and their base letters.
 * For example, when filtering for "resume", this function will match both "resume" and "résumé".
 *
 * @example
 * ```html
 * <igx-combo [filterFunction]="comboIgnoreDiacriticFilterFunction"></igx-combo>
 * ```
 */
export function comboIgnoreDiacriticsFilter(collection, searchValue, filteringOptions) {
    if (!searchValue) {
        return collection;
    }
    const { caseSensitive, filteringKey } = filteringOptions;
    const term = normalizeString(searchValue, caseSensitive);
    return collection.filter(item => {
        const str = filteringKey ? `${item[filteringKey]}` : `${item}`;
        return normalizeString(str, caseSensitive).includes(term);
    });
}
//# sourceMappingURL=data:application/json;base64,