import { Component, HostBinding, Input, booleanAttribute } from '@angular/core';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import { EDITOR_PROVIDER } from '../core/edit-provider';
import { IgxCheckboxComponent } from '../checkbox/checkbox.component';
import * as i0 from "@angular/core";
/**
 *
 * The Switch component is a binary choice selection component.
 *
 * @igxModule IgxSwitchModule
 *
 * @igxTheme igx-switch-theme, igx-tooltip-theme
 *
 * @igxKeywords switch, states, tooltip
 *
 * @igxGroup Data Entry & Display
 * @remarks
 *
 * The Ignite UI Switch lets the user toggle between on/off or true/false states.
 *
 * @example
 * ```html
 * <igx-switch [checked]="true">
 *   Simple switch
 * </igx-switch>
 * ```
 */
export class IgxSwitchComponent extends IgxCheckboxComponent {
    constructor() {
        super(...arguments);
        /**
         * Returns the class of the switch component.
         *
         * @example
         * ```typescript
         * let switchClass = this.switch.cssClass;
         * ```
         */
        this.cssClass = 'igx-switch';
        /**
         * Sets/gets the `disabled` attribute.
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-switch disabled><igx-switch>
         * ```
         */
        this.disabled = false;
        /**
         * Sets/gets whether the switch component is invalid.
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-switch invalid></igx-switch>
         * ```
         * ```typescript
         * let isInvalid = this.switch.invalid;
         * ```
         */
        this.invalid = false;
        /**
         * Sets/gets whether the switch component is on focus.
         * Default value is `false`.
         *
         * @example
         * ```typescript
         * this.switch.focused = true;
         * ```
         */
        this.focused = false;
    }
    /**
     * Sets/gets whether the switch is on or off.
     * Default value is 'false'.
     *
     * @example
     * ```html
     *  <igx-switch [checked]="true"></igx-switch>
     * ```
     */
    set checked(value) {
        super.checked = value;
    }
    get checked() {
        return super.checked;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxSwitchComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.2.4", type: IgxSwitchComponent, isStandalone: true, selector: "igx-switch", inputs: { checked: "checked", disabled: ["disabled", "disabled", booleanAttribute], invalid: ["invalid", "invalid", booleanAttribute] }, host: { properties: { "class.igx-switch": "this.cssClass", "class.igx-switch--checked": "this.checked", "class.igx-switch--disabled": "this.disabled", "class.igx-switch--invalid": "this.invalid", "class.igx-switch--focused": "this.focused" } }, providers: [{
                provide: EDITOR_PROVIDER,
                useExisting: IgxSwitchComponent,
                multi: true
            }], usesInheritance: true, ngImport: i0, template: "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.aria-invalid]=\"invalid\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onCheckboxChange($event)\"\n    (blur)=\"onBlur()\" />\n\n<span #label class=\"igx-switch__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</span>\n\n<span #placeholderLabel\n    [class]=\"labelClass\"\n    [id]=\"labelId\">\n    <ng-content></ng-content>\n</span>\n", dependencies: [{ kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxSwitchComponent, decorators: [{
            type: Component,
            args: [{ providers: [{
                            provide: EDITOR_PROVIDER,
                            useExisting: IgxSwitchComponent,
                            multi: true
                        }], selector: 'igx-switch', standalone: true, imports: [IgxRippleDirective], template: "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.aria-invalid]=\"invalid\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onCheckboxChange($event)\"\n    (blur)=\"onBlur()\" />\n\n<span #label class=\"igx-switch__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</span>\n\n<span #placeholderLabel\n    [class]=\"labelClass\"\n    [id]=\"labelId\">\n    <ng-content></ng-content>\n</span>\n" }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-switch']
            }], checked: [{
                type: HostBinding,
                args: ['class.igx-switch--checked']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.igx-switch--disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], invalid: [{
                type: HostBinding,
                args: ['class.igx-switch--invalid']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], focused: [{
                type: HostBinding,
                args: ['class.igx-switch--focused']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zd2l0Y2gvc3dpdGNoLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zd2l0Y2gvc3dpdGNoLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsV0FBVyxFQUNYLEtBQUssRUFFTCxnQkFBZ0IsRUFDbkIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFrQixlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFFdEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQVlILE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxvQkFBb0I7SUFYNUQ7O1FBWUk7Ozs7Ozs7V0FPRztRQUVhLGFBQVEsR0FBRyxZQUFZLENBQUM7UUFrQnhDOzs7Ozs7OztXQVFHO1FBR2EsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQzs7Ozs7Ozs7Ozs7V0FXRztRQUdhLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFaEM7Ozs7Ozs7O1dBUUc7UUFFYSxZQUFPLEdBQUcsS0FBSyxDQUFDO0tBQ25DO0lBekRHOzs7Ozs7OztPQVFHO0lBQ0gsSUFFb0IsT0FBTyxDQUFDLEtBQWM7UUFDdEMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQW9CLE9BQU87UUFDdkIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ3pCLENBQUM7OEdBM0JRLGtCQUFrQjtrR0FBbEIsa0JBQWtCLCtHQXNDUCxnQkFBZ0IsbUNBZ0JoQixnQkFBZ0IscVFBaEV6QixDQUFDO2dCQUNSLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixXQUFXLEVBQUUsa0JBQWtCO2dCQUMvQixLQUFLLEVBQUUsSUFBSTthQUNkLENBQUMsaURDdkNOLCs5QkFnQ0EsNENEV2Msa0JBQWtCOzsyRkFFbkIsa0JBQWtCO2tCQVg5QixTQUFTO2dDQUNLLENBQUM7NEJBQ1IsT0FBTyxFQUFFLGVBQWU7NEJBQ3hCLFdBQVcsb0JBQW9COzRCQUMvQixLQUFLLEVBQUUsSUFBSTt5QkFDZCxDQUFDLFlBQ1EsWUFBWSxjQUVWLElBQUksV0FDUCxDQUFDLGtCQUFrQixDQUFDOzhCQVliLFFBQVE7c0JBRHZCLFdBQVc7dUJBQUMsa0JBQWtCO2dCQWFYLE9BQU87c0JBRjFCLFdBQVc7dUJBQUMsMkJBQTJCOztzQkFDdkMsS0FBSztnQkFrQlUsUUFBUTtzQkFGdkIsV0FBVzt1QkFBQyw0QkFBNEI7O3NCQUN4QyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQWlCdEIsT0FBTztzQkFGdEIsV0FBVzt1QkFBQywyQkFBMkI7O3NCQUN2QyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQWF0QixPQUFPO3NCQUR0QixXQUFXO3VCQUFDLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIElucHV0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgYm9vbGVhbkF0dHJpYnV0ZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSWd4UmlwcGxlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9yaXBwbGUvcmlwcGxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFZGl0b3JQcm92aWRlciwgRURJVE9SX1BST1ZJREVSIH0gZnJvbSAnLi4vY29yZS9lZGl0LXByb3ZpZGVyJztcbmltcG9ydCB7IElneENoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi4vY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50JztcblxuLyoqXG4gKlxuICogVGhlIFN3aXRjaCBjb21wb25lbnQgaXMgYSBiaW5hcnkgY2hvaWNlIHNlbGVjdGlvbiBjb21wb25lbnQuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hTd2l0Y2hNb2R1bGVcbiAqXG4gKiBAaWd4VGhlbWUgaWd4LXN3aXRjaC10aGVtZSwgaWd4LXRvb2x0aXAtdGhlbWVcbiAqXG4gKiBAaWd4S2V5d29yZHMgc3dpdGNoLCBzdGF0ZXMsIHRvb2x0aXBcbiAqXG4gKiBAaWd4R3JvdXAgRGF0YSBFbnRyeSAmIERpc3BsYXlcbiAqIEByZW1hcmtzXG4gKlxuICogVGhlIElnbml0ZSBVSSBTd2l0Y2ggbGV0cyB0aGUgdXNlciB0b2dnbGUgYmV0d2VlbiBvbi9vZmYgb3IgdHJ1ZS9mYWxzZSBzdGF0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtc3dpdGNoIFtjaGVja2VkXT1cInRydWVcIj5cbiAqICAgU2ltcGxlIHN3aXRjaFxuICogPC9pZ3gtc3dpdGNoPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgcHJvdmlkZTogRURJVE9SX1BST1ZJREVSLFxuICAgICAgICB1c2VFeGlzdGluZzogSWd4U3dpdGNoQ29tcG9uZW50LFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH1dLFxuICAgIHNlbGVjdG9yOiAnaWd4LXN3aXRjaCcsXG4gICAgdGVtcGxhdGVVcmw6ICdzd2l0Y2guY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW0lneFJpcHBsZURpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgSWd4U3dpdGNoQ29tcG9uZW50IGV4dGVuZHMgSWd4Q2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRWRpdG9yUHJvdmlkZXIsIEFmdGVyVmlld0luaXQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNsYXNzIG9mIHRoZSBzd2l0Y2ggY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IHN3aXRjaENsYXNzID0gdGhpcy5zd2l0Y2guY3NzQ2xhc3M7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc3dpdGNoJylcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY3NzQ2xhc3MgPSAnaWd4LXN3aXRjaCc7XG4gICAgLyoqXG4gICAgICogU2V0cy9nZXRzIHdoZXRoZXIgdGhlIHN3aXRjaCBpcyBvbiBvciBvZmYuXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyAnZmFsc2UnLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxpZ3gtc3dpdGNoIFtjaGVja2VkXT1cInRydWVcIj48L2lneC1zd2l0Y2g+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc3dpdGNoLS1jaGVja2VkJylcbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBvdmVycmlkZSBzZXQgY2hlY2tlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBzdXBlci5jaGVja2VkID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBvdmVycmlkZSBnZXQgY2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNoZWNrZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUuXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1zd2l0Y2ggZGlzYWJsZWQ+PGlneC1zd2l0Y2g+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc3dpdGNoLS1kaXNhYmxlZCcpXG4gICAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG4gICAgcHVibGljIG92ZXJyaWRlIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgd2hldGhlciB0aGUgc3dpdGNoIGNvbXBvbmVudCBpcyBpbnZhbGlkLlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtc3dpdGNoIGludmFsaWQ+PC9pZ3gtc3dpdGNoPlxuICAgICAqIGBgYFxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgaXNJbnZhbGlkID0gdGhpcy5zd2l0Y2guaW52YWxpZDtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zd2l0Y2gtLWludmFsaWQnKVxuICAgIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICAgIHB1YmxpYyBvdmVycmlkZSBpbnZhbGlkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgd2hldGhlciB0aGUgc3dpdGNoIGNvbXBvbmVudCBpcyBvbiBmb2N1cy5cbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLnN3aXRjaC5mb2N1c2VkID0gdHJ1ZTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zd2l0Y2gtLWZvY3VzZWQnKVxuICAgIHB1YmxpYyBvdmVycmlkZSBmb2N1c2VkID0gZmFsc2U7XG59XG4iLCI8aW5wdXQgI2NoZWNrYm94IGNsYXNzPVwiaWd4LXN3aXRjaF9faW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIlxuICAgIFtpZF09XCJpbnB1dElkXCJcbiAgICBbbmFtZV09XCJuYW1lXCJcbiAgICBbdmFsdWVdPVwidmFsdWVcIlxuICAgIFt0YWJpbmRleF09XCJ0YWJpbmRleFwiXG4gICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICBbY2hlY2tlZF09XCJjaGVja2VkXCJcbiAgICBbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgIFthdHRyLmFyaWEtcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJpbnZhbGlkXCJcbiAgICBbYXR0ci5hcmlhLWNoZWNrZWRdPVwiY2hlY2tlZFwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XT1cImFyaWFMYWJlbCA/IG51bGwgOiBhcmlhTGFiZWxsZWRCeVwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuICAgIChjaGFuZ2UpPVwiX29uQ2hlY2tib3hDaGFuZ2UoJGV2ZW50KVwiXG4gICAgKGJsdXIpPVwib25CbHVyKClcIiAvPlxuXG48c3BhbiAjbGFiZWwgY2xhc3M9XCJpZ3gtc3dpdGNoX19jb21wb3NpdGVcIlxuICAgIGlneFJpcHBsZVxuICAgIGlneFJpcHBsZVRhcmdldD1cIi5pZ3gtc3dpdGNoX19yaXBwbGVcIlxuICAgIFtpZ3hSaXBwbGVEaXNhYmxlZF09XCJkaXNhYmxlUmlwcGxlXCJcbiAgICBbaWd4UmlwcGxlQ2VudGVyZWRdPVwidHJ1ZVwiXG4gICAgW2lneFJpcHBsZUR1cmF0aW9uXT1cIjMwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJpZ3gtc3dpdGNoX19jb21wb3NpdGUtdGh1bWJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlneC1zd2l0Y2hfX3JpcHBsZVwiPjwvZGl2PlxuICAgIDwvZGl2PlxuPC9zcGFuPlxuXG48c3BhbiAjcGxhY2Vob2xkZXJMYWJlbFxuICAgIFtjbGFzc109XCJsYWJlbENsYXNzXCJcbiAgICBbaWRdPVwibGFiZWxJZFwiPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvc3Bhbj5cbiJdfQ==