import { parseDate } from '../core/utils';
import { PivotUtil } from '../grids/pivot-grid/pivot-util';
import { GridColumnDataType } from './data-util';
import { DefaultSortingStrategy, SortingDirection } from './sorting-strategy';
export class DefaultPivotGridRecordSortingStrategy extends DefaultSortingStrategy {
    static { this._instance = null; }
    static instance() {
        return this._instance || (this._instance = new this());
    }
    sort(data, fieldName, dir, ignoreCase, valueResolver, isDate, isTime, _grid) {
        const reverse = (dir === SortingDirection.Desc ? -1 : 1);
        const cmpFunc = (obj1, obj2) => this.compareObjects(obj1, obj2, fieldName, reverse, ignoreCase, this.getFieldValue, isDate, isTime);
        return this.arraySort(data, cmpFunc);
    }
    getFieldValue(obj, key, _isDate = false, _isTime = false) {
        return obj.aggregationValues.get(key);
    }
}
export class DefaultPivotSortingStrategy extends DefaultSortingStrategy {
    static { this._instance = null; }
    static instance() {
        return this._instance || (this._instance = new this());
    }
    sort(data, fieldName, dir, ignoreCase, valueResolver, isDate, isTime, grid) {
        const key = fieldName;
        const allDimensions = grid.allDimensions;
        const enabledDimensions = allDimensions.filter(x => x && x.enabled);
        this.dimension = PivotUtil.flatten(enabledDimensions).find(x => x.memberName === key);
        const reverse = (dir === SortingDirection.Desc ? -1 : 1);
        const cmpFunc = (obj1, obj2) => this.compareObjects(obj1, obj2, key, reverse, ignoreCase, this.getFieldValue, isDate, isTime);
        return this.arraySort(data, cmpFunc);
    }
    getFieldValue(obj, key, _isDate = false, isTime = false) {
        let resolvedValue = PivotUtil.extractValueFromDimension(this.dimension, obj) || obj[0];
        const formatAsDate = this.dimension.dataType === GridColumnDataType.Date || this.dimension.dataType === GridColumnDataType.DateTime;
        if (formatAsDate) {
            const date = parseDate(resolvedValue);
            resolvedValue = isTime && date ?
                new Date().setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()) : date;
        }
        return resolvedValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGl2b3Qtc29ydC1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRhLW9wZXJhdGlvbnMvcGl2b3Qtc29ydC1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFOUUsTUFBTSxPQUFPLHFDQUFzQyxTQUFRLHNCQUFzQjthQUNuRCxjQUFTLEdBQTBDLElBQUksQ0FBQztJQUMzRSxNQUFNLENBQVUsUUFBUTtRQUMzQixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ2UsSUFBSSxDQUFDLElBQVcsRUFDNUIsU0FBaUIsRUFDakIsR0FBcUIsRUFDckIsVUFBbUIsRUFDbkIsYUFBK0QsRUFDL0QsTUFBZ0IsRUFDaEIsTUFBZ0IsRUFDaEIsS0FBcUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEtBQUssZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFB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fSBmcm9tICcuLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IFBpdm90R3JpZFR5cGUgfSBmcm9tICcuLi9ncmlkcy9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSVBpdm90R3JpZFJlY29yZCB9IGZyb20gJy4uL2dyaWRzL3Bpdm90LWdyaWQvcGl2b3QtZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUGl2b3RVdGlsIH0gZnJvbSAnLi4vZ3JpZHMvcGl2b3QtZ3JpZC9waXZvdC11dGlsJztcbmltcG9ydCB7IEdyaWRDb2x1bW5EYXRhVHlwZSB9IGZyb20gJy4vZGF0YS11dGlsJztcbmltcG9ydCB7IERlZmF1bHRTb3J0aW5nU3RyYXRlZ3ksIFNvcnRpbmdEaXJlY3Rpb24gfSBmcm9tICcuL3NvcnRpbmctc3RyYXRlZ3knO1xuXG5leHBvcnQgY2xhc3MgRGVmYXVsdFBpdm90R3JpZFJlY29yZFNvcnRpbmdTdHJhdGVneSBleHRlbmRzIERlZmF1bHRTb3J0aW5nU3RyYXRlZ3kge1xuICAgIHByb3RlY3RlZCBzdGF0aWMgb3ZlcnJpZGUgX2luc3RhbmNlOiBEZWZhdWx0UGl2b3RHcmlkUmVjb3JkU29ydGluZ1N0cmF0ZWd5ID0gbnVsbDtcbiAgICBwdWJsaWMgc3RhdGljIG92ZXJyaWRlIGluc3RhbmNlKCk6IERlZmF1bHRQaXZvdEdyaWRSZWNvcmRTb3J0aW5nU3RyYXRlZ3kge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UgfHwgKHRoaXMuX2luc3RhbmNlID0gbmV3IHRoaXMoKSk7XG4gICAgfVxuICAgIHB1YmxpYyBvdmVycmlkZSBzb3J0KGRhdGE6IGFueVtdLFxuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICAgICAgZGlyOiBTb3J0aW5nRGlyZWN0aW9uLFxuICAgICAgICBpZ25vcmVDYXNlOiBib29sZWFuLFxuICAgICAgICB2YWx1ZVJlc29sdmVyOiAob2JqOiBhbnksIGtleTogc3RyaW5nLCBpc0RhdGU/OiBib29sZWFuKSA9PiBhbnksXG4gICAgICAgIGlzRGF0ZT86IGJvb2xlYW4sXG4gICAgICAgIGlzVGltZT86IGJvb2xlYW4sXG4gICAgICAgIF9ncmlkPzogUGl2b3RHcmlkVHlwZSkge1xuICAgICAgICBjb25zdCByZXZlcnNlID0gKGRpciA9PT0gU29ydGluZ0RpcmVjdGlvbi5EZXNjID8gLTEgOiAxKTtcbiAgICAgICAgY29uc3QgY21wRnVuYyA9IChvYmoxLCBvYmoyKSA9PiB0aGlzLmNvbXBhcmVPYmplY3RzKG9iajEsIG9iajIsIGZpZWxkTmFtZSwgcmV2ZXJzZSwgaWdub3JlQ2FzZSwgdGhpcy5nZXRGaWVsZFZhbHVlLCBpc0RhdGUsIGlzVGltZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5U29ydChkYXRhLCBjbXBGdW5jKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RmllbGRWYWx1ZShvYmo6IElQaXZvdEdyaWRSZWNvcmQsIGtleTogc3RyaW5nLCBfaXNEYXRlID0gZmFsc2UsIF9pc1RpbWUgPSBmYWxzZSk6IGFueSB7XG4gICAgICAgIHJldHVybiBvYmouYWdncmVnYXRpb25WYWx1ZXMuZ2V0KGtleSk7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0UGl2b3RTb3J0aW5nU3RyYXRlZ3kgZXh0ZW5kcyBEZWZhdWx0U29ydGluZ1N0cmF0ZWd5IHtcbiAgICBwcm90ZWN0ZWQgc3RhdGljIG92ZXJyaWRlIF9pbnN0YW5jZTogRGVmYXVsdFBpdm90U29ydGluZ1N0cmF0ZWd5ID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgZGltZW5zaW9uO1xuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgaW5zdGFuY2UoKTogRGVmYXVsdFBpdm90U29ydGluZ1N0cmF0ZWd5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlIHx8ICh0aGlzLl9pbnN0YW5jZSA9IG5ldyB0aGlzKCkpO1xuICAgIH1cbiAgICBwdWJsaWMgb3ZlcnJpZGUgc29ydChkYXRhOiBhbnlbXSxcbiAgICAgICAgZmllbGROYW1lOiBzdHJpbmcsXG4gICAgICAgIGRpcjogU29ydGluZ0RpcmVjdGlvbixcbiAgICAgICAgaWdub3JlQ2FzZTogYm9vbGVhbixcbiAgICAgICAgdmFsdWVSZXNvbHZlcjogKG9iajogYW55LCBrZXk6IHN0cmluZywgaXNEYXRlPzogYm9vbGVhbikgPT4gYW55LFxuICAgICAgICBpc0RhdGU/OiBib29sZWFuLFxuICAgICAgICBpc1RpbWU/OiBib29sZWFuLFxuICAgICAgICBncmlkPzogUGl2b3RHcmlkVHlwZSkge1xuICAgICAgICBjb25zdCBrZXkgPSBmaWVsZE5hbWU7XG4gICAgICAgIGNvbnN0IGFsbERpbWVuc2lvbnMgPSBncmlkLmFsbERpbWVuc2lvbnM7XG4gICAgICAgIGNvbnN0IGVuYWJsZWREaW1lbnNpb25zID0gYWxsRGltZW5zaW9ucy5maWx0ZXIoeCA9PiB4ICYmIHguZW5hYmxlZCk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9uID0gUGl2b3RVdGlsLmZsYXR0ZW4oZW5hYmxlZERpbWVuc2lvbnMpLmZpbmQoeCA9PiB4Lm1lbWJlck5hbWUgPT09IGtleSk7XG4gICAgICAgIGNvbnN0IHJldmVyc2UgPSAoZGlyID09PSBTb3J0aW5nRGlyZWN0aW9uLkRlc2MgPyAtMSA6IDEpO1xuICAgICAgICBjb25zdCBjbXBGdW5jID0gKG9iajEsIG9iajIpID0+IHRoaXMuY29tcGFyZU9iamVjdHMob2JqMSwgb2JqMiwga2V5LCByZXZlcnNlLCBpZ25vcmVDYXNlLCB0aGlzLmdldEZpZWxkVmFsdWUsIGlzRGF0ZSwgaXNUaW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXlTb3J0KGRhdGEsIGNtcEZ1bmMpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRGaWVsZFZhbHVlKG9iajogYW55LCBrZXk6IHN0cmluZywgX2lzRGF0ZSA9IGZhbHNlLCBpc1RpbWUgPSBmYWxzZSk6IGFueSB7XG4gICAgICAgIGxldCByZXNvbHZlZFZhbHVlID0gUGl2b3RVdGlsLmV4dHJhY3RWYWx1ZUZyb21EaW1lbnNpb24odGhpcy5kaW1lbnNpb24sIG9iaikgfHwgb2JqWzBdO1xuICAgICAgICBjb25zdCBmb3JtYXRBc0RhdGUgPSB0aGlzLmRpbWVuc2lvbi5kYXRhVHlwZSA9PT0gR3JpZENvbHVtbkRhdGFUeXBlLkRhdGUgfHwgdGhpcy5kaW1lbnNpb24uZGF0YVR5cGUgPT09IEdyaWRDb2x1bW5EYXRhVHlwZS5EYXRlVGltZTtcbiAgICAgICAgaWYgKGZvcm1hdEFzRGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IHBhcnNlRGF0ZShyZXNvbHZlZFZhbHVlKTtcbiAgICAgICAgICAgIHJlc29sdmVkVmFsdWUgPSBpc1RpbWUgJiYgZGF0ZSA/XG4gICAgICAgICAgICAgICAgbmV3IERhdGUoKS5zZXRIb3VycyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkgOiBkYXRlO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkVmFsdWU7XG4gICAgfVxufVxuIl19