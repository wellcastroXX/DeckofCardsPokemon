import { Directive, HostBinding, Input, booleanAttribute } from '@angular/core';
import * as i0 from "@angular/core";
export class IgxLayoutDirective {
    constructor() {
        /**
         * Sets the default flow direction of the container's children.
         *
         * Defaults to `rows`.
         *
         * ```html
         *  <div
         *   igxLayout
         *   igxLayoutDir="row">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         *  </div>
         * ```
         */
        this.dir = 'row';
        /**
         * Defines the direction flex children are placed in the flex container.
         *
         * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutReverse="true">
         *    <div igxFlex>1</div>
         *    <div igxFlex>2</div>
         *    <div igxFlex>3</div>
         * </div>
         * ```
         */
        this.reverse = false;
        /**
         * By default the immediate children will all try to fit onto one line.
         *
         * The default value `nowrap` sets this behavior.
         *
         * Other accepted values are `wrap` and `wrap-reverse`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="row"
         *   igxLayoutWrap="wrap">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.wrap = 'nowrap';
        /**
         * Defines the alignment along the main axis.
         *
         * Defaults to `flex-start` which packs the children toward the start line.
         *
         * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutJustify="space-between">
         *    <div>1</div>
         *    <div>2</div>
         *    <div>3</div>
         * </div>
         * ```
         */
        this.justify = 'flex-start';
        /**
         * Defines the default behavior for how children are laid out along the corss axis of the current line.
         *
         * Defaults to `flex-start`.
         *
         * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.
         *
         * ```html
         * <div
         *   igxLayout
         *   igxLayoutDir="column"
         *   igxLayoutItemAlign="start">
         *    <div igxFlex igxFlexGrow="0">1</div>
         *    <div igxFlex igxFlexGrow="0">2</div>
         *    <div igxFlex igxFlexGrow="0">3</div>
         * </div>
         * ```
         */
        this.itemAlign = 'stretch';
        /**
         * @hidden
         */
        this.display = 'flex';
    }
    /**
     * @hidden
     */
    get flexwrap() {
        return this.wrap;
    }
    /**
     * @hidden
     */
    get justifycontent() {
        return this.justify;
    }
    /**
     * @hidden
     */
    get align() {
        return this.itemAlign;
    }
    /**
     * @hidden
     */
    get direction() {
        if (this.reverse) {
            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';
        }
        return (this.dir === 'row') ? 'row' : 'column';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxLayoutDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxLayoutDirective, isStandalone: true, selector: "[igxLayout]", inputs: { dir: ["igxLayoutDir", "dir"], reverse: ["igxLayoutReverse", "reverse", booleanAttribute], wrap: ["igxLayoutWrap", "wrap"], justify: ["igxLayoutJustify", "justify"], itemAlign: ["igxLayoutItemAlign", "itemAlign"] }, host: { properties: { "style.display": "this.display", "style.flex-wrap": "this.flexwrap", "style.justify-content": "this.justifycontent", "style.align-items": "this.align", "style.flex-direction": "this.direction" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxLayoutDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxLayout]',
                    standalone: true
                }]
        }], propDecorators: { dir: [{
                type: Input,
                args: ['igxLayoutDir']
            }], reverse: [{
                type: Input,
                args: [{ alias: 'igxLayoutReverse', transform: booleanAttribute }]
            }], wrap: [{
                type: Input,
                args: ['igxLayoutWrap']
            }], justify: [{
                type: Input,
                args: ['igxLayoutJustify']
            }], itemAlign: [{
                type: Input,
                args: ['igxLayoutItemAlign']
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], flexwrap: [{
                type: HostBinding,
                args: ['style.flex-wrap']
            }], justifycontent: [{
                type: HostBinding,
                args: ['style.justify-content']
            }], align: [{
                type: HostBinding,
                args: ['style.align-items']
            }], direction: [{
                type: HostBinding,
                args: ['style.flex-direction']
            }] } });
export class IgxFlexDirective {
    constructor() {
        /**
         * Applies the `grow` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexGrow="0">Content1</div>
         *    <div igxFlex igxFlexGrow="1">Content2</div>
         *    <div igxFlex igxFlexGrow="0">Content3</div>
         * </div>
         * ```
         */
        this.grow = 1;
        /**
         * Applies the `shrink` attribute to an element that uses the directive.
         *
         * Default value is `1`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexShrink="1">Content1</div>
         *    <div igxFlex igxFlexShrink="0">Content2</div>
         *    <div igxFlex igxFlexShrink="1">Content3</div>
         * </div>
         * ```
         */
        this.shrink = 1;
        /**
         * Applies the directive to an element.
         *
         * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.
         *
         * ```html
         * <div igxFlex>Content</div>
         * ```
         */
        this.flex = '';
        /**
         * Applies the `order` attribute to an element that uses the directive.
         *
         * Default value is `0`.
         *
         * ```html
         * <div>
         *    <div igxFlex igxFlexOrder="1">Content1</div>
         *    <div igxFlex igxFlexOrder="0">Content2</div>
         *    <div igxFlex igxFlexOrder="2">Content3</div>
         * </div>
         * ```
         */
        this.order = 0;
        /**
         * Applies the `flex-basis` attribute to an element that uses the directive.
         *
         * Default value is `auto`.
         *
         * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.
         *
         * ```html
         * <div igxFlex igxFlexBasis="fit-content">Content</div>
         * ```
         */
        this.basis = 'auto';
    }
    /**
     * @hidden
     */
    get style() {
        if (this.flex) {
            return `${this.flex}`;
        }
        return `${this.grow} ${this.shrink} ${this.basis}`;
    }
    /**
     * @hidden
     */
    get itemorder() {
        return this.order || 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFlexDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxFlexDirective, isStandalone: true, selector: "[igxFlex]", inputs: { grow: ["igxFlexGrow", "grow"], shrink: ["igxFlexShrink", "shrink"], flex: ["igxFlex", "flex"], order: ["igxFlexOrder", "order"], basis: ["igxFlexBasis", "basis"] }, host: { properties: { "style.flex": "this.style", "style.order": "this.itemorder" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFlexDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxFlex]',
                    standalone: true
                }]
        }], propDecorators: { grow: [{
                type: Input,
                args: ['igxFlexGrow']
            }], shrink: [{
                type: Input,
                args: ['igxFlexShrink']
            }], flex: [{
                type: Input,
                args: ['igxFlex']
            }], order: [{
                type: Input,
                args: ['igxFlexOrder']
            }], basis: [{
                type: Input,
                args: ['igxFlexBasis']
            }], style: [{
                type: HostBinding,
                args: ['style.flex']
            }], itemorder: [{
                type: HostBinding,
                args: ['style.order']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL2xheW91dC9sYXlvdXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNaEYsTUFBTSxPQUFPLGtCQUFrQjtJQUovQjtRQUtJOzs7Ozs7Ozs7Ozs7OztXQWNHO1FBQzJCLFFBQUcsR0FBRyxLQUFLLENBQUM7UUFFMUM7Ozs7Ozs7Ozs7Ozs7O1dBY0c7UUFDdUUsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUUxRjs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDNEIsU0FBSSxHQUFHLFFBQVEsQ0FBQztRQUUvQzs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDK0IsWUFBTyxHQUFHLFlBQVksQ0FBQztRQUV6RDs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDaUMsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUUxRDs7V0FFRztRQUNrQyxZQUFPLEdBQUcsTUFBTSxDQUFDO0tBb0N6RDtJQWxDRzs7T0FFRztJQUNILElBQ1csUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQ1csS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLFNBQVM7UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7U0FDbEU7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDbkQsQ0FBQzs4R0FySVEsa0JBQWtCO2tHQUFsQixrQkFBa0IsZ0lBaUNvQixnQkFBZ0I7OzJGQWpDdEQsa0JBQWtCO2tCQUo5QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxhQUFhO29CQUN2QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OEJBaUJpQyxHQUFHO3NCQUFoQyxLQUFLO3VCQUFDLGNBQWM7Z0JBaUJxRCxPQUFPO3NCQUFoRixLQUFLO3VCQUFDLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFvQmxDLElBQUk7c0JBQWxDLEtBQUs7dUJBQUMsZUFBZTtnQkFvQlksT0FBTztzQkFBeEMsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBb0JXLFNBQVM7c0JBQTVDLEtBQUs7dUJBQUMsb0JBQW9CO2dCQUtVLE9BQU87c0JBQTNDLFdBQVc7dUJBQUMsZUFBZTtnQkFNakIsUUFBUTtzQkFEbEIsV0FBVzt1QkFBQyxpQkFBaUI7Z0JBU25CLGNBQWM7c0JBRHhCLFdBQVc7dUJBQUMsdUJBQXVCO2dCQVN6QixLQUFLO3NCQURmLFdBQVc7dUJBQUMsbUJBQW1CO2dCQVNyQixTQUFTO3NCQURuQixXQUFXO3VCQUFDLHNCQUFzQjs7QUFhdkMsTUFBTSxPQUFPLGdCQUFnQjtJQUo3QjtRQU1JOzs7Ozs7Ozs7Ozs7V0FZRztRQUMwQixTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRXRDOzs7Ozs7Ozs7Ozs7V0FZRztRQUM0QixXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRTFDOzs7Ozs7OztXQVFHO1FBQ3NCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFFbkM7Ozs7Ozs7Ozs7OztXQVlHO1FBQzJCLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFeEM7Ozs7Ozs7Ozs7V0FVRztRQUMyQixVQUFLLEdBQUcsTUFBTSxDQUFDO0tBb0JoRDtJQWxCRzs7T0FFRztJQUNILElBQ1csS0FBSztRQUNaLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7UUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNXLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDOzhHQXhGUSxnQkFBZ0I7a0dBQWhCLGdCQUFnQjs7MkZBQWhCLGdCQUFnQjtrQkFKNUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztvQkFDckIsVUFBVSxFQUFFLElBQUk7aUJBQ25COzhCQWdCZ0MsSUFBSTtzQkFBaEMsS0FBSzt1QkFBQyxhQUFhO2dCQWVXLE1BQU07c0JBQXBDLEtBQUs7dUJBQUMsZUFBZTtnQkFXRyxJQUFJO3NCQUE1QixLQUFLO3VCQUFDLFNBQVM7Z0JBZWMsS0FBSztzQkFBbEMsS0FBSzt1QkFBQyxjQUFjO2dCQWFTLEtBQUs7c0JBQWxDLEtBQUs7dUJBQUMsY0FBYztnQkFNVixLQUFLO3NCQURmLFdBQVc7dUJBQUMsWUFBWTtnQkFZZCxTQUFTO3NCQURuQixXQUFXO3VCQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCwgYm9vbGVhbkF0dHJpYnV0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMYXlvdXRdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneExheW91dERpcmVjdGl2ZSB7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGVmYXVsdCBmbG93IGRpcmVjdGlvbiBvZiB0aGUgY29udGFpbmVyJ3MgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byBgcm93c2AuXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogIDxkaXZcbiAgICAgKiAgIGlneExheW91dFxuICAgICAqICAgaWd4TGF5b3V0RGlyPVwicm93XCI+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4PjE8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXg+MjwvZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleD4zPC9kaXY+XG4gICAgICogIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgnaWd4TGF5b3V0RGlyJykgcHVibGljIGRpciA9ICdyb3cnO1xuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGlyZWN0aW9uIGZsZXggY2hpbGRyZW4gYXJlIHBsYWNlZCBpbiB0aGUgZmxleCBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBgcm93c2AgZGlyZWN0aW9uIGdvZXMgcmlnaHQgdG8gbGVmdCBhbmQgYGNvbHVtbnNgIGdvZXMgYm90dG9tIHRvIHRvcC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2XG4gICAgICogICBpZ3hMYXlvdXRcbiAgICAgKiAgIGlneExheW91dFJldmVyc2U9XCJ0cnVlXCI+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4PjE8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXg+MjwvZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleD4zPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KHsgYWxpYXM6ICdpZ3hMYXlvdXRSZXZlcnNlJywgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pIHB1YmxpYyByZXZlcnNlID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBpbW1lZGlhdGUgY2hpbGRyZW4gd2lsbCBhbGwgdHJ5IHRvIGZpdCBvbnRvIG9uZSBsaW5lLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgYG5vd3JhcGAgc2V0cyB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogT3RoZXIgYWNjZXB0ZWQgdmFsdWVzIGFyZSBgd3JhcGAgYW5kIGB3cmFwLXJldmVyc2VgLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXZcbiAgICAgKiAgIGlneExheW91dFxuICAgICAqICAgaWd4TGF5b3V0RGlyPVwicm93XCJcbiAgICAgKiAgIGlneExheW91dFdyYXA9XCJ3cmFwXCI+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4IGlneEZsZXhHcm93PVwiMFwiPjE8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleEdyb3c9XCIwXCI+MjwvZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleCBpZ3hGbGV4R3Jvdz1cIjBcIj4zPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KCdpZ3hMYXlvdXRXcmFwJykgcHVibGljIHdyYXAgPSAnbm93cmFwJztcblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGFsaWdubWVudCBhbG9uZyB0aGUgbWFpbiBheGlzLlxuICAgICAqXG4gICAgICogRGVmYXVsdHMgdG8gYGZsZXgtc3RhcnRgIHdoaWNoIHBhY2tzIHRoZSBjaGlsZHJlbiB0b3dhcmQgdGhlIHN0YXJ0IGxpbmUuXG4gICAgICpcbiAgICAgKiBPdGhlciBwb3NzaWJsZSB2YWx1ZXMgYXJlIGBmbGV4LWVuZGAsIGBjZW50ZXJgLCBgc3BhY2UtYmV0d2VlbmAsIGBzcGFjZS1hcm91bmRgLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXZcbiAgICAgKiAgIGlneExheW91dFxuICAgICAqICAgaWd4TGF5b3V0RGlyPVwiY29sdW1uXCJcbiAgICAgKiAgIGlneExheW91dEp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCI+XG4gICAgICogICAgPGRpdj4xPC9kaXY+XG4gICAgICogICAgPGRpdj4yPC9kaXY+XG4gICAgICogICAgPGRpdj4zPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KCdpZ3hMYXlvdXRKdXN0aWZ5JykgcHVibGljIGp1c3RpZnkgPSAnZmxleC1zdGFydCc7XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciBob3cgY2hpbGRyZW4gYXJlIGxhaWQgb3V0IGFsb25nIHRoZSBjb3JzcyBheGlzIG9mIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byBgZmxleC1zdGFydGAuXG4gICAgICpcbiAgICAgKiBPdGhlciBwb3NzaWJsZSB2YWx1ZXMgYXJlIGBmbGV4LWVuZGAsIGBjZW50ZXJgLCBgYmFzZWxpbmVgLCBhbmQgYHN0cmV0Y2hgLlxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXZcbiAgICAgKiAgIGlneExheW91dFxuICAgICAqICAgaWd4TGF5b3V0RGlyPVwiY29sdW1uXCJcbiAgICAgKiAgIGlneExheW91dEl0ZW1BbGlnbj1cInN0YXJ0XCI+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4IGlneEZsZXhHcm93PVwiMFwiPjE8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleEdyb3c9XCIwXCI+MjwvZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleCBpZ3hGbGV4R3Jvdz1cIjBcIj4zPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KCdpZ3hMYXlvdXRJdGVtQWxpZ24nKSBwdWJsaWMgaXRlbUFsaWduID0gJ3N0cmV0Y2gnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpIHB1YmxpYyBkaXNwbGF5ID0gJ2ZsZXgnO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUuZmxleC13cmFwJylcbiAgICBwdWJsaWMgZ2V0IGZsZXh3cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmp1c3RpZnktY29udGVudCcpXG4gICAgcHVibGljIGdldCBqdXN0aWZ5Y29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuanVzdGlmeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5hbGlnbi1pdGVtcycpXG4gICAgcHVibGljIGdldCBhbGlnbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbUFsaWduO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmZsZXgtZGlyZWN0aW9uJylcbiAgICBwdWJsaWMgZ2V0IGRpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucmV2ZXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRpciA9PT0gJ3JvdycpID8gJ3Jvdy1yZXZlcnNlJyA6ICdjb2x1bW4tcmV2ZXJzZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLmRpciA9PT0gJ3JvdycpID8gJ3JvdycgOiAnY29sdW1uJztcbiAgICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZsZXhdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEZsZXhEaXJlY3RpdmUge1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgYGdyb3dgIGF0dHJpYnV0ZSB0byBhbiBlbGVtZW50IHRoYXQgdXNlcyB0aGUgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgMWAuXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleEdyb3c9XCIwXCI+Q29udGVudDE8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleEdyb3c9XCIxXCI+Q29udGVudDI8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleEdyb3c9XCIwXCI+Q29udGVudDM8L2Rpdj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoJ2lneEZsZXhHcm93JykgcHVibGljIGdyb3cgPSAxO1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgYHNocmlua2AgYXR0cmlidXRlIHRvIGFuIGVsZW1lbnQgdGhhdCB1c2VzIHRoZSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGAxYC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleCBpZ3hGbGV4U2hyaW5rPVwiMVwiPkNvbnRlbnQxPC9kaXY+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4IGlneEZsZXhTaHJpbms9XCIwXCI+Q29udGVudDI8L2Rpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleFNocmluaz1cIjFcIj5Db250ZW50MzwvZGl2PlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgnaWd4RmxleFNocmluaycpIHB1YmxpYyBzaHJpbmsgPSAxO1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgZGlyZWN0aXZlIHRvIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBQb3NzaWJsZSB2YWx1ZXMgaW5jbHVkZSBgaWd4RmxleEdyb3dgLCBgaWd4RmxleFNocmlua2AsIGBpZ3hGbGV4T3JkZXJgLCBgaWd4RmxleEJhc2lzYC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2IGlneEZsZXg+Q29udGVudDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgnaWd4RmxleCcpIHB1YmxpYyBmbGV4ID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBgb3JkZXJgIGF0dHJpYnV0ZSB0byBhbiBlbGVtZW50IHRoYXQgdXNlcyB0aGUgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgMGAuXG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGRpdj5cbiAgICAgKiAgICA8ZGl2IGlneEZsZXggaWd4RmxleE9yZGVyPVwiMVwiPkNvbnRlbnQxPC9kaXY+XG4gICAgICogICAgPGRpdiBpZ3hGbGV4IGlneEZsZXhPcmRlcj1cIjBcIj5Db250ZW50MjwvZGl2PlxuICAgICAqICAgIDxkaXYgaWd4RmxleCBpZ3hGbGV4T3JkZXI9XCIyXCI+Q29udGVudDM8L2Rpdj5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoJ2lneEZsZXhPcmRlcicpIHB1YmxpYyBvcmRlciA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBgZmxleC1iYXNpc2AgYXR0cmlidXRlIHRvIGFuIGVsZW1lbnQgdGhhdCB1c2VzIHRoZSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBhdXRvYC5cbiAgICAgKlxuICAgICAqIE90aGVyIHBvc3NpYmxlIHZhbHVlcyBpbmNsdWRlIGBjb250ZW50YCwgYG1heC1jb250ZW50YCwgYG1pbi1jb250ZW50YCwgYGZpdC1jb250ZW50YC5cbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZGl2IGlneEZsZXggaWd4RmxleEJhc2lzPVwiZml0LWNvbnRlbnRcIj5Db250ZW50PC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgQElucHV0KCdpZ3hGbGV4QmFzaXMnKSBwdWJsaWMgYmFzaXMgPSAnYXV0byc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5mbGV4JylcbiAgICBwdWJsaWMgZ2V0IHN0eWxlKCkge1xuICAgICAgICBpZiAodGhpcy5mbGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5mbGV4fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZ3Jvd30gJHt0aGlzLnNocmlua30gJHt0aGlzLmJhc2lzfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnc3R5bGUub3JkZXInKVxuICAgIHB1YmxpYyBnZXQgaXRlbW9yZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmRlciB8fCAwO1xuICAgIH1cbn1cbiJdfQ==