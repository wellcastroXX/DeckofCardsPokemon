// @dynamic
export class IgxDefaultDropStrategy {
    dropAction(_drag, _drop, _atIndex) { }
}
// @dynamic
export class IgxAppendDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, _atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        this._renderer.appendChild(dropAreaElement, dragElement);
    }
}
// @dynamic
export class IgxPrependDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, _atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (dropAreaElement.children.length) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
// @dynamic
export class IgxInsertDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, atIndex) {
        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {
            return;
        }
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZHJhZy1kcm9wL2RyYWctZHJvcC5zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxXQUFXO0FBQ1gsTUFBTSxPQUFPLHNCQUFzQjtJQUV4QixVQUFVLENBQUMsS0FBdUIsRUFBRSxLQUF1QixFQUFFLFFBQWdCLElBQUksQ0FBQztDQUM1RjtBQUVELFdBQVc7QUFDWCxNQUFNLE9BQU8scUJBQXFCO0lBRTlCLFlBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDO0lBRXRDLFVBQVUsQ0FBQyxJQUFzQixFQUFFLElBQXNCLEVBQUUsUUFBZ0I7UUFDOUUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBRUQsV0FBVztBQUNYLE1BQU0sT0FBTyxzQkFBc0I7SUFFL0IsWUFBb0IsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFJLENBQUM7SUFFdEMsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxRQUFnQjtRQUM5RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFdBQVcsRUFBRSxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUY7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUM1RDtJQUNMLENBQUM7Q0FDSjtBQUVELFdBQVc7QUFDWCxNQUFNLE9BQU8scUJBQXFCO0lBRTlCLFlBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDO0lBRXRDLFVBQVUsQ0FBQyxJQUFzQixFQUFFLElBQXNCLEVBQUUsT0FBZTtRQUM3RSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDM0YsT0FBTztTQUNWO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLFdBQVcsRUFBRSxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDaEc7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUM1RDtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4RHJhZ0RpcmVjdGl2ZSwgSWd4RHJvcERpcmVjdGl2ZSB9IGZyb20gJy4vZHJhZy1kcm9wLmRpcmVjdGl2ZSc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBJRHJvcFN0cmF0ZWd5IHtcbiAgICBkcm9wQWN0aW9uOiAoZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgYXRJbmRleDogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIElneERlZmF1bHREcm9wU3RyYXRlZ3kgaW1wbGVtZW50cyBJRHJvcFN0cmF0ZWd5IHtcblxuICAgIHB1YmxpYyBkcm9wQWN0aW9uKF9kcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBfZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgX2F0SW5kZXg6IG51bWJlcikgeyB9XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4QXBwZW5kRHJvcFN0cmF0ZWd5IGltcGxlbWVudHMgSURyb3BTdHJhdGVneSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuICAgIHB1YmxpYyBkcm9wQWN0aW9uKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIF9hdEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZHJhZ0VsZW1lbnQgPSBkcmFnLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgZHJvcEFyZWFFbGVtZW50ID0gZHJvcC5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKGRyYWdFbGVtZW50LnBhcmVudE5vZGUsIGRyYWdFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCk7XG4gICAgfVxufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIElneFByZXBlbmREcm9wU3RyYXRlZ3kgaW1wbGVtZW50cyBJRHJvcFN0cmF0ZWd5IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gICAgcHVibGljIGRyb3BBY3Rpb24oZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgX2F0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQsIGRyb3BBcmVhRWxlbWVudC5jaGlsZHJlblswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBJZ3hJbnNlcnREcm9wU3RyYXRlZ3kgaW1wbGVtZW50cyBJRHJvcFN0cmF0ZWd5IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gICAgcHVibGljIGRyb3BBY3Rpb24oZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgYXRJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChkcmFnLmVsZW1lbnQubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudCAmJiBhdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZHJhZ0VsZW1lbnQgPSBkcmFnLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgZHJvcEFyZWFFbGVtZW50ID0gZHJvcC5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKGRyYWdFbGVtZW50LnBhcmVudE5vZGUsIGRyYWdFbGVtZW50KTtcbiAgICAgICAgaWYgKGF0SW5kZXggIT09IC0xICYmIGRyb3BBcmVhRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiBhdEluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5pbnNlcnRCZWZvcmUoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCwgZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuW2F0SW5kZXhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19