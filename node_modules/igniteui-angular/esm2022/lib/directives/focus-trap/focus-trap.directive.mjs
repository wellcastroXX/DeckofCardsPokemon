import { Directive, Input, booleanAttribute } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
export class IgxFocusTrapDirective {
    /** @hidden */
    get element() {
        return this.elementRef.nativeElement;
    }
    /** @hidden */
    constructor(elementRef, platformUtil) {
        this.elementRef = elementRef;
        this.platformUtil = platformUtil;
        this.destroy$ = new Subject();
        this._focusTrap = true;
    }
    /**
     * Sets whether the Tab key focus is trapped within the element.
     *
     * @example
     * ```html
     * <div igxFocusTrap="true"></div>
     * ```
     */
    set focusTrap(focusTrap) {
        this._focusTrap = focusTrap;
    }
    /** @hidden */
    get focusTrap() {
        return this._focusTrap;
    }
    /** @hidden */
    ngAfterViewInit() {
        fromEvent(this.element, 'keydown')
            .pipe(takeUntil(this.destroy$))
            .subscribe((event) => {
            if (this._focusTrap && event.key === this.platformUtil.KEYMAP.TAB) {
                this.handleTab(event);
            }
        });
    }
    /** @hidden */
    ngOnDestroy() {
        this.destroy$.complete();
    }
    handleTab(event) {
        const elements = this.getFocusableElements(this.element);
        if (elements.length > 0) {
            const focusedElement = this.getFocusedElement();
            const focusedElementIndex = elements.findIndex((element) => element === focusedElement);
            const direction = event.shiftKey ? -1 : 1;
            let nextFocusableElementIndex = focusedElementIndex + direction;
            if (nextFocusableElementIndex < 0) {
                nextFocusableElementIndex = elements.length - 1;
            }
            if (nextFocusableElementIndex >= elements.length) {
                nextFocusableElementIndex = 0;
            }
            elements[nextFocusableElementIndex].focus();
        }
        else {
            this.element.focus();
        }
        event.preventDefault();
    }
    getFocusableElements(element) {
        return Array.from(element.querySelectorAll('a[href], button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])')).filter(el => !el.hasAttribute('disabled') && !el.getAttribute('aria-hidden'));
    }
    getFocusedElement() {
        let activeElement = typeof document !== 'undefined' && document
            ? document.activeElement
            : null;
        while (activeElement && activeElement.shadowRoot) {
            const newActiveElement = activeElement.shadowRoot.activeElement;
            if (newActiveElement === activeElement) {
                break;
            }
            else {
                activeElement = newActiveElement;
            }
        }
        return activeElement;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFocusTrapDirective, deps: [{ token: i0.ElementRef }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxFocusTrapDirective, isStandalone: true, selector: "[igxFocusTrap]", inputs: { focusTrap: ["igxFocusTrap", "focusTrap", booleanAttribute] }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFocusTrapDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxFocusTrap]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.PlatformUtil }], propDecorators: { focusTrap: [{
                type: Input,
                args: [{ alias: 'igxFocusTrap', transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,