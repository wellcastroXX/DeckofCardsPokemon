import { Directive, EventEmitter, HostBinding, Input, Output, Optional, Inject, booleanAttribute } from '@angular/core';
import { DisplayDensityToken } from '../../core/density';
import { mkenum } from '../../core/utils';
import { IgxBaseButtonType, IgxButtonBaseDirective } from './button-base';
import * as i0 from "@angular/core";
const IgxButtonType = /*@__PURE__*/ mkenum({
    ...IgxBaseButtonType,
    FAB: 'fab'
});
/**
 * The Button directive provides the Ignite UI Button functionality to every component that's intended to be used as a button.
 *
 * @igxModule IgxButtonModule
 *
 * @igxParent Data Entry & Display
 *
 * @igxTheme igx-button-theme
 *
 * @igxKeywords button, span, div, click
 *
 * @remarks
 * The Ignite UI Button directive is intended to be used by any button, span or div and turn it into a fully functional button.
 *
 * @example
 * ```html
 * <button type="button" igxButton="outlined">A Button</button>
 * ```
 */
export class IgxButtonDirective extends IgxButtonBaseDirective {
    /**
     * Gets or sets whether the button is selected.
     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
     *
     * @example
     * ```html
     * <button type="button" igxButton="flat" [selected]="button.selected"></button>
     * ```
     */
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            this._renderer.setAttribute(this.nativeElement, 'data-selected', value.toString());
        }
    }
    get selected() {
        return this._selected;
    }
    constructor(element, _displayDensityOptions, _renderer) {
        super(element, _displayDensityOptions);
        this.element = element;
        this._displayDensityOptions = _displayDensityOptions;
        this._renderer = _renderer;
        /**
         * Called when the button is selected.
         */
        this.buttonSelected = new EventEmitter();
        /**
         * @hidden
         * @internal
         */
        this._cssClass = 'igx-button';
        /**
         * @hidden
         * @internal
         */
        this._selected = false;
    }
    ngAfterContentInit() {
        this.nativeElement.addEventListener('click', () => {
            this.buttonSelected.emit({
                button: this
            });
        });
    }
    /**
     * Sets the type of the button.
     *
     * @example
     * ```html
     * <button type="button" igxButton="outlined"></button>
     * ```
     */
    set type(type) {
        const t = type ? type : IgxButtonType.Flat;
        if (this._type !== t) {
            this._type = t;
        }
    }
    /**
     * Sets the button text color.
     *
     * @example
     * ```html
     * <button type="button" igxButton igxButtonColor="orange"></button>
     * ```
     * @deprecated in version 17.1.0.
     */
    set color(value) {
        this._color = value || this.nativeElement.style.color;
        this._renderer.setStyle(this.nativeElement, 'color', this._color);
    }
    /**
     * Sets the background color of the button.
     *
     * @example
     *  ```html
     * <button type="button" igxButton igxButtonBackground="red"></button>
     * ```
     * @deprecated in version 17.1.0.
     */
    set background(value) {
        this._backgroundColor = value || this._backgroundColor;
        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
    }
    /**
     * Sets the `aria-label` attribute.
     *
     * @example
     *  ```html
     * <button type="button" igxButton="flat" igxLabel="Label"></button>
     * ```
     */
    set label(value) {
        this._label = value || this._label;
        this._renderer.setAttribute(this.nativeElement, 'aria-label', this._label);
    }
    /**
     * @hidden
     * @internal
     */
    get flat() {
        return this._type === IgxButtonType.Flat;
    }
    /**
     * @hidden
     * @internal
     */
    get contained() {
        return this._type === IgxButtonType.Contained;
    }
    /**
     * @hidden
     * @internal
     */
    get outlined() {
        return this._type === IgxButtonType.Outlined;
    }
    /**
     * @hidden
     * @internal
     */
    get fab() {
        return this._type === IgxButtonType.FAB;
    }
    /**
     * @hidden
     * @internal
     */
    get componentSize() {
        return this.getComponentSizeStyles();
    }
    /**
     * @hidden
     * @internal
     */
    select() {
        this.selected = true;
    }
    /**
     * @hidden
     * @internal
     */
    deselect() {
        this.selected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxButtonDirective, deps: [{ token: i0.ElementRef }, { token: DisplayDensityToken, optional: true }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxButtonDirective, isStandalone: true, selector: "[igxButton]", inputs: { selected: ["selected", "selected", booleanAttribute], type: ["igxButton", "type"], color: ["igxButtonColor", "color"], background: ["igxButtonBackground", "background"], label: ["igxLabel", "label"] }, outputs: { buttonSelected: "buttonSelected" }, host: { properties: { "class.igx-button": "this._cssClass", "class.igx-button--flat": "this.flat", "class.igx-button--contained": "this.contained", "class.igx-button--outlined": "this.outlined", "class.igx-button--fab": "this.fab", "style.--component-size": "this.componentSize" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxButton]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: i0.Renderer2 }], propDecorators: { buttonSelected: [{
                type: Output
            }], _cssClass: [{
                type: HostBinding,
                args: ['class.igx-button']
            }], selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], type: [{
                type: Input,
                args: ['igxButton']
            }], color: [{
                type: Input,
                args: ['igxButtonColor']
            }], background: [{
                type: Input,
                args: ['igxButtonBackground']
            }], label: [{
                type: Input,
                args: ['igxLabel']
            }], flat: [{
                type: HostBinding,
                args: ['class.igx-button--flat']
            }], contained: [{
                type: HostBinding,
                args: ['class.igx-button--contained']
            }], outlined: [{
                type: HostBinding,
                args: ['class.igx-button--outlined']
            }], fab: [{
                type: HostBinding,
                args: ['class.igx-button--fab']
            }], componentSize: [{
                type: HostBinding,
                args: ['style.--component-size']
            }] } });
//# sourceMappingURL=data:application/json;base64,