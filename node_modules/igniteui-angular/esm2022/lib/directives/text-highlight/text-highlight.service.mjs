import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class IgxTextHighlightService {
    constructor() {
        this.highlightGroupsMap = new Map();
        this.onActiveElementChanged = new EventEmitter();
    }
    /**
     * Activates the highlight at a given index.
     * (if such index exists)
     */
    setActiveHighlight(groupName, highlight) {
        this.highlightGroupsMap.set(groupName, highlight);
        this.onActiveElementChanged.emit(groupName);
    }
    /**
     * Clears any existing highlight.
     */
    clearActiveHighlight(groupName) {
        this.highlightGroupsMap.set(groupName, {
            index: -1
        });
        this.onActiveElementChanged.emit(groupName);
    }
    /**
     * Destroys a highlight group.
     */
    destroyGroup(groupName) {
        this.highlightGroupsMap.delete(groupName);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTextHighlightService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTextHighlightService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTextHighlightService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1oaWdobGlnaHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kaXJlY3RpdmVzL3RleHQtaGlnaGxpZ2h0L3RleHQtaGlnaGxpZ2h0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTXpELE1BQU0sT0FBTyx1QkFBdUI7SUFJaEM7UUFITyx1QkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBZ0MsQ0FBQztRQUM3RCwyQkFBc0IsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0lBRTNDLENBQUM7SUFFakI7OztPQUdHO0lBQ0ksa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxTQUErQjtRQUN4RSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNJLG9CQUFvQixDQUFDLFNBQVM7UUFDakMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUU7WUFDbkMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNaLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs4R0E5QlEsdUJBQXVCO2tIQUF2Qix1QkFBdUIsY0FGdEIsTUFBTTs7MkZBRVAsdUJBQXVCO2tCQUhuQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUFjdGl2ZUhpZ2hsaWdodEluZm8gfSBmcm9tICcuL3RleHQtaGlnaGxpZ2h0LmRpcmVjdGl2ZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIElneFRleHRIaWdobGlnaHRTZXJ2aWNlIHtcbiAgICBwdWJsaWMgaGlnaGxpZ2h0R3JvdXBzTWFwID0gbmV3IE1hcDxzdHJpbmcsIElBY3RpdmVIaWdobGlnaHRJbmZvPigpO1xuICAgIHB1YmxpYyBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSBoaWdobGlnaHQgYXQgYSBnaXZlbiBpbmRleC5cbiAgICAgKiAoaWYgc3VjaCBpbmRleCBleGlzdHMpXG4gICAgICovXG4gICAgcHVibGljIHNldEFjdGl2ZUhpZ2hsaWdodChncm91cE5hbWU6IHN0cmluZywgaGlnaGxpZ2h0OiBJQWN0aXZlSGlnaGxpZ2h0SW5mbykge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodEdyb3Vwc01hcC5zZXQoZ3JvdXBOYW1lLCBoaWdobGlnaHQpO1xuICAgICAgICB0aGlzLm9uQWN0aXZlRWxlbWVudENoYW5nZWQuZW1pdChncm91cE5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbnkgZXhpc3RpbmcgaGlnaGxpZ2h0LlxuICAgICAqL1xuICAgIHB1YmxpYyBjbGVhckFjdGl2ZUhpZ2hsaWdodChncm91cE5hbWUpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRHcm91cHNNYXAuc2V0KGdyb3VwTmFtZSwge1xuICAgICAgICAgICAgaW5kZXg6IC0xXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uQWN0aXZlRWxlbWVudENoYW5nZWQuZW1pdChncm91cE5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIGEgaGlnaGxpZ2h0IGdyb3VwLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0cm95R3JvdXAoZ3JvdXBOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRHcm91cHNNYXAuZGVsZXRlKGdyb3VwTmFtZSk7XG4gICAgfVxufVxuIl19