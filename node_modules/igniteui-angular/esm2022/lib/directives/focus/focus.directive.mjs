import { Directive, Input, Optional, Inject, Self, booleanAttribute } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EDITOR_PROVIDER } from '../../core/edit-provider';
import * as i0 from "@angular/core";
export class IgxFocusDirective {
    /**
     * Returns the state of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let isFocusOn = this.igxFocus.focused;
     * ```
     *
     * @memberof IgxFocusDirective
     */
    get focused() {
        return this.focusState;
    }
    /**
     * Sets the state of the igxFocus.
     * ```html
     * <igx-input-group >
     *  <input #focusContainer igxInput [igxFocus]="true"/>
     * </igx-input-group>
     * ```
     *
     * @memberof IgxFocusDirective
     */
    set focused(val) {
        this.focusState = val;
        this.trigger();
    }
    /**
     * Gets the native element of the igxFocus.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * let igxFocusNativeElement = this.igxFocus.nativeElement;
     * ```
     *
     * @memberof IgxFocusDirective
     */
    get nativeElement() {
        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {
            return this.comp[0].getEditElement();
        }
        if (this.control && this.control[0] && this.control[0].getEditElement) {
            return this.control[0].getEditElement();
        }
        return this.element.nativeElement;
    }
    constructor(element, comp, control) {
        this.element = element;
        this.comp = comp;
        this.control = control;
        this.focusState = true;
    }
    /**
     * Triggers the igxFocus state.
     * ```typescript
     * @ViewChild('focusContainer', {read: IgxFocusDirective})
     * public igxFocus: IgxFocusDirective;
     * this.igxFocus.trigger();
     * ```
     *
     * @memberof IgxFocusDirective
     */
    trigger() {
        if (this.focusState) {
            requestAnimationFrame(() => this.nativeElement.focus({ preventScroll: true }));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFocusDirective, deps: [{ token: i0.ElementRef }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: EDITOR_PROVIDER, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxFocusDirective, isStandalone: true, selector: "[igxFocus]", inputs: { focused: ["igxFocus", "focused", booleanAttribute] }, exportAs: ["igxFocus"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFocusDirective, decorators: [{
            type: Directive,
            args: [{
                    exportAs: 'igxFocus',
                    selector: '[igxFocus]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NG_VALUE_ACCESSOR]
                }, {
                    type: Self
                }, {
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [EDITOR_PROVIDER]
                }, {
                    type: Self
                }, {
                    type: Optional
                }] }], propDecorators: { focused: [{
                type: Input,
                args: [{ alias: 'igxFocus', transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZm9jdXMvZm9jdXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBa0IsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7O0FBTzNFLE1BQU0sT0FBTyxpQkFBaUI7SUFJMUI7Ozs7Ozs7OztPQVNHO0lBQ0gsSUFDVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSCxJQUFXLE9BQU8sQ0FBQyxHQUFZO1FBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsSUFBVyxhQUFhO1FBQ3BCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFO1lBQzFELE9BQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQW9CLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDNUQ7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRTtZQUNuRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDM0M7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxZQUNZLE9BQW1CLEVBQzRCLElBQVksRUFDZCxPQUFlO1FBRjVELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDNEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNkLFlBQU8sR0FBUCxPQUFPLENBQVE7UUF6RGhFLGVBQVUsR0FBRyxJQUFJLENBQUM7SUEwRHRCLENBQUM7SUFFTDs7Ozs7Ozs7O09BU0c7SUFDSSxPQUFPO1FBQ1YsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsRjtJQUNMLENBQUM7OEdBNUVRLGlCQUFpQiw0Q0EwRGQsaUJBQWlCLHlDQUNqQixlQUFlO2tHQTNEbEIsaUJBQWlCLHlGQWNhLGdCQUFnQjs7MkZBZDlDLGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7MEJBMkRRLE1BQU07MkJBQUMsaUJBQWlCOzswQkFBRyxJQUFJOzswQkFBSSxRQUFROzswQkFDM0MsTUFBTTsyQkFBQyxlQUFlOzswQkFBRyxJQUFJOzswQkFBSSxRQUFRO3lDQTVDbkMsT0FBTztzQkFEakIsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT3B0aW9uYWwsIEluamVjdCwgU2VsZiwgYm9vbGVhbkF0dHJpYnV0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFZGl0b3JQcm92aWRlciwgRURJVE9SX1BST1ZJREVSIH0gZnJvbSAnLi4vLi4vY29yZS9lZGl0LXByb3ZpZGVyJztcblxuQERpcmVjdGl2ZSh7XG4gICAgZXhwb3J0QXM6ICdpZ3hGb2N1cycsXG4gICAgc2VsZWN0b3I6ICdbaWd4Rm9jdXNdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEZvY3VzRGlyZWN0aXZlIHtcblxuICAgIHByaXZhdGUgZm9jdXNTdGF0ZSA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgaWd4Rm9jdXMuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBWaWV3Q2hpbGQoJ2ZvY3VzQ29udGFpbmVyJywge3JlYWQ6IElneEZvY3VzRGlyZWN0aXZlfSlcbiAgICAgKiBwdWJsaWMgaWd4Rm9jdXM6IElneEZvY3VzRGlyZWN0aXZlO1xuICAgICAqIGxldCBpc0ZvY3VzT24gPSB0aGlzLmlneEZvY3VzLmZvY3VzZWQ7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBASW5wdXQoeyBhbGlhczogJ2lneEZvY3VzJywgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG4gICAgcHVibGljIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mb2N1c1N0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBpZ3hGb2N1cy5cbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1pbnB1dC1ncm91cCA+XG4gICAgICogIDxpbnB1dCAjZm9jdXNDb250YWluZXIgaWd4SW5wdXQgW2lneEZvY3VzXT1cInRydWVcIi8+XG4gICAgICogPC9pZ3gtaW5wdXQtZ3JvdXA+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGZvY3VzZWQodmFsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZm9jdXNTdGF0ZSA9IHZhbDtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGVsZW1lbnQgb2YgdGhlIGlneEZvY3VzLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBAVmlld0NoaWxkKCdmb2N1c0NvbnRhaW5lcicsIHtyZWFkOiBJZ3hGb2N1c0RpcmVjdGl2ZX0pXG4gICAgICogcHVibGljIGlneEZvY3VzOiBJZ3hGb2N1c0RpcmVjdGl2ZTtcbiAgICAgKiBsZXQgaWd4Rm9jdXNOYXRpdmVFbGVtZW50ID0gdGhpcy5pZ3hGb2N1cy5uYXRpdmVFbGVtZW50O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIElneEZvY3VzRGlyZWN0aXZlXG4gICAgICovXG4gICAgcHVibGljIGdldCBuYXRpdmVFbGVtZW50KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wICYmIHRoaXMuY29tcFswXSAmJiB0aGlzLmNvbXBbMF0uZ2V0RWRpdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5jb21wWzBdIGFzIEVkaXRvclByb3ZpZGVyKS5nZXRFZGl0RWxlbWVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29udHJvbCAmJiB0aGlzLmNvbnRyb2xbMF0gJiYgdGhpcy5jb250cm9sWzBdLmdldEVkaXRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sWzBdLmdldEVkaXRFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgQEluamVjdChOR19WQUxVRV9BQ0NFU1NPUikgQFNlbGYoKSBAT3B0aW9uYWwoKSBwcml2YXRlIGNvbXA/OiBhbnlbXSxcbiAgICAgICAgQEluamVjdChFRElUT1JfUFJPVklERVIpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sPzogYW55W10sXG4gICAgKSB7IH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHRoZSBpZ3hGb2N1cyBzdGF0ZS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQFZpZXdDaGlsZCgnZm9jdXNDb250YWluZXInLCB7cmVhZDogSWd4Rm9jdXNEaXJlY3RpdmV9KVxuICAgICAqIHB1YmxpYyBpZ3hGb2N1czogSWd4Rm9jdXNEaXJlY3RpdmU7XG4gICAgICogdGhpcy5pZ3hGb2N1cy50cmlnZ2VyKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgSWd4Rm9jdXNEaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwdWJsaWMgdHJpZ2dlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNTdGF0ZSkge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMubmF0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19