import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { Directive, Input, ViewChildren, booleanAttribute } from '@angular/core';
import { IgxRowDirective } from '../../grids/row.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../icon/icon.service";
export class IgxGridActionsBaseDirective {
    /**
     * @hidden
     * @internal
     */
    get grid() {
        return this.strip.context.grid;
    }
    /**
     * Getter to be used in template
     *
     * @hidden
     * @internal
     */
    get isRowContext() {
        return this.isRow(this.strip.context) && !this.strip.context.inEditMode;
    }
    constructor(iconService, differs) {
        this.iconService = iconService;
        this.differs = differs;
        /**
         * Gets/Sets if the action buttons will be rendered as menu items. When in menu, items will be rendered with text label.
         *
         * @example
         * ```html
         *  <igx-grid-pinning-actions [asMenuItems]='true'></igx-grid-pinning-actions>
         *  <igx-grid-editing-actions [asMenuItems]='true'></igx-grid-editing-actions>
         * ```
         */
        this.asMenuItems = false;
    }
    /**
     * @hidden
     * @internal
     */
    ngAfterViewInit() {
        if (this.asMenuItems) {
            this.buttons.changes.subscribe(() => {
                this.strip.cdr.detectChanges();
            });
        }
    }
    /**
     * Check if the param is a row from a grid
     *
     * @hidden
     * @internal
     * @param context
     */
    isRow(context) {
        return context && context instanceof IgxRowDirective;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridActionsBaseDirective, deps: [{ token: i1.IgxIconService }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxGridActionsBaseDirective, isStandalone: true, selector: "[igxGridActionsBase]", inputs: { asMenuItems: ["asMenuItems", "asMenuItems", booleanAttribute] }, viewQueries: [{ propertyName: "buttons", predicate: IgxGridActionButtonComponent, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridActionsBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxGridActionsBase]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.IgxIconService }, { type: i0.IterableDiffers }], propDecorators: { buttons: [{
                type: ViewChildren,
                args: [IgxGridActionButtonComponent]
            }], asMenuItems: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2FjdGlvbi1zdHJpcC9ncmlkLWFjdGlvbnMvZ3JpZC1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixZQUFZLEVBQW1CLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBTzVELE1BQU0sT0FBTywyQkFBMkI7SUFvQnBDOzs7T0FHRztJQUNILElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQVcsWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUM1RSxDQUFDO0lBRUQsWUFBc0IsV0FBMkIsRUFDbkMsT0FBd0I7UUFEaEIsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQ25DLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBbEN0Qzs7Ozs7Ozs7V0FRRztRQUVJLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBd0JlLENBQUM7SUFFM0M7OztPQUdHO0lBQ0ksZUFBZTtRQUNsQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDTyxLQUFLLENBQUMsT0FBTztRQUNuQixPQUFPLE9BQU8sSUFBSSxPQUFPLFlBQVksZUFBZSxDQUFDO0lBQ3pELENBQUM7OEdBOURRLDJCQUEyQjtrR0FBM0IsMkJBQTJCLDhHQWNoQixnQkFBZ0IseURBWnRCLDRCQUE0Qjs7MkZBRmpDLDJCQUEyQjtrQkFKdkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7aUhBSVUsT0FBTztzQkFEYixZQUFZO3VCQUFDLDRCQUE0QjtnQkFhbkMsV0FBVztzQkFEakIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElneEdyaWRBY3Rpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2dyaWQtYWN0aW9uLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW4sIEl0ZXJhYmxlRGlmZmVycywgYm9vbGVhbkF0dHJpYnV0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4QWN0aW9uU3RyaXBDb21wb25lbnQgfSBmcm9tICcuLi9hY3Rpb24tc3RyaXAuY29tcG9uZW50JztcbmltcG9ydCB7IElneFJvd0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2dyaWRzL3Jvdy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4SWNvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9pY29uL2ljb24uc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRBY3Rpb25zQmFzZV0nLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZEFjdGlvbnNCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICoqL1xuICAgIEBWaWV3Q2hpbGRyZW4oSWd4R3JpZEFjdGlvbkJ1dHRvbkNvbXBvbmVudClcbiAgICBwdWJsaWMgYnV0dG9uczogUXVlcnlMaXN0PElneEdyaWRBY3Rpb25CdXR0b25Db21wb25lbnQ+O1xuXG4gICAgLyoqXG4gICAgICogR2V0cy9TZXRzIGlmIHRoZSBhY3Rpb24gYnV0dG9ucyB3aWxsIGJlIHJlbmRlcmVkIGFzIG1lbnUgaXRlbXMuIFdoZW4gaW4gbWVudSwgaXRlbXMgd2lsbCBiZSByZW5kZXJlZCB3aXRoIHRleHQgbGFiZWwuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiAgPGlneC1ncmlkLXBpbm5pbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLXBpbm5pbmctYWN0aW9ucz5cbiAgICAgKiAgPGlneC1ncmlkLWVkaXRpbmctYWN0aW9ucyBbYXNNZW51SXRlbXNdPSd0cnVlJz48L2lneC1ncmlkLWVkaXRpbmctYWN0aW9ucz5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcbiAgICBwdWJsaWMgYXNNZW51SXRlbXMgPSBmYWxzZTtcblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqKi9cbiAgICBwdWJsaWMgc3RyaXA6IElneEFjdGlvblN0cmlwQ29tcG9uZW50O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXAuY29udGV4dC5ncmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHRlciB0byBiZSB1c2VkIGluIHRlbXBsYXRlXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc1Jvd0NvbnRleHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUm93KHRoaXMuc3RyaXAuY29udGV4dCkgJiYgIXRoaXMuc3RyaXAuY29udGV4dC5pbkVkaXRNb2RlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpY29uU2VydmljZTogSWd4SWNvblNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMpIHsgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmFzTWVudUl0ZW1zKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyaXAuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIHBhcmFtIGlzIGEgcm93IGZyb20gYSBncmlkXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIGNvbnRleHRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaXNSb3coY29udGV4dCk6IGNvbnRleHQgaXMgSWd4Um93RGlyZWN0aXZlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgJiYgY29udGV4dCBpbnN0YW5jZW9mIElneFJvd0RpcmVjdGl2ZTtcbiAgICB9XG59XG4iXX0=