import { Component, HostBinding } from '@angular/core';
import { IgxGridActionsBaseDirective } from './grid-actions-base.directive';
import { pinLeft, unpinLeft, jumpDown, jumpUp } from '@igniteui/material-icons-extended';
import { IgxGridActionButtonComponent } from './grid-action-button.component';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxGridPinningActionsComponent extends IgxGridActionsBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Host `class.igx-action-strip` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-action-strip__pinning-actions';
        this.iconsRendered = false;
    }
    /**
     * Getter to know if the row is pinned
     *
     * @hidden
     * @internal
     */
    get pinned() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        if (context && !this.iconsRendered) {
            this.registerSVGIcons();
            this.iconsRendered = true;
        }
        return context && context.pinned;
    }
    /**
     * Getter to know if the row is in pinned and ghost
     *
     * @hidden
     * @internal
     */
    get inPinnedArea() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        return this.pinned && !context.disabled;
    }
    /**
     * Getter to know if the row pinning is set to top or bottom
     *
     * @hidden
     * @internal
     */
    get pinnedTop() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        return this.strip.context.grid.isRowPinningToTop;
    }
    /**
     * Pin the row according to the context.
     *
     * @example
     * ```typescript
     * this.gridPinningActions.pin();
     * ```
     */
    pin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.pinRow(row.key, grid.pinnedRecords.length);
        this.strip.hide();
    }
    /**
     * Unpin the row according to the context.
     *
     * @example
     * ```typescript
     * this.gridPinningActions.unpin();
     * ```
     */
    unpin(event) {
        if (event) {
            event.stopPropagation();
        }
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const row = this.strip.context;
        const grid = row.grid;
        grid.unpinRow(row.key);
        this.strip.hide();
    }
    scrollToRow(event) {
        if (event) {
            event.stopPropagation();
        }
        const context = this.strip.context;
        const grid = context.grid;
        grid.scrollTo(context.data, 0);
        this.strip.hide();
    }
    registerSVGIcons() {
        if (!this.isRow(this.strip.context)) {
            return;
        }
        const context = this.strip.context;
        const grid = context.grid;
        if (grid) {
            this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons', true);
            this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons', true);
            this.iconService.addSvgIconFromText(jumpDown.name, jumpDown.value, 'imx-icons', true);
            this.iconService.addSvgIconFromText(jumpUp.name, jumpDown.value, 'imx-icons', true);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridPinningActionsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.2.4", type: IgxGridPinningActionsComponent, isStandalone: true, selector: "igx-grid-pinning-actions", host: { properties: { "class.igx-action-strip__pinning-actions": "this.cssClass" } }, providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"isRowContext\">\n    <igx-grid-action-button *ngIf=\"inPinnedArea && pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-down\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpDown_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"inPinnedArea && !pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-up\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpUp_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"!pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"pin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_pin_label\" (actionClick)=\"pin($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"unpin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_unpin_label\" (actionClick)=\"unpin($event)\"></igx-grid-action-button>\n</ng-container>", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxGridActionButtonComponent, selector: "igx-grid-action-button", inputs: ["asMenuItem", "iconName", "classNames", "iconSet", "labelText"], outputs: ["actionClick"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridPinningActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-pinning-actions', providers: [{ provide: IgxGridActionsBaseDirective, useExisting: IgxGridPinningActionsComponent }], standalone: true, imports: [NgIf, IgxGridActionButtonComponent], template: "<ng-container *ngIf=\"isRowContext\">\n    <igx-grid-action-button *ngIf=\"inPinnedArea && pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-down\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpDown_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"inPinnedArea && !pinnedTop\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"jump-up\" [labelText]=\"grid.resourceStrings.igx_grid_actions_jumpUp_label\" (actionClick)=\"scrollToRow($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"!pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"pin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_pin_label\" (actionClick)=\"pin($event)\"></igx-grid-action-button>\n    <igx-grid-action-button *ngIf=\"pinned\" [asMenuItem]=\"asMenuItems\" iconSet=\"imx-icons\" iconName=\"unpin-left\" [labelText]=\"grid.resourceStrings.igx_grid_actions_unpin_label\" (actionClick)=\"unpin($event)\"></igx-grid-action-button>\n</ng-container>" }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-action-strip__pinning-actions']
            }] } });
//# sourceMappingURL=data:application/json;base64,