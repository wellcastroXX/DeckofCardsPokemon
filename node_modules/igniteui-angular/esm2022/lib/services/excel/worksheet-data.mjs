import { ExportHeaderType, ExportRecordType } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetDataDictionary } from './worksheet-data-dictionary';
/** @hidden */
export class WorksheetData {
    constructor(_data, options, sort, columnCount, rootKeys, indexOfLastPinnedColumn, columnWidths, owner, owners) {
        this._data = _data;
        this.options = options;
        this.sort = sort;
        this.columnCount = columnCount;
        this.rootKeys = rootKeys;
        this.indexOfLastPinnedColumn = indexOfLastPinnedColumn;
        this.columnWidths = columnWidths;
        this.owner = owner;
        this.owners = owners;
        this.initializeData();
    }
    get data() {
        return this._data;
    }
    get rowCount() {
        return this._rowCount;
    }
    get isEmpty() {
        return !this.rowCount
            || this.rowCount === this.owner.maxLevel + 1
            || !this.columnCount
            || this.owner.columns.every(c => c.skip);
    }
    get isSpecialData() {
        return this._isSpecialData;
    }
    get dataDictionary() {
        return this._dataDictionary;
    }
    get hasMultiColumnHeader() {
        return this._hasMultiColumnHeader;
    }
    get hasSummaries() {
        return this._hasSummaries;
    }
    get hasMultiRowHeader() {
        return this._hasMultiRowHeader;
    }
    get isHierarchical() {
        return this._isHierarchical;
    }
    get isTreeGrid() {
        return this._isTreeGrid;
    }
    get isPivotGrid() {
        return this._isPivotGrid;
    }
    get isGroupedGrid() {
        return this._data.some(d => d.type === ExportRecordType.GroupedRecord);
    }
    get maxLevel() {
        return [...new Set(this._data.map(item => item.level))].sort((a, b) => (a > b ? -1 : 1))[0];
    }
    get multiColumnHeaderRows() {
        return !this.options.ignoreMultiColumnHeaders ? Array.from(this.owners.values()).map(c => c.maxLevel).reduce((a, b) => a + b) : 0;
    }
    initializeData() {
        this._dataDictionary = new WorksheetDataDictionary(this.columnCount, this.options.columnWidth, this.columnWidths);
        this._hasMultiColumnHeader = Array.from(this.owners.values())
            .some(o => o.columns.some(col => !col.skip && col.headerType === ExportHeaderType.MultiColumnHeader));
        this._hasMultiRowHeader = Array.from(this.owners.values())
            .some(o => o.columns.some(col => !col.skip && col.headerType === ExportHeaderType.MultiRowHeader));
        this._isHierarchical = this.data[0]?.type === ExportRecordType.HierarchicalGridRecord
            || !(typeof (Array.from(this.owners.keys())[0]) === 'string');
        this._hasSummaries = this._data.filter(d => d.type === ExportRecordType.SummaryRecord).length > 0;
        this._isTreeGrid = this._data.filter(d => d.type === ExportRecordType.TreeGridRecord).length > 0;
        this._isPivotGrid = this.data[0]?.type === ExportRecordType.PivotGridRecord;
        const exportMultiColumnHeaders = this._hasMultiColumnHeader && !this.options.ignoreMultiColumnHeaders;
        if (this._isHierarchical || exportMultiColumnHeaders || this._isPivotGrid) {
            this.options.exportAsTable = false;
        }
        if (!this._data || this._data.length === 0) {
            if (!this._isHierarchical) {
                this._rowCount = this.owner.maxLevel + 1;
            }
            return;
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data[0].data);
        this._rowCount = this._data.length + this.multiColumnHeaderRows + 1;
    }
}
//# sourceMappingURL=data:application/json;base64,