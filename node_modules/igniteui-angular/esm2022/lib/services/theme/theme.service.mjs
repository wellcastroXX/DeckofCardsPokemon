import { Inject, Injectable, Input } from '@angular/core';
import { mkenum } from '../../core/utils';
import { Subject } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
const Theme = /*@__PURE__*/ mkenum({
    Material: 'material',
    Fluent: 'fluent',
    Bootstrap: 'bootstrap',
    IndigoDesign: 'indigo-design'
});
export class ThemeService {
    /**
     * Sets the theme of the component.
     * Allowed values of type IgxTheme.
     */
    set theme(value) {
        this._theme = value;
    }
    /**
     * Returns the theme of the component.
     * The returned value is of type IgxTheme.
     */
    get theme() {
        return this._theme;
    }
    constructor(document) {
        this.document = document;
        this._theme$ = new Subject();
        this._subscription = this._theme$.asObservable().subscribe(value => {
            this._theme = value;
        });
    }
    getCssProp(element) {
        if (!this._theme) {
            const cssProp = this.document.defaultView
                .getComputedStyle(element.nativeElement)
                .getPropertyValue('--theme')
                .trim();
            if (cssProp !== '') {
                Promise.resolve().then(() => {
                    this._theme$.next(cssProp);
                });
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ThemeService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }], propDecorators: { theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy90aGVtZS90aGVtZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUUzQyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUEsTUFBTSxDQUFDO0lBQ2hDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLFlBQVksRUFBRSxlQUFlO0NBQzlCLENBQUMsQ0FBQztBQVVILE1BQU0sT0FBTyxZQUFZO0lBS3ZCOzs7T0FHRztJQUNILElBQ1csS0FBSyxDQUFDLEtBQWU7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFFVSxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQXRCZixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQXdCOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQWlCLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sVUFBVSxDQUFDLE9BQW1CO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVztpQkFDcEMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztpQkFDdkMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO2lCQUMzQixJQUFJLEVBQUUsQ0FBQztZQUVaLElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMvQixDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0Y7SUFDSCxDQUFDOzhHQTVDVSxZQUFZLGtCQXVCYixRQUFRO2tIQXZCUCxZQUFZLGNBRlgsTUFBTTs7MkZBRVAsWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQXdCSSxNQUFNOzJCQUFDLFFBQVE7eUNBYlAsS0FBSztzQkFEZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWtlbnVtIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuY29uc3QgVGhlbWUgPSAvKkBfX1BVUkVfXyovbWtlbnVtKHtcbiAgTWF0ZXJpYWw6ICdtYXRlcmlhbCcsXG4gIEZsdWVudDogJ2ZsdWVudCcsXG4gIEJvb3RzdHJhcDogJ2Jvb3RzdHJhcCcsXG4gIEluZGlnb0Rlc2lnbjogJ2luZGlnby1kZXNpZ24nXG59KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBjb21wb25lbnQgdGhlbWUuXG4gKi9cbmV4cG9ydCB0eXBlIElneFRoZW1lID0gKHR5cGVvZiBUaGVtZSlba2V5b2YgdHlwZW9mIFRoZW1lXTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGhlbWVTZXJ2aWNlIHtcbiAgcHVibGljIF90aGVtZTogSWd4VGhlbWU7XG4gIHByaXZhdGUgX3RoZW1lJCA9IG5ldyBTdWJqZWN0KCk7XG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBBbGxvd2VkIHZhbHVlcyBvZiB0eXBlIElneFRoZW1lLlxuICAgKi9cbiAgQElucHV0KClcbiAgcHVibGljIHNldCB0aGVtZSh2YWx1ZTogSWd4VGhlbWUpIHtcbiAgICB0aGlzLl90aGVtZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRoZW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBvZiB0eXBlIElneFRoZW1lLlxuICAgKi9cbiAgcHVibGljIGdldCB0aGVtZSgpOiBJZ3hUaGVtZSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW1lO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVClcbiAgICBwcml2YXRlIGRvY3VtZW50OiBhbnlcbiAgKSB7IFxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHRoaXMuX3RoZW1lJC5hc09ic2VydmFibGUoKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgdGhpcy5fdGhlbWUgPSB2YWx1ZSBhcyBJZ3hUaGVtZTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDc3NQcm9wKGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICBpZiAoIXRoaXMuX3RoZW1lKSB7XG4gICAgICBjb25zdCBjc3NQcm9wID0gdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgICAgIC5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQubmF0aXZlRWxlbWVudClcbiAgICAgICAgICAuZ2V0UHJvcGVydHlWYWx1ZSgnLS10aGVtZScpXG4gICAgICAgICAgLnRyaW0oKTtcblxuICAgICAgaWYgKGNzc1Byb3AgIT09ICcnKSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuX3RoZW1lJC5uZXh0KGNzc1Byb3ApO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19