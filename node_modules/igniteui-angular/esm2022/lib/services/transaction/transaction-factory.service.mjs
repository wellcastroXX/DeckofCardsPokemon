import { Injectable } from '@angular/core';
import { IgxBaseTransactionService } from './base-transaction';
import { IgxHierarchicalTransactionService } from './igx-hierarchical-transaction';
import { IgxTransactionService } from './igx-transaction';
import * as i0 from "@angular/core";
/**
 * Factory service for instantiating TransactionServices
 */
export class IgxFlatTransactionFactory {
    /**
     * Creates a new Transaction service instance depending on the specified type.
     *
     * @param type The type of the transaction
     * @returns a new instance of TransactionService<Transaction, State>
     */
    create(type) {
        switch (type) {
            case ("Base" /* TRANSACTION_TYPE.Base */):
                return new IgxTransactionService();
            default:
                return new IgxBaseTransactionService();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFlatTransactionFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFlatTransactionFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFlatTransactionFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
/**
 * Factory service for instantiating HierarchicalTransactionServices
 */
export class IgxHierarchicalTransactionFactory extends IgxFlatTransactionFactory {
    /**
     * Creates a new HierarchialTransaction service instance depending on the specified type.
     *
     * @param type The type of the transaction
     * @returns a new instance of HierarchialTransaction<HierarchialTransaction, HierarchialState>
     */
    create(type) {
        switch (type) {
            case ("Base" /* TRANSACTION_TYPE.Base */):
                return new IgxHierarchicalTransactionService();
            default:
                return new IgxBaseTransactionService();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxHierarchicalTransactionFactory, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxHierarchicalTransactionFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxHierarchicalTransactionFactory, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3NlcnZpY2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uLWZhY3Rvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDOztBQWMxRDs7R0FFRztBQUlILE1BQU0sT0FBTyx5QkFBeUI7SUFFbEM7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsSUFBc0I7UUFDaEMsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLG9DQUF1QjtnQkFDeEIsT0FBTyxJQUFJLHFCQUFxQixFQUFFLENBQUM7WUFDdkM7Z0JBQ0ksT0FBTyxJQUFJLHlCQUF5QixFQUFFLENBQUM7U0FDOUM7SUFDTCxDQUFDOzhHQWZRLHlCQUF5QjtrSEFBekIseUJBQXlCLGNBRnRCLE1BQU07OzJGQUVULHlCQUF5QjtrQkFIckMsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7O0FBbUJEOztHQUVHO0FBSUgsTUFBTSxPQUFPLGlDQUFrQyxTQUFRLHlCQUF5QjtJQUU1RTs7Ozs7T0FLRztJQUNhLE1BQU0sQ0FBQyxJQUFzQjtRQUN6QyxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssb0NBQXVCO2dCQUN4QixPQUFPLElBQUksaUNBQWlDLEVBQUUsQ0FBQztZQUNuRDtnQkFDSSxPQUFPLElBQUkseUJBQXlCLEVBQUUsQ0FBQztTQUM5QztJQUNMLENBQUM7OEdBZlEsaUNBQWlDO2tIQUFqQyxpQ0FBaUMsY0FGOUIsTUFBTTs7MkZBRVQsaUNBQWlDO2tCQUg3QyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEJhc2VUcmFuc2FjdGlvblNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgSGllcmFyY2hpY2FsVHJhbnNhY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9oaWVyYXJjaGljYWwtdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsVHJhbnNhY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9pZ3gtaGllcmFyY2hpY2FsLXRyYW5zYWN0aW9uJztcbmltcG9ydCB7IElneFRyYW5zYWN0aW9uU2VydmljZSB9IGZyb20gJy4vaWd4LXRyYW5zYWN0aW9uJztcbmltcG9ydCB7IEhpZXJhcmNoaWNhbFN0YXRlLCBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiwgU3RhdGUsIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvblNlcnZpY2UgfSBmcm9tICcuL3RyYW5zYWN0aW9uJztcblxuLyoqXG4gKiBUaGUgdHlwZSBvZiB0aGUgdHJhbnNhY3Rpb24gdGhhdCBzaG91bGQgYmUgcHJvdmlkZWQuXG4gKiBXaGVuIGJhdGNoRWRpdGluZyBpcyBkaXNhYmxlZCwgYE5vbmVgIGlzIHByb3ZpZGVkLlxuICogV2hlbiBlbmFibGVkIC0gYEJhc2VgIGlzIHByb3ZpZGVkLlxuICogQW4gZW51bSBpbnN0ZWFkIG9mIGEgYm9vbGVhbiB2YWx1ZSBsZWF2ZXMgcm9vbSBmb3IgZXh0cmEgc2NlbmFyaW9zIGluIHRoZSBmdXR1cmUuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIFRSQU5TQUNUSU9OX1RZUEUge1xuICAgICdOb25lJyA9ICdOb25lJyxcbiAgICAnQmFzZScgPSAnQmFzZSdcbn1cblxuLyoqXG4gKiBGYWN0b3J5IHNlcnZpY2UgZm9yIGluc3RhbnRpYXRpbmcgVHJhbnNhY3Rpb25TZXJ2aWNlc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIElneEZsYXRUcmFuc2FjdGlvbkZhY3Rvcnkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUcmFuc2FjdGlvbiBzZXJ2aWNlIGluc3RhbmNlIGRlcGVuZGluZyBvbiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgdHJhbnNhY3Rpb25cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBUcmFuc2FjdGlvblNlcnZpY2U8VHJhbnNhY3Rpb24sIFN0YXRlPlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGUodHlwZTogVFJBTlNBQ1RJT05fVFlQRSk6IFRyYW5zYWN0aW9uU2VydmljZTxUcmFuc2FjdGlvbiwgU3RhdGU+IHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIChUUkFOU0FDVElPTl9UWVBFLkJhc2UpOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSWd4VHJhbnNhY3Rpb25TZXJ2aWNlKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSWd4QmFzZVRyYW5zYWN0aW9uU2VydmljZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEZhY3Rvcnkgc2VydmljZSBmb3IgaW5zdGFudGlhdGluZyBIaWVyYXJjaGljYWxUcmFuc2FjdGlvblNlcnZpY2VzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4SGllcmFyY2hpY2FsVHJhbnNhY3Rpb25GYWN0b3J5IGV4dGVuZHMgSWd4RmxhdFRyYW5zYWN0aW9uRmFjdG9yeSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEhpZXJhcmNoaWFsVHJhbnNhY3Rpb24gc2VydmljZSBpbnN0YW5jZSBkZXBlbmRpbmcgb24gdGhlIHNwZWNpZmllZCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogQHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgSGllcmFyY2hpYWxUcmFuc2FjdGlvbjxIaWVyYXJjaGlhbFRyYW5zYWN0aW9uLCBIaWVyYXJjaGlhbFN0YXRlPlxuICAgICAqL1xuICAgIHB1YmxpYyBvdmVycmlkZSBjcmVhdGUodHlwZTogVFJBTlNBQ1RJT05fVFlQRSk6IEhpZXJhcmNoaWNhbFRyYW5zYWN0aW9uU2VydmljZTxIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiwgSGllcmFyY2hpY2FsU3RhdGU+IHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIChUUkFOU0FDVElPTl9UWVBFLkJhc2UpOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSWd4SGllcmFyY2hpY2FsVHJhbnNhY3Rpb25TZXJ2aWNlKCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSWd4QmFzZVRyYW5zYWN0aW9uU2VydmljZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19