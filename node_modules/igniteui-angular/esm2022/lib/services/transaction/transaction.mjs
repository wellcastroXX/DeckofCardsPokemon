export var TransactionType;
(function (TransactionType) {
    TransactionType["ADD"] = "add";
    TransactionType["DELETE"] = "delete";
    TransactionType["UPDATE"] = "update";
})(TransactionType || (TransactionType = {}));
export var TransactionEventOrigin;
(function (TransactionEventOrigin) {
    TransactionEventOrigin["UNDO"] = "undo";
    TransactionEventOrigin["REDO"] = "redo";
    TransactionEventOrigin["CLEAR"] = "clear";
    TransactionEventOrigin["ADD"] = "add";
    TransactionEventOrigin["END"] = "endPending";
})(TransactionEventOrigin || (TransactionEventOrigin = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvdHJhbnNhY3Rpb24vdHJhbnNhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFOLElBQVksZUFJWDtBQUpELFdBQVksZUFBZTtJQUN2Qiw4QkFBVyxDQUFBO0lBQ1gsb0NBQWlCLENBQUE7SUFDakIsb0NBQWlCLENBQUE7QUFDckIsQ0FBQyxFQUpXLGVBQWUsS0FBZixlQUFlLFFBSTFCO0FBRUQsTUFBTSxDQUFOLElBQVksc0JBTVg7QUFORCxXQUFZLHNCQUFzQjtJQUM5Qix1Q0FBYSxDQUFBO0lBQ2IsdUNBQWEsQ0FBQTtJQUNiLHlDQUFlLENBQUE7SUFDZixxQ0FBVyxDQUFBO0lBQ1gsNENBQWtCLENBQUE7QUFDdEIsQ0FBQyxFQU5XLHNCQUFzQixLQUF0QixzQkFBc0IsUUFNakMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElEYXRhQ2xvbmVTdHJhdGVneSB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9kYXRhLWNsb25lLXN0cmF0ZWd5JztcblxuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25UeXBlIHtcbiAgICBBREQgPSAnYWRkJyxcbiAgICBERUxFVEUgPSAnZGVsZXRlJyxcbiAgICBVUERBVEUgPSAndXBkYXRlJ1xufVxuXG5leHBvcnQgZW51bSBUcmFuc2FjdGlvbkV2ZW50T3JpZ2luIHtcbiAgICBVTkRPID0gJ3VuZG8nLFxuICAgIFJFRE8gPSAncmVkbycsXG4gICAgQ0xFQVIgPSAnY2xlYXInLFxuICAgIEFERCA9ICdhZGQnLFxuICAgIEVORCA9ICdlbmRQZW5kaW5nJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uIHtcbiAgICBpZDogYW55O1xuICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZTtcbiAgICBuZXdWYWx1ZTogYW55O1xufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiBleHRlbmRzIFRyYW5zYWN0aW9uIHtcbiAgICBwYXRoPzogYW55W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuICAgIHZhbHVlOiBhbnk7XG4gICAgcmVjb3JkUmVmOiBhbnk7XG4gICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbjxUIGV4dGVuZHMgVHJhbnNhY3Rpb24+IHtcbiAgICB0cmFuc2FjdGlvbjogVDtcbiAgICByZWNvcmRSZWY6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZVVwZGF0ZUV2ZW50IHtcbiAgICBvcmlnaW46IFRyYW5zYWN0aW9uRXZlbnRPcmlnaW47XG4gICAgYWN0aW9uczogQWN0aW9uPFRyYW5zYWN0aW9uPltdO1xufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaWVyYXJjaGljYWxTdGF0ZSBleHRlbmRzIFN0YXRlIHtcbiAgICBwYXRoOiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvblNlcnZpY2U8VCBleHRlbmRzIFRyYW5zYWN0aW9uLCBTIGV4dGVuZHMgU3RhdGU+IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdHJhbnNhY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBzZXJ2aWNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldHMvU2V0cyB0aGUgZGF0YSBjbG9uZSBzdHJhdGVneSB1c2VkIHRvIGNsb25lIGRhdGFcbiAgICAgKi9cbiAgICBjbG9uZVN0cmF0ZWd5OiBJRGF0YUNsb25lU3RyYXRlZ3k7XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIHRyYW5zYWN0aW9uIHN0YXRlIGhhcyBjaGFuZ2VkIC0gYWRkIHRyYW5zYWN0aW9uLCBjb21taXQgYWxsIHRyYW5zYWN0aW9ucywgdW5kbyBhbmQgcmVkb1xuICAgICAqL1xuICAgIG9uU3RhdGVVcGRhdGU/OiBFdmVudEVtaXR0ZXI8U3RhdGVVcGRhdGVFdmVudD47XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBpZiB0aGVyZSBhcmUgYW55IHRyYW5zYWN0aW9ucyBpbiB0aGUgVW5kbyBzdGFja1xuICAgICAqL1xuICAgIGNhblVuZG86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBpZiB0aGVyZSBhcmUgYW55IHRyYW5zYWN0aW9ucyBpbiB0aGUgUmVkbyBzdGFja1xuICAgICAqL1xuICAgIGNhblJlZG86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHByb3ZpZGVkICB0cmFuc2FjdGlvbiB3aXRoIHJlY29yZFJlZiBpZiBhbnlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUcmFuc2FjdGlvbiB0byBiZSBhZGRlZFxuICAgICAqIEBwYXJhbSByZWNvcmRSZWYgUmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvZiB0aGUgcmVjb3JkIGluIHRoZSBkYXRhIHNvdXJjZSByZWxhdGVkIHRvIHRoZSBjaGFuZ2VkIGl0ZW1cbiAgICAgKi9cbiAgICBhZGQodHJhbnNhY3Rpb246IFQsIHJlY29yZFJlZj86IGFueSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCByZWNvcmRlZCB0cmFuc2FjdGlvbnMgaW4gY2hyb25vbG9naWNhbCBvcmRlclxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIE9wdGlvbmFsIHJlY29yZCBpZCB0byBnZXQgdHJhbnNhY3Rpb25zIGZvclxuICAgICAqIEByZXR1cm5zIEFsbCB0cmFuc2FjdGlvbiBpbiB0aGUgc2VydmljZSBvciBmb3IgdGhlIHNwZWNpZmllZCByZWNvcmRcbiAgICAgKi9cbiAgICBnZXRUcmFuc2FjdGlvbkxvZyhpZD86IGFueSk6IFRbXTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbGFzdCB0cmFuc2FjdGlvbiBpZiBhbnlcbiAgICAgKi9cbiAgICB1bmRvKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBsYXN0IHVuZG9uZSB0cmFuc2FjdGlvbiBpZiBhbnlcbiAgICAgKi9cbiAgICByZWRvKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFnZ3JlZ2F0ZWQgY2hhbmdlcyBmcm9tIGFsbCB0cmFuc2FjdGlvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXJnZUNoYW5nZXMgSWYgc2V0IHRvIHRydWUgd2lsbCBtZXJnZSBlYWNoIHN0YXRlJ3MgdmFsdWUgb3ZlciByZWxhdGUgcmVjb3JkUmVmXG4gICAgICogYW5kIHdpbGwgcmVjb3JkIHJlc3VsdGluZyB2YWx1ZSBpbiB0aGUgcmVsYXRlZCB0cmFuc2FjdGlvblxuICAgICAqIEByZXR1cm5zIENvbGxlY3Rpb24gb2YgYWdncmVnYXRlZCB0cmFuc2FjdGlvbnMgZm9yIGVhY2ggY2hhbmdlZCByZWNvcmRcbiAgICAgKi9cbiAgICBnZXRBZ2dyZWdhdGVkQ2hhbmdlcyhtZXJnZUNoYW5nZXM6IGJvb2xlYW4pOiBUW107XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0aGUgcmVjb3JkIHdpdGggcHJvdmlkZWQgaWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHJlY29yZFxuICAgICAqIEBwYXJhbSBwZW5kaW5nIFNob3VsZCBnZXQgcGVuZGluZyBzdGF0ZVxuICAgICAqIEByZXR1cm5zIFN0YXRlIG9mIHRoZSByZWNvcmQgaWYgYW55XG4gICAgICovXG4gICAgZ2V0U3RhdGUoaWQ6IGFueSwgcGVuZGluZz86IGJvb2xlYW4pOiBTO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgaWQgaW5jbHVkaW5nIGFsbCB1bmNvbW1pdHRlZCBjaGFuZ2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSByZWNvcmQgdG8gcmV0dXJuIHZhbHVlIGZvclxuICAgICAqIEBwYXJhbSBtZXJnZUNoYW5nZXMgSWYgc2V0IHRvIHRydWUgd2lsbCBtZXJnZSBzdGF0ZSdzIHZhbHVlIG92ZXIgcmVsYXRlIHJlY29yZFJlZlxuICAgICAqIGFuZCB3aWxsIHJldHVybiBtZXJnZWQgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSB3aXRoIGNoYW5nZXMgb3IgKipudWxsKipcbiAgICAgKi9cbiAgICBnZXRBZ2dyZWdhdGVkVmFsdWUoaWQ6IGFueSwgbWVyZ2VDaGFuZ2VzOiBib29sZWFuKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhbGwgdHJhbnNhY3Rpb25zIG92ZXIgdGhlIHByb3ZpZGVkIGRhdGFcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgc291cmNlIHRvIHVwZGF0ZVxuICAgICAqIEBwYXJhbSBpZCBPcHRpb25hbCByZWNvcmQgaWQgdG8gY29tbWl0IHRyYW5zYWN0aW9ucyBmb3JcbiAgICAgKi9cbiAgICBjb21taXQoZGF0YTogYW55W10sIGlkPzogYW55KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgdHJhbnNhY3Rpb25zXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgT3B0aW9uYWwgcmVjb3JkIGlkIHRvIGNsZWFyIHRyYW5zYWN0aW9ucyBmb3JcbiAgICAgKi9cbiAgICBjbGVhcihpZD86IGFueSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcGVuZGluZyB0cmFuc2FjdGlvbnMuIEFsbCB0cmFuc2FjdGlvbnMgcGFzc2VkIGFmdGVyIGNhbGwgdG8gc3RhcnRQZW5kaW5nXG4gICAgICogd2lsbCBub3QgYmUgYWRkZWQgdG8gdHJhbnNhY3Rpb24gbG9nXG4gICAgICovXG4gICAgc3RhcnRQZW5kaW5nKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHBlbmRpbmcgdHJhbnNhY3Rpb25zIGFuZCBhZ2dyZWdhdGVkIHBlbmRpbmcgc3RhdGUuIElmIGNvbW1pdCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqIGNvbW1pdHMgcGVuZGluZyBzdGF0ZXMgYXMgc2luZ2xlIHRyYW5zYWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tbWl0IFNob3VsZCBjb21taXQgdGhlIHBlbmRpbmcgc3RhdGVzXG4gICAgICovXG4gICAgZW5kUGVuZGluZyhjb21taXQ6IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19