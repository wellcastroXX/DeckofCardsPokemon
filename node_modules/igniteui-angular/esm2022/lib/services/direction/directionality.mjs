import { Injectable, Inject, InjectionToken, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export function DIR_DOCUMENT_FACTORY() {
    return inject(DOCUMENT);
}
/**
 * Injection token is used to inject the document into Directionality
 * which factory could be faked for testing purposes.
 *
 * We can't provide and mock the DOCUMENT token from platform-browser because configureTestingModule
 * allows override of the default providers, directive, pipes, modules of the test injector
 * which causes errors.
 *
 * @hidden
 */
export const DIR_DOCUMENT = /*@__PURE__*/ new InjectionToken('dir-doc', {
    providedIn: 'root',
    factory: DIR_DOCUMENT_FACTORY
});
/**
 * @hidden
 *
 * Bidirectional service that extracts the value of the direction attribute on the body or html elements.
 *
 * The dir attribute over the body element takes precedence.
 */
export class IgxDirectionality {
    get value() {
        return this._dir;
    }
    get document() {
        return this._document;
    }
    get rtl() {
        return this._dir === 'rtl';
    }
    constructor(document) {
        this._document = document;
        const bodyDir = this._document.body ? this._document.body.dir : null;
        const htmlDir = this._document.documentElement ? this._document.documentElement.dir : null;
        const extractedDir = bodyDir || htmlDir;
        this._dir = (extractedDir === 'ltr' || extractedDir === 'rtl') ? extractedDir : 'ltr';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDirectionality, deps: [{ token: DIR_DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDirectionality, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDirectionality, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DIR_DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uYWxpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZGlyZWN0aW9uL2RpcmVjdGlvbmFsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU8zQzs7R0FFRztBQUNILE1BQU0sVUFBVSxvQkFBb0I7SUFDaEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUEsSUFBSSxjQUFjLENBQVcsU0FBUyxFQUFFO0lBQzdFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxvQkFBb0I7Q0FDaEMsQ0FBQyxDQUFDO0FBRUg7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtJQUkxQixJQUFXLEtBQUs7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBa0MsUUFBUTtRQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNGLE1BQU0sWUFBWSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFlBQVksS0FBSyxLQUFLLElBQUksWUFBWSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMxRixDQUFDOzhHQXRCUSxpQkFBaUIsa0JBZ0JOLFlBQVk7a0hBaEJ2QixpQkFBaUIsY0FGZCxNQUFNOzsyRkFFVCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzswQkFpQmdCLE1BQU07MkJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgRGlyZWN0aW9uID0gJ2x0cicgfCAncnRsJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBESVJfRE9DVU1FTlRfRkFDVE9SWSgpOiBEb2N1bWVudCB7XG4gICAgcmV0dXJuIGluamVjdChET0NVTUVOVCk7XG59XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIGlzIHVzZWQgdG8gaW5qZWN0IHRoZSBkb2N1bWVudCBpbnRvIERpcmVjdGlvbmFsaXR5XG4gKiB3aGljaCBmYWN0b3J5IGNvdWxkIGJlIGZha2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICpcbiAqIFdlIGNhbid0IHByb3ZpZGUgYW5kIG1vY2sgdGhlIERPQ1VNRU5UIHRva2VuIGZyb20gcGxhdGZvcm0tYnJvd3NlciBiZWNhdXNlIGNvbmZpZ3VyZVRlc3RpbmdNb2R1bGVcbiAqIGFsbG93cyBvdmVycmlkZSBvZiB0aGUgZGVmYXVsdCBwcm92aWRlcnMsIGRpcmVjdGl2ZSwgcGlwZXMsIG1vZHVsZXMgb2YgdGhlIHRlc3QgaW5qZWN0b3JcbiAqIHdoaWNoIGNhdXNlcyBlcnJvcnMuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgRElSX0RPQ1VNRU5UID0gLypAX19QVVJFX18qL25ldyBJbmplY3Rpb25Ub2tlbjxEb2N1bWVudD4oJ2Rpci1kb2MnLCB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6IERJUl9ET0NVTUVOVF9GQUNUT1JZXG59KTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogQmlkaXJlY3Rpb25hbCBzZXJ2aWNlIHRoYXQgZXh0cmFjdHMgdGhlIHZhbHVlIG9mIHRoZSBkaXJlY3Rpb24gYXR0cmlidXRlIG9uIHRoZSBib2R5IG9yIGh0bWwgZWxlbWVudHMuXG4gKlxuICogVGhlIGRpciBhdHRyaWJ1dGUgb3ZlciB0aGUgYm9keSBlbGVtZW50IHRha2VzIHByZWNlZGVuY2UuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RGlyZWN0aW9uYWxpdHkge1xuICAgIHByaXZhdGUgX2RpcjogRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2RvY3VtZW50OiBEb2N1bWVudDtcblxuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogRGlyZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBydGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXIgPT09ICdydGwnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRElSX0RPQ1VNRU5UKSBkb2N1bWVudCkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICBjb25zdCBib2R5RGlyID0gdGhpcy5fZG9jdW1lbnQuYm9keSA/IHRoaXMuX2RvY3VtZW50LmJvZHkuZGlyIDogbnVsbDtcbiAgICAgICAgY29uc3QgaHRtbERpciA9IHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/IHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgOiBudWxsO1xuICAgICAgICBjb25zdCBleHRyYWN0ZWREaXIgPSBib2R5RGlyIHx8IGh0bWxEaXI7XG4gICAgICAgIHRoaXMuX2RpciA9IChleHRyYWN0ZWREaXIgPT09ICdsdHInIHx8IGV4dHJhY3RlZERpciA9PT0gJ3J0bCcpID8gZXh0cmFjdGVkRGlyIDogJ2x0cic7XG4gICAgfVxufVxuIl19