import { Directive, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
/** @hidden */
export const IGX_EXPANSION_PANEL_COMPONENT = /*@__PURE__*/ new InjectionToken('IgxExpansionPanelToken');
export class HeaderContentBaseDirective {
    constructor(element) {
        this.element = element;
        /**
         * Returns the `textContent` of an element
         *
         * ```html
         * <igx-expansion-panel-title>
         *  Tooltip content
         * </igx-expansion-panel-title>
         * ```
         *
         *  or the `title` content
         *
         * ```html
         * <igx-expansion-panel-title [title]="'Tooltip content'">
         * </igx-expansion-panel-title>
         * ```
         *
         * If both are provided, returns the `title` content.
         *
         * @param element
         * @returns tooltip content for an element
         */
        this.getTooltipContent = (element) => {
            if (element.nativeElement.title) {
                return element.nativeElement.title;
            }
            if (element.nativeElement.textContent) {
                return element.nativeElement.textContent.trim();
            }
            return null;
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: HeaderContentBaseDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: HeaderContentBaseDirective, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: HeaderContentBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i0.ElementRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE0QixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBb0JwRixjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsYUFBYSxDQUFBLElBQUksY0FBYyxDQUF3Qix3QkFBd0IsQ0FBQyxDQUFDO0FBUzlILE1BQU0sT0FBZ0IsMEJBQTBCO0lBRTVDLFlBQXNCLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFFekM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBb0JHO1FBQ0ksc0JBQWlCLEdBQUcsQ0FBQyxPQUFtQixFQUFVLEVBQUU7WUFDdkQsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRTtnQkFDN0IsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQzthQUN0QztZQUNELElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25DLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbkQ7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUM7SUFoQzJDLENBQUM7OEdBRjVCLDBCQUEwQjtrR0FBMUIsMEJBQTBCOzsyRkFBMUIsMEJBQTBCO2tCQUQvQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ2FuY2VsYWJsZUV2ZW50QXJncywgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJZ3hFeHBhbnNpb25QYW5lbEJhc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBoZWFkZXJJZDogc3RyaW5nO1xuICAgIGNvbGxhcHNlZDogYm9vbGVhbjtcbiAgICBhbmltYXRpb25TZXR0aW5nczogeyBvcGVuQW5pbWF0aW9uOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YTsgY2xvc2VBbmltYXRpb246IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhIH07XG4gICAgY29udGVudENvbGxhcHNlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGVudENvbGxhcHNpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNvbnRlbnRFeHBhbmRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGVudEV4cGFuZGluZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29sbGFwc2UoZXZ0PzogRXZlbnQpO1xuICAgIGV4cGFuZChldnQ/OiBFdmVudCk7XG4gICAgdG9nZ2xlKGV2dD86IEV2ZW50KTtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBjb25zdCBJR1hfRVhQQU5TSU9OX1BBTkVMX0NPTVBPTkVOVCA9IC8qQF9fUFVSRV9fKi9uZXcgSW5qZWN0aW9uVG9rZW48SWd4RXhwYW5zaW9uUGFuZWxCYXNlPignSWd4RXhwYW5zaW9uUGFuZWxUb2tlbicpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFeHBhbnNpb25QYW5lbEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBldmVudDogRXZlbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUV4cGFuc2lvblBhbmVsQ2FuY2VsYWJsZUV2ZW50QXJncyAgZXh0ZW5kcyBJRXhwYW5zaW9uUGFuZWxFdmVudEFyZ3MsIENhbmNlbGFibGVFdmVudEFyZ3Mge31cblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSGVhZGVyQ29udGVudEJhc2VEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYHRleHRDb250ZW50YCBvZiBhbiBlbGVtZW50XG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1leHBhbnNpb24tcGFuZWwtdGl0bGU+XG4gICAgICogIFRvb2x0aXAgY29udGVudFxuICAgICAqIDwvaWd4LWV4cGFuc2lvbi1wYW5lbC10aXRsZT5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICBvciB0aGUgYHRpdGxlYCBjb250ZW50XG4gICAgICpcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1leHBhbnNpb24tcGFuZWwtdGl0bGUgW3RpdGxlXT1cIidUb29sdGlwIGNvbnRlbnQnXCI+XG4gICAgICogPC9pZ3gtZXhwYW5zaW9uLXBhbmVsLXRpdGxlPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSWYgYm90aCBhcmUgcHJvdmlkZWQsIHJldHVybnMgdGhlIGB0aXRsZWAgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICogQHJldHVybnMgdG9vbHRpcCBjb250ZW50IGZvciBhbiBlbGVtZW50XG4gICAgICovXG4gICAgcHVibGljIGdldFRvb2x0aXBDb250ZW50ID0gKGVsZW1lbnQ6IEVsZW1lbnRSZWYpOiBzdHJpbmcgPT4ge1xuICAgICAgICBpZiAoZWxlbWVudC5uYXRpdmVFbGVtZW50LnRpdGxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5uYXRpdmVFbGVtZW50LnRpdGxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbn1cbiJdfQ==