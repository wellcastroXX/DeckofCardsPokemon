import { Component, ElementRef, HostBinding, HostListener, Input, Host, EventEmitter, Output, ContentChild, Inject, ViewChild, booleanAttribute } from '@angular/core';
import { IgxExpansionPanelIconDirective } from './expansion-panel.directives';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
import { mkenum } from '../core/utils';
import { IgxIconComponent } from '../icon/icon.component';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export const ExpansionPanelHeaderIconPosition = /*@__PURE__*/ mkenum({
    LEFT: 'left',
    NONE: 'none',
    RIGHT: 'right'
});
export class IgxExpansionPanelHeaderComponent {
    /**
     * Returns a reference to the `igx-expansion-panel-icon` element;
     * If `iconPosition` is `NONE` - return null;
     */
    get iconRef() {
        const renderedTemplate = this.customIconRef ?? this.defaultIconRef;
        return this.iconPosition !== ExpansionPanelHeaderIconPosition.NONE ? renderedTemplate : null;
    }
    /**
     * @hidden
     */
    set iconTemplate(val) {
        this._iconTemplate = val;
    }
    /**
     * @hidden
     */
    get iconTemplate() {
        return this._iconTemplate;
    }
    /**
     * @hidden
     */
    get controls() {
        return this.panel.id;
    }
    /**
     * @hidden @internal
     */
    get innerElement() {
        return this.elementRef.nativeElement.children[0];
    }
    /**
     * @hidden
     */
    get isExpanded() {
        return !this.panel.collapsed;
    }
    /**
     * Gets/sets the whether the header is disabled
     * When disabled, the header will not handle user events and will stop their propagation
     *
     * ```typescript
     *  const isDisabled = this.panel.header.disabled;
     * ```
     * Set
     * ```typescript
     *  this.panel.header.disabled = true;
     * ```
     * ```html
     *  <igx-expansion-panel-header [disabled]="true">
     *     ...
     *  </igx-expansion-panel-header>
     * ```
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(val) {
        this._disabled = val;
        if (val) {
            // V.S. June 11th, 2021: #9696 TabIndex should be removed when panel is disabled
            delete this.tabIndex;
        }
        else {
            this.tabIndex = 0;
        }
    }
    constructor(panel, cdr, elementRef) {
        this.panel = panel;
        this.cdr = cdr;
        this.elementRef = elementRef;
        /**
         * Gets/sets the `aria-level` attribute of the header
         * Get
         * ```typescript
         *  const currentAriaLevel = this.panel.header.lv;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.lv = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [lv]="myCustomLevel"></igx-expansion-panel-header>
         * ```
         */
        this.lv = '3';
        /**
         * Gets/sets the `role` attribute of the header
         * Get
         * ```typescript
         *  const currentRole = this.panel.header.role;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.role = '5';
         * ```
         * ```html
         *  <igx-expansion-panel-header [role]="'custom'"></igx-expansion-panel-header>
         * ```
         */
        this.role = 'heading';
        /**
         * Gets/sets the position of the expansion-panel-header expand/collapse icon
         * Accepts `left`, `right` or `none`
         * ```typescript
         *  const currentIconPosition = this.panel.header.iconPosition;
         * ```
         * Set
         * ```typescript
         *  this.panel.header.iconPosition = 'left';
         * ```
         * ```html
         *  <igx-expansion-panel-header [iconPosition]="'right'"></igx-expansion-panel-header>
         * ```
         */
        this.iconPosition = ExpansionPanelHeaderIconPosition.LEFT;
        /**
         * Emitted whenever a user interacts with the header host
         * ```typescript
         *  handleInteraction(event: IExpansionPanelCancelableEventArgs) {
         *  ...
         * }
         * ```
         * ```html
         *  <igx-expansion-panel-header (interaction)="handleInteraction($event)">
         *      ...
         *  </igx-expansion-panel-header>
         * ```
         */
        this.interaction = new EventEmitter();
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel__header';
        /**
         * Sets/gets the `id` of the expansion panel header.
         * ```typescript
         * let panelHeaderId =  this.panel.header.id;
         * ```
         *
         * @memberof IgxExpansionPanelComponent
         */
        this.id = '';
        /** @hidden @internal */
        this.tabIndex = 0;
        // properties section
        this._iconTemplate = false;
        this._disabled = false;
        this.id = `${this.panel.id}-header`;
    }
    /**
     * @hidden
     */
    onAction(evt) {
        if (this.disabled) {
            evt.stopPropagation();
            return;
        }
        const eventArgs = { event: evt, owner: this.panel, cancel: false };
        this.interaction.emit(eventArgs);
        if (eventArgs.cancel === true) {
            return;
        }
        this.panel.toggle(evt);
        evt.preventDefault();
    }
    /** @hidden @internal */
    openPanel(event) {
        if (event.altKey) {
            const eventArgs = { event, owner: this.panel, cancel: false };
            this.interaction.emit(eventArgs);
            if (eventArgs.cancel === true) {
                return;
            }
            this.panel.expand(event);
        }
    }
    /** @hidden @internal */
    closePanel(event) {
        if (event.altKey) {
            const eventArgs = { event, owner: this.panel, cancel: false };
            this.interaction.emit(eventArgs);
            if (eventArgs.cancel === true) {
                return;
            }
            this.panel.collapse(event);
        }
    }
    /**
     * @hidden
     */
    get iconPositionClass() {
        switch (this.iconPosition) {
            case (ExpansionPanelHeaderIconPosition.LEFT):
                return `igx-expansion-panel__header-icon--start`;
            case (ExpansionPanelHeaderIconPosition.RIGHT):
                return `igx-expansion-panel__header-icon--end`;
            case (ExpansionPanelHeaderIconPosition.NONE):
                return `igx-expansion-panel__header-icon--none`;
            default:
                return '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxExpansionPanelHeaderComponent, deps: [{ token: IGX_EXPANSION_PANEL_COMPONENT, host: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.2.4", type: IgxExpansionPanelHeaderComponent, isStandalone: true, selector: "igx-expansion-panel-header", inputs: { lv: "lv", role: "role", iconPosition: "iconPosition", disabled: ["disabled", "disabled", booleanAttribute] }, outputs: { interaction: "interaction" }, host: { listeners: { "keydown.Enter": "onAction($event)", "keydown.Space": "onAction($event)", "keydown.Spacebar": "onAction($event)", "click": "onAction($event)", "keydown.Alt.ArrowDown": "openPanel($event)", "keydown.Alt.ArrowUp": "closePanel($event)" }, properties: { "attr.aria-level": "this.lv", "attr.role": "this.role", "class.igx-expansion-panel__header": "this.cssClass", "class.igx-expansion-panel__header--expanded": "this.isExpanded", "class.igx-expansion-panel--disabled": "this.disabled" } }, queries: [{ propertyName: "iconTemplate", first: true, predicate: IgxExpansionPanelIconDirective, descendants: true }, { propertyName: "customIconRef", first: true, predicate: IgxExpansionPanelIconDirective, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "defaultIconRef", first: true, predicate: IgxIconComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<div class=\"igx-expansion-panel__header-inner\" [attr.tabindex]=\"tabIndex\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxExpansionPanelHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-expansion-panel-header', standalone: true, imports: [NgIf, IgxIconComponent], template: "<div class=\"igx-expansion-panel__header-inner\" [attr.tabindex]=\"tabIndex\" role=\"button\" [attr.id]=\"id\"\n[attr.aria-disabled]=\"disabled\" [attr.aria-expanded]=\"isExpanded\" [attr.aria-controls]=\"controls\">\n    <div class=\"igx-expansion-panel__title-wrapper\">\n        <ng-content select=\"igx-expansion-panel-title\"></ng-content>\n        <ng-content select=\"igx-expansion-panel-description\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div [class]=\"iconPositionClass\">\n        <ng-content *ngIf=\"iconTemplate\" select=\"igx-expansion-panel-icon\"></ng-content>\n        <igx-icon *ngIf=\"!iconTemplate\">\n            {{panel.collapsed? 'expand_more':'expand_less'}}\n        </igx-icon>\n    </div>\n</div>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Host
                }, {
                    type: Inject,
                    args: [IGX_EXPANSION_PANEL_COMPONENT]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }], propDecorators: { iconTemplate: [{
                type: ContentChild,
                args: [IgxExpansionPanelIconDirective]
            }], lv: [{
                type: HostBinding,
                args: ['attr.aria-level']
            }, {
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }, {
                type: Input
            }], iconPosition: [{
                type: Input
            }], interaction: [{
                type: Output
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-expansion-panel__header']
            }], isExpanded: [{
                type: HostBinding,
                args: ['class.igx-expansion-panel__header--expanded']
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-expansion-panel--disabled']
            }], customIconRef: [{
                type: ContentChild,
                args: [IgxExpansionPanelIconDirective, { read: ElementRef }]
            }], defaultIconRef: [{
                type: ViewChild,
                args: [IgxIconComponent, { read: ElementRef }]
            }], onAction: [{
                type: HostListener,
                args: ['keydown.Enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.Space', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.Spacebar', ['$event']]
            }, {
                type: HostListener,
                args: ['click', ['$event']]
            }], openPanel: [{
                type: HostListener,
                args: ['keydown.Alt.ArrowDown', ['$event']]
            }], closePanel: [{
                type: HostListener,
                args: ['keydown.Alt.ArrowUp', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,