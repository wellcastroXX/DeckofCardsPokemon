import { ContentChild, Directive, EventEmitter, Input, Output, ViewChild, booleanAttribute } from '@angular/core';
import { Direction } from '../carousel/carousel-base';
import { IgxTabHeaderBase, IgxTabContentBase } from './tabs.base';
import * as i0 from "@angular/core";
import * as i1 from "./tabs.base";
export class IgxTabItemDirective {
    /**
     * Gets/Sets whether an item is selected.
     */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            this.tabs.selectTab(this, this._selected);
            this.selectedChange.emit(this._selected);
        }
    }
    /** @hidden */
    constructor(tabs) {
        this.tabs = tabs;
        /**
         * Output to enable support for two-way binding on [(selected)]
         */
        this.selectedChange = new EventEmitter();
        /**
         * Disables the item.
         */
        this.disabled = false;
        /** @hidden */
        this.direction = Direction.NONE;
        this._selected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTabItemDirective, deps: [{ token: i1.IgxTabsBase }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxTabItemDirective, inputs: { disabled: ["disabled", "disabled", booleanAttribute], selected: ["selected", "selected", booleanAttribute] }, outputs: { selectedChange: "selectedChange" }, queries: [{ propertyName: "headerComponent", first: true, predicate: IgxTabHeaderBase, descendants: true }, { propertyName: "panelComponent", first: true, predicate: IgxTabContentBase, descendants: true }], viewQueries: [{ propertyName: "headerTemplate", first: true, predicate: ["headerTemplate"], descendants: true, static: true }, { propertyName: "panelTemplate", first: true, predicate: ["panelTemplate"], descendants: true, static: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTabItemDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i1.IgxTabsBase }], propDecorators: { headerComponent: [{
                type: ContentChild,
                args: [IgxTabHeaderBase]
            }], panelComponent: [{
                type: ContentChild,
                args: [IgxTabContentBase]
            }], headerTemplate: [{
                type: ViewChild,
                args: ['headerTemplate', { static: true }]
            }], panelTemplate: [{
                type: ViewChild,
                args: ['panelTemplate', { static: true }]
            }], selectedChange: [{
                type: Output
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selected: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3RhYnMvdGFiLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSCxPQUFPLEVBQUUsU0FBUyxFQUF5QixNQUFNLDJCQUEyQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBa0IsaUJBQWlCLEVBQWUsTUFBTSxhQUFhLENBQUM7OztBQUcvRixNQUFNLE9BQWdCLG1CQUFtQjtJQXFDckM7O09BRUc7SUFDSCxJQUNXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsUUFBUSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRCxjQUFjO0lBQ2QsWUFBb0IsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQXBDckM7O1dBRUc7UUFFSSxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFcEQ7O1dBRUc7UUFFSSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXhCLGNBQWM7UUFDUCxjQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUkxQixjQUFTLEdBQUcsS0FBSyxDQUFDO0lBb0IxQixDQUFDOzhHQXZEaUIsbUJBQW1CO2tHQUFuQixtQkFBbUIsK0NBMkJqQixnQkFBZ0Isc0NBYWhCLGdCQUFnQix5SEFyQ3RCLGdCQUFnQixpRkFJaEIsaUJBQWlCOzsyRkFQYixtQkFBbUI7a0JBRHhDLFNBQVM7Z0ZBS0MsZUFBZTtzQkFEckIsWUFBWTt1QkFBQyxnQkFBZ0I7Z0JBS3ZCLGNBQWM7c0JBRHBCLFlBQVk7dUJBQUMsaUJBQWlCO2dCQUt4QixjQUFjO3NCQURwQixTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFLdEMsYUFBYTtzQkFEbkIsU0FBUzt1QkFBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQU9yQyxjQUFjO3NCQURwQixNQUFNO2dCQU9BLFFBQVE7c0JBRGQsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFjM0IsUUFBUTtzQkFEbEIsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRDaGlsZCwgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIGJvb2xlYW5BdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpcmVjdGlvbiwgSWd4U2xpZGVDb21wb25lbnRCYXNlIH0gZnJvbSAnLi4vY2Fyb3VzZWwvY2Fyb3VzZWwtYmFzZSc7XG5pbXBvcnQgeyBJZ3hUYWJIZWFkZXJCYXNlLCBJZ3hUYWJJdGVtQmFzZSwgSWd4VGFiQ29udGVudEJhc2UsIElneFRhYnNCYXNlIH0gZnJvbSAnLi90YWJzLmJhc2UnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJZ3hUYWJJdGVtRGlyZWN0aXZlIGltcGxlbWVudHMgSWd4VGFiSXRlbUJhc2UsIElneFNsaWRlQ29tcG9uZW50QmFzZSB7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4VGFiSGVhZGVyQmFzZSlcbiAgICBwdWJsaWMgaGVhZGVyQ29tcG9uZW50OiBJZ3hUYWJIZWFkZXJCYXNlO1xuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBAQ29udGVudENoaWxkKElneFRhYkNvbnRlbnRCYXNlKVxuICAgIHB1YmxpYyBwYW5lbENvbXBvbmVudDogSWd4VGFiQ29udGVudEJhc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBWaWV3Q2hpbGQoJ2hlYWRlclRlbXBsYXRlJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgICBwdWJsaWMgaGVhZGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBWaWV3Q2hpbGQoJ3BhbmVsVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIHB1YmxpYyBwYW5lbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRvIGVuYWJsZSBzdXBwb3J0IGZvciB0d28td2F5IGJpbmRpbmcgb24gWyhzZWxlY3RlZCldXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHNlbGVjdGVkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIGl0ZW0uXG4gICAgICovXG4gICAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG4gICAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHB1YmxpYyBkaXJlY3Rpb24gPSBEaXJlY3Rpb24uTk9ORTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHB1YmxpYyBwcmV2aW91czogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX3NlbGVjdGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzL1NldHMgd2hldGhlciBhbiBpdGVtIGlzIHNlbGVjdGVkLlxuICAgICAqL1xuICAgIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3RlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnRhYnMuc2VsZWN0VGFiKHRoaXMsIHRoaXMuX3NlbGVjdGVkKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDaGFuZ2UuZW1pdCh0aGlzLl9zZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFiczogSWd4VGFic0Jhc2UpIHtcbiAgICB9XG59XG4iXX0=