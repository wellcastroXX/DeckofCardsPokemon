import { ContentChildren, Directive, EventEmitter, Inject, Input, Output, booleanAttribute } from '@angular/core';
import { Direction, IgxCarouselComponentBase } from '../carousel/carousel-base';
import { IgxAngularAnimationService } from '../services/animation/angular-animation-service';
import { IgxTabItemDirective } from './tab-item.directive';
import { IgxTabContentBase } from './tabs.base';
import * as i0 from "@angular/core";
import * as i1 from "../services/direction/directionality";
export class IgxTabsDirective extends IgxCarouselComponentBase {
    /**
     * Gets/Sets the index of the selected item.
     * Default value is 0 if contents are defined otherwise defaults to -1.
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        if (this._selectedIndex !== value) {
            let newIndex = value;
            const oldIndex = this._selectedIndex;
            const args = {
                owner: this,
                cancel: false,
                oldIndex,
                newIndex
            };
            this.selectedIndexChanging.emit(args);
            if (!args.cancel) {
                newIndex = args.newIndex;
                this._selectedIndex = newIndex;
                this.selectedIndexChange.emit(this._selectedIndex);
            }
            this.updateSelectedTabs(oldIndex);
        }
    }
    /**
     * Gets the selected item.
     */
    get selectedItem() {
        return this.items && this.selectedIndex >= 0 && this.selectedIndex < this.items.length ?
            this.items.get(this.selectedIndex) : null;
    }
    /** @hidden */
    constructor(animationService, cdr, dir) {
        super(animationService, cdr);
        this.dir = dir;
        /**
         * Enables/disables the transition animation of the contents.
         */
        this.disableAnimation = false;
        /**
         * Output to enable support for two-way binding on [(selectedIndex)]
         */
        this.selectedIndexChange = new EventEmitter();
        /**
         * Emitted when the selected index is about to change.
         */
        this.selectedIndexChanging = new EventEmitter();
        /**
         * Emitted when the selected item is changed.
         */
        this.selectedItemChange = new EventEmitter();
        this._selectedIndex = -1;
    }
    /** @hidden */
    ngAfterViewInit() {
        if (this._selectedIndex === -1) {
            const hasSelectedTab = this.items.some((tab, i) => {
                if (tab.selected) {
                    this._selectedIndex = i;
                }
                return tab.selected;
            });
            if (!hasSelectedTab && this.hasPanels) {
                this._selectedIndex = 0;
            }
        }
        // Use promise to avoid expression changed after check error
        Promise.resolve().then(() => {
            this.updateSelectedTabs(null, false);
        });
        this._itemChanges$ = this.items.changes.subscribe(() => {
            this.onItemChanges();
        });
        this.setAttributes();
    }
    /** @hidden */
    ngOnDestroy() {
        if (this._itemChanges$) {
            this._itemChanges$.unsubscribe();
        }
    }
    /** @hidden */
    selectTab(tab, selected) {
        if (!this.items) {
            return;
        }
        const tabs = this.items.toArray();
        if (selected) {
            const index = tabs.indexOf(tab);
            if (index > -1) {
                this.selectedIndex = index;
            }
        }
        else {
            if (tabs.every(t => !t.selected)) {
                this.selectedIndex = -1;
            }
        }
    }
    /** @hidden */
    getPreviousElement() {
        return this.previousItem.panelComponent.nativeElement;
    }
    /** @hidden */
    getCurrentElement() {
        return this.currentItem.panelComponent.nativeElement;
    }
    /** @hidden */
    scrollTabHeaderIntoView() {
    }
    /** @hidden */
    onItemChanges() {
        this.setAttributes();
        // Check if there is selected tab
        let selectedIndex = -1;
        this.items.some((tab, i) => {
            if (tab.selected) {
                selectedIndex = i;
            }
            return tab.selected;
        });
        if (selectedIndex >= 0) {
            // Set the selected index to the tab that has selected=true
            Promise.resolve().then(() => {
                this.selectedIndex = selectedIndex;
            });
        }
        else {
            if (this.selectedIndex >= 0 && this.selectedIndex < this.items.length) {
                // Select the tab on the same index the previous selected tab was
                Promise.resolve().then(() => {
                    this.updateSelectedTabs(null);
                });
            }
            else if (this.selectedIndex >= this.items.length) {
                // Select the last tab
                Promise.resolve().then(() => {
                    this.selectedIndex = this.items.length - 1;
                });
            }
        }
    }
    setAttributes() {
        this.items.forEach(item => {
            if (item.panelComponent && !item.headerComponent.nativeElement.getAttribute('id')) {
                const id = this.getNextTabId();
                const tabHeaderId = `${this.componentName}-header-${id}`;
                const tabPanelId = `${this.componentName}-content-${id}`;
                this.setHeaderAttribute(item, 'id', tabHeaderId);
                this.setHeaderAttribute(item, 'aria-controls', tabPanelId);
                this.setPanelAttribute(item, 'id', tabPanelId);
                this.setPanelAttribute(item, 'aria-labelledby', tabHeaderId);
            }
        });
    }
    setHeaderAttribute(item, attrName, value) {
        item.headerComponent.nativeElement.setAttribute(attrName, value);
    }
    setPanelAttribute(item, attrName, value) {
        item.panelComponent.nativeElement.setAttribute(attrName, value);
    }
    get hasPanels() {
        return this.panels && this.panels.length;
    }
    updateSelectedTabs(oldSelectedIndex, raiseEvent = true) {
        if (!this.items) {
            return;
        }
        let newTab;
        const oldTab = this.currentItem;
        // First select the new tab
        if (this._selectedIndex >= 0 && this._selectedIndex < this.items.length) {
            newTab = this.items.get(this._selectedIndex);
            newTab.selected = true;
        }
        // Then unselect the other tabs
        this.items.forEach((tab, i) => {
            if (i !== this._selectedIndex) {
                tab.selected = false;
            }
        });
        if (this._selectedIndex !== oldSelectedIndex) {
            this.scrollTabHeaderIntoView();
            this.triggerPanelAnimations(oldSelectedIndex);
            if (raiseEvent && newTab !== oldTab) {
                this.selectedItemChange.emit({
                    owner: this,
                    newItem: newTab,
                    oldItem: oldTab
                });
            }
        }
    }
    triggerPanelAnimations(oldSelectedIndex) {
        const item = this.items.get(this._selectedIndex);
        if (item &&
            !this.disableAnimation &&
            this.hasPanels &&
            this.currentItem &&
            !this.currentItem.selected) {
            item.direction = (!this.dir.rtl && this._selectedIndex > oldSelectedIndex) ||
                (this.dir.rtl && this._selectedIndex < oldSelectedIndex)
                ? Direction.NEXT : Direction.PREV;
            if (this.previousItem && this.previousItem.previous) {
                this.previousItem.previous = false;
            }
            this.currentItem.direction = item.direction;
            this.previousItem = this.currentItem;
            this.currentItem = item;
            this.triggerAnimations();
        }
        else {
            this.currentItem = item;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTabsDirective, deps: [{ token: IgxAngularAnimationService }, { token: i0.ChangeDetectorRef }, { token: i1.IgxDirectionality }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.2.4", type: IgxTabsDirective, inputs: { selectedIndex: "selectedIndex", disableAnimation: ["disableAnimation", "disableAnimation", booleanAttribute] }, outputs: { selectedIndexChange: "selectedIndexChange", selectedIndexChanging: "selectedIndexChanging", selectedItemChange: "selectedItemChange" }, queries: [{ propertyName: "items", predicate: IgxTabItemDirective }, { propertyName: "panels", predicate: IgxTabContentBase, descendants: true }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTabsDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }, { type: i0.ChangeDetectorRef }, { type: i1.IgxDirectionality }], propDecorators: { selectedIndex: [{
                type: Input
            }], disableAnimation: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectedIndexChange: [{
                type: Output
            }], selectedIndexChanging: [{
                type: Output
            }], selectedItemChange: [{
                type: Output
            }], items: [{
                type: ContentChildren,
                args: [IgxTabItemDirective]
            }], panels: [{
                type: ContentChildren,
                args: [IgxTabContentBase, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,