import { Directive, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import * as i0 from "@angular/core";
/** @hidden */
export class IgxListBaseDirective extends DisplayDensityBase {
    constructor(_displayDensityOptions, el) {
        super(_displayDensityOptions, el);
        this._displayDensityOptions = _displayDensityOptions;
        this.el = el;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListBaseDirective, deps: [{ token: DisplayDensityToken, optional: true }, { token: i0.ElementRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxListBaseDirective, isStandalone: true, selector: "[igxListBase]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxListBase]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }] }] });
export var IgxListPanState;
(function (IgxListPanState) {
    IgxListPanState[IgxListPanState["NONE"] = 0] = "NONE";
    IgxListPanState[IgxListPanState["LEFT"] = 1] = "LEFT";
    IgxListPanState[IgxListPanState["RIGHT"] = 2] = "RIGHT";
})(IgxListPanState || (IgxListPanState = {}));
export class IgxEmptyListTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxEmptyListTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxEmptyListTemplateDirective, isStandalone: true, selector: "[igxEmptyList]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxEmptyListTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxEmptyList]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
export class IgxDataLoadingTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDataLoadingTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxDataLoadingTemplateDirective, isStandalone: true, selector: "[igxDataLoading]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDataLoadingTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxDataLoading]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
export class IgxListItemLeftPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListItemLeftPanningTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxListItemLeftPanningTemplateDirective, isStandalone: true, selector: "[igxListItemLeftPanning]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListItemLeftPanningTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxListItemLeftPanning]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
export class IgxListItemRightPanningTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListItemRightPanningTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxListItemRightPanningTemplateDirective, isStandalone: true, selector: "[igxListItemRightPanning]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxListItemRightPanningTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxListItemRightPanning]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvbGlzdC9saXN0LmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUF3QyxRQUFRLEVBQUUsTUFBTSxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBRSxrQkFBa0IsRUFBMEIsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFNbEcsY0FBYztBQUtkLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxrQkFBa0I7SUFleEQsWUFFYyxzQkFBOEMsRUFDbEMsRUFBYztRQUVwQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFIeEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUNsQyxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBR3hDLENBQUM7OEdBckJRLG9CQUFvQixrQkFnQkwsbUJBQW1CO2tHQWhCbEMsb0JBQW9COzsyRkFBcEIsb0JBQW9CO2tCQUpoQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OzBCQWlCUSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLG1CQUFtQjs7MEJBRXRDLFFBQVE7O0FBTWpCLE1BQU0sQ0FBTixJQUFZLGVBQXFDO0FBQWpELFdBQVksZUFBZTtJQUFHLHFEQUFJLENBQUE7SUFBRSxxREFBSSxDQUFBO0lBQUUsdURBQUssQ0FBQTtBQUFDLENBQUMsRUFBckMsZUFBZSxLQUFmLGVBQWUsUUFBc0I7QUFNakQsTUFBTSxPQUFPLDZCQUE2QjtJQUN0QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OEdBRHpDLDZCQUE2QjtrR0FBN0IsNkJBQTZCOzsyRkFBN0IsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFTRCxNQUFNLE9BQU8sK0JBQStCO0lBQ3hDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs4R0FEekMsK0JBQStCO2tHQUEvQiwrQkFBK0I7OzJGQUEvQiwrQkFBK0I7a0JBSjNDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsVUFBVSxFQUFFLElBQUk7aUJBQ25COztBQVNELE1BQU0sT0FBTyx1Q0FBdUM7SUFDaEQsWUFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOzhHQUR6Qyx1Q0FBdUM7a0dBQXZDLHVDQUF1Qzs7MkZBQXZDLHVDQUF1QztrQkFKbkQsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7O0FBU0QsTUFBTSxPQUFPLHdDQUF3QztJQUNqRCxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OEdBRHpDLHdDQUF3QztrR0FBeEMsd0NBQXdDOzsyRkFBeEMsd0NBQXdDO2tCQUpwRCxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFVBQVUsRUFBRSxJQUFJO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBPcHRpb25hbCwgSW5qZWN0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaXNwbGF5RGVuc2l0eUJhc2UsIElEaXNwbGF5RGVuc2l0eU9wdGlvbnMsIERpc3BsYXlEZW5zaXR5VG9rZW4gfSBmcm9tICcuLi9jb3JlL2RlbnNpdHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0Q2hpbGQge1xuICAgIGluZGV4OiBudW1iZXI7XG59XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0QmFzZV0nLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBEaXNwbGF5RGVuc2l0eUJhc2Uge1xuICAgIHB1YmxpYyBpdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIGFsbG93TGVmdFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcHVibGljIGFsbG93UmlnaHRQYW5uaW5nOiBib29sZWFuO1xuICAgIHB1YmxpYyBwYW5FbmRUcmlnZ2VyaW5nVGhyZXNob2xkOiBudW1iZXI7XG4gICAgcHVibGljIGxlZnRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHB1YmxpYyByaWdodFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIHN0YXJ0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgZW5kUGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwdWJsaWMgcmVzZXRQYW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHB1YmxpYyBwYW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHVibGljIGNoaWxkcmVuOiBRdWVyeUxpc3Q8YW55PjtcbiAgICBwdWJsaWMgbGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgcHVibGljIGxpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChEaXNwbGF5RGVuc2l0eVRva2VuKVxuICAgICAgICBwcm90ZWN0ZWQgX2Rpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucyxcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIGVsOiBFbGVtZW50UmVmLFxuICAgICkge1xuICAgICAgICBzdXBlcihfZGlzcGxheURlbnNpdHlPcHRpb25zLCBlbCk7XG4gICAgfVxufVxuXG5leHBvcnQgZW51bSBJZ3hMaXN0UGFuU3RhdGUgeyBOT05FLCBMRUZULCBSSUdIVCB9XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEVtcHR5TGlzdF0nLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4RW1wdHlMaXN0VGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneERhdGFMb2FkaW5nXScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRhTG9hZGluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbUxlZnRQYW5uaW5nXScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneExpc3RJdGVtUmlnaHRQYW5uaW5nXScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuIl19