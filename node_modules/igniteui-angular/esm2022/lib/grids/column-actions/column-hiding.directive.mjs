import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
import * as i0 from "@angular/core";
import * as i1 from "./column-actions.component";
export class IgxColumnHidingDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = c => !c.disableHiding;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        return this.columnActions.grid?.resourceStrings.igx_grid_hiding_check_all_label ?? 'Show All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        return this.columnActions.grid?.resourceStrings.igx_grid_hiding_uncheck_all_label ?? 'Hide All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.toggleVisibility(false));
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.toggleVisibility(true));
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return !column.hidden;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.toggleVisibility();
    }
    get allChecked() {
        return this.columnActions.filteredColumns.every(col => !this.columnChecked(col));
    }
    get allUnchecked() {
        return this.columnActions.filteredColumns.every(col => this.columnChecked(col));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnHidingDirective, deps: [{ token: IgxColumnActionsComponent }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxColumnHidingDirective, isStandalone: true, selector: "[igxColumnHiding]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnHidingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxColumnHiding]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.IgxColumnActionsComponent, decorators: [{
                    type: Inject,
                    args: [IgxColumnActionsComponent]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhpZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29sdW1uLWFjdGlvbnMvY29sdW1uLWhpZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQU12RSxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsNkJBQTZCO0lBRXZFLFlBQ2lELGFBQXdDO1FBRXJGLEtBQUssRUFBRSxDQUFDO1FBRnFDLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQWtDekY7O1dBRUc7UUFDSSwrQkFBMEIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQWxDdEQsYUFBYSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsK0JBQStCLElBQUksVUFBVSxDQUFDO0lBQ2xHLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsZUFBZTtRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxpQ0FBaUMsSUFBSSxVQUFVLENBQUM7SUFDcEcsQ0FBQztJQUNEOztPQUVHO0lBQ0ksUUFBUTtRQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRS9FLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVU7UUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBT0Q7O09BRUc7SUFDSSxhQUFhLENBQUMsTUFBa0I7UUFDbkMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLE1BQWtCO1FBQ2xDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7OEdBOURRLHdCQUF3QixrQkFHckIseUJBQXlCO2tHQUg1Qix3QkFBd0I7OzJGQUF4Qix3QkFBd0I7a0JBSnBDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsVUFBVSxFQUFFLElBQUk7aUJBQ25COzswQkFJUSxNQUFNOzJCQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW5UeXBlIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy1iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4tYWN0aW9ucy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDb2x1bW5IaWRpbmddJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtbkhpZGluZ0RpcmVjdGl2ZSBleHRlbmRzIElneENvbHVtbkFjdGlvbnNCYXNlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KElneENvbHVtbkFjdGlvbnNDb21wb25lbnQpIHByb3RlY3RlZCBjb2x1bW5BY3Rpb25zOiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbHVtbkFjdGlvbnMuYWN0aW9uc0RpcmVjdGl2ZSA9IHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNoZWNrQWxsTGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQWN0aW9ucy5ncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfaGlkaW5nX2NoZWNrX2FsbF9sYWJlbCA/PyAnU2hvdyBBbGwnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCB1bmNoZWNrQWxsTGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQWN0aW9ucy5ncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfaGlkaW5nX3VuY2hlY2tfYWxsX2xhYmVsID8/ICdIaWRlIEFsbCc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQWxsKCkge1xuICAgICAgICB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmZvckVhY2goYyA9PiBjLnRvZ2dsZVZpc2liaWxpdHkoZmFsc2UpKTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHVuY2hlY2tBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZm9yRWFjaChjID0+IGMudG9nZ2xlVmlzaWJpbGl0eSh0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aW9uRW5hYmxlZENvbHVtbnNGaWx0ZXIgPSBjID0+ICFjLmRpc2FibGVIaWRpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBjb2x1bW5DaGVja2VkKGNvbHVtbjogQ29sdW1uVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIWNvbHVtbi5oaWRkZW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGNvbHVtbjogQ29sdW1uVHlwZSkge1xuICAgICAgICBjb2x1bW4udG9nZ2xlVmlzaWJpbGl0eSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYWxsQ2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZXZlcnkoY29sID0+ICF0aGlzLmNvbHVtbkNoZWNrZWQoY29sKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhbGxVbmNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmV2ZXJ5KGNvbCA9PiB0aGlzLmNvbHVtbkNoZWNrZWQoY29sKSk7XG4gICAgfVxufVxuIl19