import { Directive, Inject } from '@angular/core';
import { IgxColumnActionsBaseDirective } from './column-actions-base.directive';
import { IgxColumnActionsComponent } from './column-actions.component';
import * as i0 from "@angular/core";
import * as i1 from "./column-actions.component";
export class IgxColumnPinningDirective extends IgxColumnActionsBaseDirective {
    constructor(columnActions) {
        super();
        this.columnActions = columnActions;
        /**
         * @hidden @internal
         */
        this.actionEnabledColumnsFilter = (c) => !c.disablePinning && !c.level;
        columnActions.actionsDirective = this;
    }
    /**
     * @hidden @internal
     */
    get checkAllLabel() {
        return this.columnActions.grid?.resourceStrings.igx_grid_pinning_check_all_label ?? 'Pin All';
    }
    /**
     * @hidden @internal
     */
    get uncheckAllLabel() {
        return this.columnActions.grid?.resourceStrings.igx_grid_pinning_uncheck_all_label ?? 'Unpin All';
    }
    /**
     * @hidden @internal
     */
    checkAll() {
        this.columnActions.filteredColumns.forEach(c => c.pinned = true);
    }
    /**
     * @hidden @internal
     */
    uncheckAll() {
        this.columnActions.filteredColumns.forEach(c => c.pinned = false);
    }
    /**
     * @hidden @internal
     */
    columnChecked(column) {
        return column.pinned;
    }
    /**
     * @hidden @internal
     */
    toggleColumn(column) {
        column.pinned = !column.pinned;
    }
    get allUnchecked() {
        return !this.columnActions.filteredColumns.some(col => !this.columnChecked(col));
    }
    get allChecked() {
        return !this.columnActions.filteredColumns.some(col => this.columnChecked(col));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnPinningDirective, deps: [{ token: IgxColumnActionsComponent }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxColumnPinningDirective, isStandalone: true, selector: "[igxColumnPinning]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnPinningDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxColumnPinning]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.IgxColumnActionsComponent, decorators: [{
                    type: Inject,
                    args: [IgxColumnActionsComponent]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXBpbm5pbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL2NvbHVtbi1hY3Rpb25zL2NvbHVtbi1waW5uaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNoRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBTXZFLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSw2QkFBNkI7SUFFeEUsWUFDaUQsYUFBd0M7UUFFckYsS0FBSyxFQUFFLENBQUM7UUFGcUMsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBaUN6Rjs7V0FFRztRQUNJLCtCQUEwQixHQUFHLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBakNqRixhQUFhLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxnQ0FBZ0MsSUFBSSxTQUFTLENBQUM7SUFDbEcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxlQUFlO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLGtDQUFrQyxJQUFJLFdBQVcsQ0FBQztJQUN0RyxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxRQUFRO1FBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVO1FBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBT0Q7O09BRUc7SUFDSSxhQUFhLENBQUMsTUFBa0I7UUFDbkMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxNQUFrQjtRQUNsQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQzs4R0E3RFEseUJBQXlCLGtCQUd0Qix5QkFBeUI7a0dBSDVCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFKckMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OzBCQUlRLE1BQU07MkJBQUMseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbHVtblR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0Jhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1hY3Rpb25zLWJhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbi1hY3Rpb25zLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENvbHVtblBpbm5pbmddJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneENvbHVtblBpbm5pbmdEaXJlY3RpdmUgZXh0ZW5kcyBJZ3hDb2x1bW5BY3Rpb25zQmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50KSBwcm90ZWN0ZWQgY29sdW1uQWN0aW9uczogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb2x1bW5BY3Rpb25zLmFjdGlvbnNEaXJlY3RpdmUgPSB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGdldCBjaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Bpbm5pbmdfY2hlY2tfYWxsX2xhYmVsID8/ICdQaW4gQWxsJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdW5jaGVja0FsbExhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkFjdGlvbnMuZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Bpbm5pbmdfdW5jaGVja19hbGxfbGFiZWwgPz8gJ1VucGluIEFsbCc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQWxsKCkge1xuICAgICAgICB0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLmZvckVhY2goYyA9PiBjLnBpbm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIHVuY2hlY2tBbGwoKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9ucy5maWx0ZXJlZENvbHVtbnMuZm9yRWFjaChjID0+IGMucGlubmVkID0gZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW4gQGludGVybmFsXG4gICAgICovXG4gICAgcHVibGljIGFjdGlvbkVuYWJsZWRDb2x1bW5zRmlsdGVyID0gKGM6IENvbHVtblR5cGUpID0+ICFjLmRpc2FibGVQaW5uaW5nICYmICFjLmxldmVsO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgY29sdW1uQ2hlY2tlZChjb2x1bW46IENvbHVtblR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNvbHVtbi5waW5uZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlQ29sdW1uKGNvbHVtbjogQ29sdW1uVHlwZSkge1xuICAgICAgICBjb2x1bW4ucGlubmVkID0gIWNvbHVtbi5waW5uZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhbGxVbmNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb2x1bW5BY3Rpb25zLmZpbHRlcmVkQ29sdW1ucy5zb21lKGNvbCA9PiAhdGhpcy5jb2x1bW5DaGVja2VkKGNvbCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYWxsQ2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmNvbHVtbkFjdGlvbnMuZmlsdGVyZWRDb2x1bW5zLnNvbWUoY29sID0+IHRoaXMuY29sdW1uQ2hlY2tlZChjb2wpKTtcbiAgICB9XG59XG4iXX0=