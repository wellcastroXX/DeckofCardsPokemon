import { Injectable } from '@angular/core';
import { IgxColumnResizingService } from '../resizing.service';
import * as i0 from "@angular/core";
/**
 * @hidden
 * @internal
 */
export class IgxPivotColumnResizingService extends IgxColumnResizingService {
    /**
     * @hidden
     */
    getColumnHeaderRenderedWidth() {
        return this.rowHeaderGroup.header.nativeElement.getBoundingClientRect().width;
    }
    _handlePixelResize(diff, column) {
        const rowDim = this.rowHeaderGroup.parent.rootDimension;
        if (!rowDim)
            return;
        const currentColWidth = parseFloat(column.width);
        const colMinWidth = column.minWidthPx;
        const colMaxWidth = column.maxWidthPx;
        let newWidth = currentColWidth;
        if (currentColWidth + diff < colMinWidth) {
            newWidth = colMinWidth;
        }
        else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
            newWidth = colMaxWidth;
        }
        else {
            newWidth = (currentColWidth + diff);
        }
        this.rowHeaderGroup.grid.resizeRowDimensionPixels(rowDim, newWidth);
    }
    _handlePercentageResize() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnResizingService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnResizingService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnResizingService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGl2b3QtcmVzaXppbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9yZXNpemluZy9waXZvdC1ncmlkL3Bpdm90LXJlc2l6aW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFHL0Q7OztHQUdHO0FBRUgsTUFBTSxPQUFPLDZCQUE4QixTQUFRLHdCQUF3QjtJQU12RTs7T0FFRztJQUNhLDRCQUE0QjtRQUN4QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNsRixDQUFDO0lBRWtCLGtCQUFrQixDQUFDLElBQVksRUFBRSxNQUFrQjtRQUNsRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBRXBCLE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3RDLElBQUksUUFBUSxHQUFHLGVBQWUsQ0FBQztRQUMvQixJQUFJLGVBQWUsR0FBRyxJQUFJLEdBQUcsV0FBVyxFQUFFO1lBQ3RDLFFBQVEsR0FBRyxXQUFXLENBQUM7U0FDMUI7YUFBTSxJQUFJLFdBQVcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsV0FBVyxDQUFDLEVBQUU7WUFDOUQsUUFBUSxHQUFHLFdBQVcsQ0FBQztTQUMxQjthQUFNO1lBQ0gsUUFBUSxHQUFHLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFa0IsdUJBQXVCLEtBQUssQ0FBQzs4R0FoQ3ZDLDZCQUE2QjtrSEFBN0IsNkJBQTZCOzsyRkFBN0IsNkJBQTZCO2tCQUR6QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uVHlwZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQaXZvdFJvd0hlYWRlckdyb3VwVHlwZSB9IGZyb20gJy4uLy4uL3Bpdm90LWdyaWQvcGl2b3QtZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlIH0gZnJvbSAnLi4vcmVzaXppbmcuc2VydmljZSc7XG5cblxuLyoqXG4gKiBAaGlkZGVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIElneFBpdm90Q29sdW1uUmVzaXppbmdTZXJ2aWNlIGV4dGVuZHMgSWd4Q29sdW1uUmVzaXppbmdTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHJvd0hlYWRlckdyb3VwOiBQaXZvdFJvd0hlYWRlckdyb3VwVHlwZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgb3ZlcnJpZGUgZ2V0Q29sdW1uSGVhZGVyUmVuZGVyZWRXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93SGVhZGVyR3JvdXAuaGVhZGVyLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIF9oYW5kbGVQaXhlbFJlc2l6ZShkaWZmOiBudW1iZXIsIGNvbHVtbjogQ29sdW1uVHlwZSkge1xuICAgICAgICBjb25zdCByb3dEaW0gPSB0aGlzLnJvd0hlYWRlckdyb3VwLnBhcmVudC5yb290RGltZW5zaW9uO1xuICAgICAgICBpZiAoIXJvd0RpbSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb2xXaWR0aCA9IHBhcnNlRmxvYXQoY29sdW1uLndpZHRoKTtcbiAgICAgICAgY29uc3QgY29sTWluV2lkdGggPSBjb2x1bW4ubWluV2lkdGhQeDtcbiAgICAgICAgY29uc3QgY29sTWF4V2lkdGggPSBjb2x1bW4ubWF4V2lkdGhQeDtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gY3VycmVudENvbFdpZHRoO1xuICAgICAgICBpZiAoY3VycmVudENvbFdpZHRoICsgZGlmZiA8IGNvbE1pbldpZHRoKSB7XG4gICAgICAgICAgICBuZXdXaWR0aCA9IGNvbE1pbldpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbE1heFdpZHRoICYmIChjdXJyZW50Q29sV2lkdGggKyBkaWZmID4gY29sTWF4V2lkdGgpKSB7XG4gICAgICAgICAgICBuZXdXaWR0aCA9IGNvbE1heFdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3V2lkdGggPSAoY3VycmVudENvbFdpZHRoICsgZGlmZik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJvd0hlYWRlckdyb3VwLmdyaWQucmVzaXplUm93RGltZW5zaW9uUGl4ZWxzKHJvd0RpbSwgbmV3V2lkdGgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBfaGFuZGxlUGVyY2VudGFnZVJlc2l6ZSgpIHsgfVxufVxuIl19