import { Pipe } from '@angular/core';
import { formatDate } from '../../core/utils';
import { GridColumnDataType } from '../../data-operations/data-util';
import { IgxSorting } from '../common/strategy';
import * as i0 from "@angular/core";
const HIDDEN_FIELD_NAME = '_Igx_Hidden_Data_';
/**
 * @hidden
 * @internal
 */
class GroupByRecord {
}
export class ITreeGridAggregation {
}
export class IgxGroupedTreeGridSorting extends IgxSorting {
    static { this._instance = null; }
    static instance() {
        return this._instance || (this._instance = new IgxGroupedTreeGridSorting());
    }
    getFieldValue(obj, key, isDate = false, isTime = false) {
        const data = obj.data[HIDDEN_FIELD_NAME] ?
            obj.data.hasOwnProperty(key) ?
                obj.data :
                obj.data[HIDDEN_FIELD_NAME] :
            obj.data;
        return super.getFieldValue(data, key, isDate, isTime);
    }
}
/** @hidden */
export class IgxTreeGridGroupingPipe {
    transform(collection, groupingExpressions, groupKey, childDataKey, grid, aggregations) {
        if (groupingExpressions.length === 0) {
            return collection;
        }
        if (groupKey?.toLowerCase() === childDataKey?.toLowerCase()) {
            throw new Error('Group key and child data key cannot be the same.');
        }
        this.grid = grid;
        const result = [];
        const groupedRecords = this.groupByMultiple(collection, groupingExpressions);
        this.flattenGrouping(groupedRecords, groupKey, childDataKey, result, aggregations);
        return result;
    }
    flattenGrouping(groupRecords, groupKey, childDataKey, data, aggregations = []) {
        for (const groupRecord of groupRecords) {
            const parent = {};
            const children = groupRecord.records;
            parent[childDataKey] = [];
            for (const aggregation of aggregations) {
                parent[aggregation.field] = aggregation.aggregate(parent, children);
            }
            parent[groupKey] = groupRecord.value + ` (${groupRecord.records.length})`;
            parent[HIDDEN_FIELD_NAME] = { [groupRecord.key]: groupRecord.value };
            data.push(parent);
            if (groupRecord.groups) {
                this.flattenGrouping(groupRecord.groups, groupKey, childDataKey, parent[childDataKey], aggregations);
            }
            else {
                parent[childDataKey] = children;
            }
        }
    }
    groupByMultiple(array, groupingExpressions, index = 0) {
        const res = this.groupBy(array, groupingExpressions[index]);
        if (index + 1 < groupingExpressions.length) {
            for (const groupByRecord of res) {
                groupByRecord.groups = this.groupByMultiple(groupByRecord.records, groupingExpressions, index + 1);
            }
        }
        return res;
    }
    groupBy(array, groupingExpression) {
        const key = groupingExpression.fieldName;
        const column = this.grid?.getColumnByName(key);
        const isDateTime = column?.dataType === GridColumnDataType.Date ||
            column?.dataType === GridColumnDataType.DateTime ||
            column?.dataType === GridColumnDataType.Time;
        const map = new Map();
        for (const record of array) {
            const value = isDateTime
                ? formatDate(record[key], column.pipeArgs.format, this.grid.locale)
                : record[key];
            let valueCase = value;
            let groupByRecord;
            if (groupingExpression.ignoreCase) {
                valueCase = value?.toString().toLowerCase();
            }
            if (map.has(valueCase)) {
                groupByRecord = map.get(valueCase);
            }
            else {
                groupByRecord = new GroupByRecord();
                groupByRecord.key = key;
                groupByRecord.value = value;
                groupByRecord.records = [];
                map.set(valueCase, groupByRecord);
            }
            groupByRecord.records.push(record);
        }
        return Array.from(map.values());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTreeGridGroupingPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxTreeGridGroupingPipe, isStandalone: true, name: "treeGridGrouping" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTreeGridGroupingPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'treeGridGrouping',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,