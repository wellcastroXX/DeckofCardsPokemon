import { Directive, Input } from '@angular/core';
import { IgxDragDirective } from '../../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./moving.service";
import * as i2 from "../../core/utils";
/**
 * @hidden
 * @internal
 */
export class IgxColumnMovingDragDirective extends IgxDragDirective {
    get draggable() {
        return this.column && (this.column.grid.moving || (this.column.groupable && !this.column.columnGroup));
    }
    get icon() {
        return this.cms.icon;
    }
    constructor(element, viewContainer, zone, renderer, cdr, cms, _platformUtil) {
        super(cdr, element, viewContainer, zone, renderer, _platformUtil);
        this.cms = cms;
        this._ghostClass = 'igx-grid__drag-ghost-image';
        this.ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        this.ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
        this.columnSelectedClass = 'igx-grid-th--selected';
        this.ghostClass = this._ghostClass;
    }
    ngOnDestroy() {
        this._unsubscribe();
        super.ngOnDestroy();
    }
    onEscape(event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    }
    onPointerDown(event) {
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        super.onPointerDown(event);
    }
    onPointerMove(event) {
        if (this._clicked && !this._dragStarted) {
            this._removeOnDestroy = false;
            this.cms.column = this.column;
            this.column.grid.cdr.detectChanges();
            const movingStartArgs = {
                source: this.column
            };
            this.column.grid.columnMovingStart.emit(movingStartArgs);
            this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev) => {
                if (ev.key === this.platformUtil.KEYMAP.ESCAPE) {
                    this.onEscape(ev);
                }
            });
        }
        super.onPointerMove(event);
        if (this._dragStarted && this.ghostElement && !this.cms.column) {
            this.cms.column = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.cms.column) {
            const args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.columnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    }
    onPointerUp(event) {
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(() => {
            super.onPointerUp(event);
            this.cms.column = null;
            this.column.grid.cdr.detectChanges();
        });
        this._unsubscribe();
    }
    createGhost(pageX, pageY) {
        super.createGhost(pageX, pageY);
        this.ghostElement.style.height = null;
        this.ghostElement.style.minWidth = null;
        this.ghostElement.style.flexBasis = null;
        this.ghostElement.style.position = null;
        this.ghostElement.classList.remove(this.columnSelectedClass);
        const icon = document.createElement('i');
        const text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        if (!this.column.columnGroup) {
            icon.classList.add(this.ghostImgIconClass);
            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
        else {
            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);
            icon.classList.add(this.ghostImgIconGroupClass);
            this.ghostElement.children[0].style.paddingLeft = '0px';
            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);
            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);
        }
    }
    _unsubscribe() {
        if (this.subscription$) {
            this.subscription$.unsubscribe();
            this.subscription$ = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnMovingDragDirective, deps: [{ token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i1.IgxColumnMovingService }, { token: i2.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxColumnMovingDragDirective, isStandalone: true, selector: "[igxColumnMovingDrag]", inputs: { column: ["igxColumnMovingDrag", "column"] }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxColumnMovingDragDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxColumnMovingDrag]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1.IgxColumnMovingService }, { type: i2.PlatformUtil }], propDecorators: { column: [{
                type: Input,
                args: ['igxColumnMovingDrag']
            }] } });
//# sourceMappingURL=data:application/json;base64,