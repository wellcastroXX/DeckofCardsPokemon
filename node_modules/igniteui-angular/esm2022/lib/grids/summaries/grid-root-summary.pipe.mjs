import { Inject, Pipe } from '@angular/core';
import { IGX_GRID_BASE } from '../common/grid.interface';
import * as i0 from "@angular/core";
export class IgxSummaryDataPipe {
    constructor(grid) {
        this.grid = grid;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    transform(id, trigger = 0) {
        const summaryService = this.grid.summaryService;
        return summaryService.calculateSummaries(summaryService.rootSummaryID, this.grid.gridAPI.get_summary_data());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxSummaryDataPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxSummaryDataPipe, isStandalone: true, name: "igxGridSummaryDataPipe" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxSummaryDataPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxGridSummaryDataPipe',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1yb290LXN1bW1hcnkucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9zdW1tYXJpZXMvZ3JpZC1yb290LXN1bW1hcnkucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFZLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDOztBQU1uRSxNQUFNLE9BQU8sa0JBQWtCO0lBRTNCLFlBQTJDLElBQWM7UUFBZCxTQUFJLEdBQUosSUFBSSxDQUFVO0lBQUksQ0FBQztJQUU5RCw2REFBNkQ7SUFDdEQsU0FBUyxDQUFDLEVBQVUsRUFBRSxPQUFPLEdBQUcsQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNoRCxPQUFPLGNBQWMsQ0FBQyxrQkFBa0IsQ0FDcEMsY0FBYyxDQUFDLGFBQWEsRUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FDdkMsQ0FBQztJQUNOLENBQUM7OEdBWFEsa0JBQWtCLGtCQUVQLGFBQWE7NEdBRnhCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFKOUIsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsd0JBQXdCO29CQUM5QixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OzBCQUdnQixNQUFNOzJCQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyaWRUeXBlLCBJR1hfR1JJRF9CQVNFIH0gZnJvbSAnLi4vY29tbW9uL2dyaWQuaW50ZXJmYWNlJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICdpZ3hHcmlkU3VtbWFyeURhdGFQaXBlJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneFN1bW1hcnlEYXRhUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChJR1hfR1JJRF9CQVNFKSBwcml2YXRlIGdyaWQ6IEdyaWRUeXBlKSB7IH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBwdWJsaWMgdHJhbnNmb3JtKGlkOiBzdHJpbmcsIHRyaWdnZXIgPSAwKSB7XG4gICAgICAgIGNvbnN0IHN1bW1hcnlTZXJ2aWNlID0gdGhpcy5ncmlkLnN1bW1hcnlTZXJ2aWNlO1xuICAgICAgICByZXR1cm4gc3VtbWFyeVNlcnZpY2UuY2FsY3VsYXRlU3VtbWFyaWVzKFxuICAgICAgICAgICAgc3VtbWFyeVNlcnZpY2Uucm9vdFN1bW1hcnlJRCxcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5ncmlkQVBJLmdldF9zdW1tYXJ5X2RhdGEoKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==