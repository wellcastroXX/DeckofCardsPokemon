import { Directive } from '@angular/core';
import { ConnectedPositioningStrategy } from '../services/public_api';
import { VerticalAlignment } from '../services/overlay/utilities';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
import { scaleInVerBottom, scaleInVerTop } from 'igniteui-angular/animations';
import * as i0 from "@angular/core";
export class IgxGridBodyDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridBodyDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxGridBodyDirective, isStandalone: true, selector: "[igxGridBody]", providers: [IgxForOfSyncService], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGridBodyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxGridBody]',
                    providers: [IgxForOfSyncService],
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class RowEditPositionStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.isTop = false;
        this.isTopInitialPosition = null;
    }
    position(contentElement, size, document, initialCall, target) {
        const container = this.settings.container; // grid.tbody
        const targetElement = target || this.settings.target; // current grid.row
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                targetElement.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = targetElement.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        super.position(contentElement, { width: targetElement.clientWidth, height: targetElement.clientHeight }, document, initialCall, targetElement);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvZ3JpZC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQTJCLE1BQU0sK0JBQStCLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQVE5RSxNQUFNLE9BQU8sb0JBQW9COzhHQUFwQixvQkFBb0I7a0dBQXBCLG9CQUFvQiw0REFIbEIsQ0FBQyxtQkFBbUIsQ0FBQzs7MkZBR3ZCLG9CQUFvQjtrQkFMaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ2hDLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFXRDs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSw0QkFBNEI7SUFBekU7O1FBQ1csVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLHlCQUFvQixHQUFHLElBQUksQ0FBQztJQXdCdkMsQ0FBQztJQXRCbUIsUUFBUSxDQUFDLGNBQTJCLEVBQUUsSUFBdUMsRUFBRSxRQUFtQixFQUFFLFdBQXFCLEVBQ2pJLE1BQTRCO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYTtRQUN4RCxNQUFNLGFBQWEsR0FBZ0IsTUFBcUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQXFCLENBQUMsQ0FBQyxtQkFBbUI7UUFFcEgsc0VBQXNFO1FBQ3RFLDhGQUE4RjtRQUM5RiwwSEFBMEg7UUFDMUgsMEdBQTBHO1FBQzFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixLQUFLLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQzNCLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU07Z0JBQ3BDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFckcsK0ZBQStGO1FBQy9GLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUNuSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBRTVFLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxZQUFZLEVBQUUsRUFDM0YsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi9zZXJ2aWNlcy9wdWJsaWNfYXBpJztcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25tZW50LCBQb3NpdGlvblNldHRpbmdzLCBQb2ludCB9IGZyb20gJy4uL3NlcnZpY2VzL292ZXJsYXkvdXRpbGl0aWVzJztcbmltcG9ydCB7IElneEZvck9mU3luY1NlcnZpY2UgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2Zvci1vZi9mb3Jfb2Yuc3luYy5zZXJ2aWNlJztcbmltcG9ydCB7IHNjYWxlSW5WZXJCb3R0b20sIHNjYWxlSW5WZXJUb3AgfSBmcm9tICdpZ25pdGV1aS1hbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRCb2R5XScsXG4gICAgcHJvdmlkZXJzOiBbSWd4Rm9yT2ZTeW5jU2VydmljZV0sXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkQm9keURpcmVjdGl2ZSB7fVxuXG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvd0VkaXRQb3NpdGlvblNldHRpbmdzIGV4dGVuZHMgUG9zaXRpb25TZXR0aW5ncyB7XG4gICAgY29udGFpbmVyPzogSFRNTEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgUm93RWRpdFBvc2l0aW9uU3RyYXRlZ3kgZXh0ZW5kcyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5IHtcbiAgICBwdWJsaWMgaXNUb3AgPSBmYWxzZTtcbiAgICBwdWJsaWMgaXNUb3BJbml0aWFsUG9zaXRpb24gPSBudWxsO1xuICAgIHB1YmxpYyBvdmVycmlkZSBzZXR0aW5nczogUm93RWRpdFBvc2l0aW9uU2V0dGluZ3M7XG4gICAgcHVibGljIG92ZXJyaWRlIHBvc2l0aW9uKGNvbnRlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgc2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9LCBkb2N1bWVudD86IERvY3VtZW50LCBpbml0aWFsQ2FsbD86IGJvb2xlYW4sXG4gICAgICAgICAgICB0YXJnZXQ/OiBQb2ludCB8IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuc2V0dGluZ3MuY29udGFpbmVyOyAvLyBncmlkLnRib2R5XG4gICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdGFyZ2V0IGFzIEhUTUxFbGVtZW50IHx8IHRoaXMuc2V0dGluZ3MudGFyZ2V0IGFzIEhUTUxFbGVtZW50OyAvLyBjdXJyZW50IGdyaWQucm93XG5cbiAgICAgICAgLy8gUG9zaXRpb24gb2YgdGhlIG92ZXJsYXkgZGVwZW5kcyBvbiB0aGUgYXZhaWxhYmxlIHNwYWNlIGluIHRoZSBncmlkLlxuICAgICAgICAvLyBJZiB0aGUgYm90dG9tIHNwYWNlIGlzIG5vdCBlbm91Z2ggdGhlbiB0aGUgdGhlIHJvdyBvdmVybGF5IHdpbGwgc2hvdyBhdCB0aGUgdG9wIG9mIHRoZSByb3cuXG4gICAgICAgIC8vIE9uY2Ugc2hvd24sIGVpdGhlciB0b3Agb3IgYm90dG9tLCB0aGVuIHRoaXMgcG9zaXRpb24gc3RheXMgdW50aWwgdGhlIG92ZXJsYXkgaXMgY2xvc2VkIChpc1RvcEluaXRpYWxQb3NpdGlvbiBwcm9wZXJ0eSksXG4gICAgICAgIC8vIHdoaWNoIG1lYW5zIHRoYXQgd2hlbiBzY3JvbGxpbmcgdGhlbiBvdmVybGF5IG1heSBoaWRlLCB3aGlsZSB0aGUgcm93IGlzIHN0aWxsIHZpc2libGUgKFVYIHJlcXVpcmVtZW50KS5cbiAgICAgICAgdGhpcy5pc1RvcCA9IHRoaXMuaXNUb3BJbml0aWFsUG9zaXRpb24gIT09IG51bGwgP1xuICAgICAgICAgICAgdGhpcy5pc1RvcEluaXRpYWxQb3NpdGlvbiA6XG4gICAgICAgICAgICBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDxcbiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSArIGNvbnRlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICAvLyBTZXQgd2lkdGggb2YgdGhlIHJvdyBlZGl0aW5nIG92ZXJsYXkgdG8gZXF1YWwgcm93IHdpZHRoLCBvdGhlcndpc2UgaXQgZml0cyAxMDAlIG9mIHRoZSBncmlkLlxuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS53aWR0aCA9IHRhcmdldEVsZW1lbnQuY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLnNldHRpbmdzLnZlcnRpY2FsU3RhcnRQb2ludCA9IHRoaXMuc2V0dGluZ3MudmVydGljYWxEaXJlY3Rpb24gPSB0aGlzLmlzVG9wID8gVmVydGljYWxBbGlnbm1lbnQuVG9wIDogVmVydGljYWxBbGlnbm1lbnQuQm90dG9tO1xuICAgICAgICB0aGlzLnNldHRpbmdzLm9wZW5BbmltYXRpb24gPSB0aGlzLmlzVG9wID8gc2NhbGVJblZlckJvdHRvbSA6IHNjYWxlSW5WZXJUb3A7XG5cbiAgICAgICAgc3VwZXIucG9zaXRpb24oY29udGVudEVsZW1lbnQsIHsgd2lkdGg6IHRhcmdldEVsZW1lbnQuY2xpZW50V2lkdGgsIGhlaWdodDogdGFyZ2V0RWxlbWVudC5jbGllbnRIZWlnaHQgfSxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQsIGluaXRpYWxDYWxsLCB0YXJnZXRFbGVtZW50KTtcbiAgICB9XG59XG4iXX0=