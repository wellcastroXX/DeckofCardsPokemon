import { Inject, Pipe } from '@angular/core';
import { cloneArray, resolveNestedPath } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { DefaultPivotGridRecordSortingStrategy } from '../../data-operations/pivot-sort-strategy';
import { FilterUtil } from '../../data-operations/filtering-strategy';
import { DimensionValuesFilteringStrategy, PivotColumnDimensionsStrategy, PivotRowDimensionsStrategy } from '../../data-operations/pivot-strategy';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { DEFAULT_PIVOT_KEYS } from './pivot-grid.interface';
import { PivotSortUtil } from './pivot-sort-util';
import { PivotUtil } from './pivot-util';
import * as i0 from "@angular/core";
import * as i1 from "../api.service";
/**
 * @hidden
 */
export class IgxPivotRowPipe {
    constructor() { }
    transform(collection, config, cloneStrategy, _, _pipeTrigger, __) {
        const pivotKeys = config.pivotKeys || DEFAULT_PIVOT_KEYS;
        const enabledRows = config.rows?.filter(x => x.enabled) || [];
        const enabledColumns = config.columns?.filter(x => x.enabled) || [];
        const enabledValues = config.values?.filter(x => x.enabled) || [];
        if (enabledRows.length === 0 && enabledColumns.length === 0 && enabledValues.length === 0) {
            // nothing to group and aggregate by ...
            return [];
        }
        const rowStrategy = config.rowStrategy || PivotRowDimensionsStrategy.instance();
        const data = cloneArray(collection, true);
        return rowStrategy.process(data, enabledRows, config.values, cloneStrategy, pivotKeys);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowPipe, isStandalone: true, name: "pivotGridRow" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridRow',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: () => [] });
/**
 * @hidden
 * Transforms generic array data into IPivotGridRecord[]
 */
export class IgxPivotAutoTransform {
    transform(collection, config, _pipeTrigger, __) {
        let needsTransformation = false;
        if (collection.length > 0) {
            needsTransformation = !this.isPivotRecord(collection[0]);
        }
        if (!needsTransformation)
            return collection;
        const res = this.processCollectionToPivotRecord(config, collection);
        return res;
    }
    isPivotRecord(arg) {
        return !!arg.aggregationValues;
    }
    processCollectionToPivotRecord(config, collection) {
        const pivotKeys = config.pivotKeys || DEFAULT_PIVOT_KEYS;
        const enabledRows = config.rows.filter(x => x.enabled);
        const allFlat = PivotUtil.flatten(enabledRows);
        const result = [];
        for (const rec of collection) {
            const pivotRec = {
                dimensionValues: new Map(),
                aggregationValues: new Map(),
                children: new Map(),
                dimensions: []
            };
            const keys = Object.keys(rec);
            for (const key of keys) {
                const dim = allFlat.find(x => x.memberName === key);
                if (dim) {
                    //field has matching dimension
                    pivotRec.dimensions.push(dim);
                    pivotRec.dimensionValues.set(key, rec[key]);
                }
                else if (key.indexOf(pivotKeys.rowDimensionSeparator + pivotKeys.records) !== -1) {
                    // field that contains child collection
                    const dimKey = key.slice(0, key.indexOf(pivotKeys.rowDimensionSeparator + pivotKeys.records));
                    const childData = rec[key];
                    const childPivotData = this.processCollectionToPivotRecord(config, childData);
                    pivotRec.children.set(dimKey, childPivotData);
                }
                else {
                    // an aggregation
                    pivotRec.aggregationValues.set(key, rec[key]);
                }
            }
            const flattened = PivotUtil.flatten(config.rows);
            pivotRec.dimensions.sort((x, y) => flattened.indexOf(x) - flattened.indexOf(y));
            result.push(pivotRec);
        }
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotAutoTransform, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotAutoTransform, isStandalone: true, name: "pivotGridAutoTransform" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotAutoTransform, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridAutoTransform',
                    pure: true,
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class IgxPivotRowExpansionPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, config, expansionStates, defaultExpand, _pipeTrigger, __) {
        const enabledRows = config.rows?.filter(x => x.enabled) || [];
        const data = collection ? cloneArray(collection, true) : [];
        for (const row of enabledRows) {
            PivotUtil.flattenGroups(data, row, expansionStates, defaultExpand);
        }
        const finalData = enabledRows.length > 0 ?
            data.filter(x => x.dimensions.length === enabledRows.length) : data;
        if (this.grid) {
            this.grid.setFilteredSortedData(finalData, false);
        }
        return finalData;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowExpansionPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowExpansionPipe, isStandalone: true, name: "pivotGridRowExpansion" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotRowExpansionPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridRowExpansion',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }] });
/**
 * @hidden
 */
export class IgxPivotCellMergingPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, config, dim, _pipeTrigger) {
        if (collection.length === 0 || config.rows.length === 0)
            return collection;
        const data = collection ? cloneArray(collection, true) : [];
        const res = [];
        const enabledRows = config.rows?.filter(x => x.enabled);
        let groupData = [];
        let prevId;
        const index = enabledRows.indexOf(dim);
        for (const rec of data) {
            const currentDim = rec.dimensions[index];
            const id = PivotUtil.getRecordKey(rec, currentDim);
            if (groupData.length > 0 && prevId !== id) {
                const h = groupData.length > 1 ? groupData.length * this.grid.renderedRowHeight : undefined;
                groupData[0].height = h;
                groupData[0].rowSpan = groupData.length;
                res.push(groupData[0]);
                groupData = [];
            }
            groupData.push(rec);
            prevId = id;
        }
        if (groupData.length > 0) {
            const h = groupData.length > 1 ? groupData.length * this.grid.rowHeight + (groupData.length - 1) + 1 : undefined;
            groupData[0].height = h;
            groupData[0].rowSpan = groupData.length;
            res.push(groupData[0]);
        }
        return res;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotCellMergingPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotCellMergingPipe, isStandalone: true, name: "pivotGridCellMerging" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotCellMergingPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridCellMerging',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }] });
/**
 * @hidden
 */
export class IgxPivotColumnPipe {
    transform(collection, config, cloneStrategy, _, _pipeTrigger, __) {
        const pivotKeys = config.pivotKeys || DEFAULT_PIVOT_KEYS;
        const enabledColumns = config.columns?.filter(x => x.enabled) || [];
        const enabledValues = config.values?.filter(x => x.enabled) || [];
        const colStrategy = config.columnStrategy || PivotColumnDimensionsStrategy.instance();
        const data = cloneArray(collection, true);
        return colStrategy.process(data, enabledColumns, enabledValues, cloneStrategy, pivotKeys);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnPipe, isStandalone: true, name: "pivotGridColumn" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotColumnPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridColumn',
                    pure: true,
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class IgxPivotGridFilterPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, config, filterStrategy, advancedExpressionsTree, _filterPipeTrigger, _pipeTrigger) {
        const expressionsTree = PivotUtil.buildExpressionTree(config);
        const state = {
            expressionsTree,
            strategy: filterStrategy || new DimensionValuesFilteringStrategy(),
            advancedExpressionsTree
        };
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            return collection;
        }
        const result = FilterUtil.filter(cloneArray(collection, true), state, this.gridAPI.grid);
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridFilterPipe, deps: [{ token: i1.GridBaseAPIService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridFilterPipe, isStandalone: true, name: "pivotGridFilter" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridFilterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridFilter',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.GridBaseAPIService }] });
/**
 * @hidden
 */
export class IgxPivotGridColumnSortingPipe {
    transform(collection, expressions, sorting, _pipeTrigger) {
        let result;
        if (!expressions.length) {
            result = collection;
        }
        else {
            for (const expr of expressions) {
                expr.strategy = DefaultPivotGridRecordSortingStrategy.instance();
            }
            result = PivotUtil.sort(cloneArray(collection, true), expressions, sorting);
        }
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridColumnSortingPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridColumnSortingPipe, isStandalone: true, name: "pivotGridColumnSort" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridColumnSortingPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridColumnSort',
                    pure: true,
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class IgxPivotGridSortingPipe {
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    transform(collection, config, sorting, _pipeTrigger) {
        let result;
        const allDimensions = config.rows || [];
        const enabledDimensions = allDimensions.filter(x => x && x.enabled);
        const expressions = PivotSortUtil.generateDimensionSortingExpressions(enabledDimensions);
        if (!expressions.length) {
            result = collection;
        }
        else {
            result = DataUtil.sort(cloneArray(collection, true), expressions, sorting, this.gridAPI.grid);
        }
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridSortingPipe, deps: [{ token: i1.GridBaseAPIService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridSortingPipe, isStandalone: true, name: "pivotGridSort" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridSortingPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'pivotGridSort',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.GridBaseAPIService }] });
/**
 * @hidden
 */
export class IgxFilterPivotItemsPipe {
    transform(collection, filterCriteria, _pipeTrigger) {
        if (!collection) {
            return collection;
        }
        let copy = collection.slice(0);
        if (filterCriteria && filterCriteria.length > 0) {
            const filterFunc = (c) => {
                const filterText = c.member || c.memberName;
                if (!filterText) {
                    return false;
                }
                return (filterText
                    .toLocaleLowerCase()
                    .indexOf(filterCriteria.toLocaleLowerCase()) >= 0 ||
                    (c.children?.some(filterFunc) ?? false));
            };
            copy = collection.filter(filterFunc);
        }
        return copy;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFilterPivotItemsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxFilterPivotItemsPipe, isStandalone: true, name: "filterPivotItems" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxFilterPivotItemsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "filterPivotItems",
                    standalone: true
                }]
        }] });
export class IgxPivotGridCellStyleClassesPipe {
    transform(cssClasses, _, rowData, columnData, index, __) {
        if (!cssClasses) {
            return '';
        }
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            const callbackOrValue = cssClasses[cssClass];
            const apply = typeof callbackOrValue === 'function' ?
                callbackOrValue(rowData, columnData, resolveNestedPath(rowData, columnData.field), index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridCellStyleClassesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridCellStyleClassesPipe, isStandalone: true, name: "igxPivotCellStyleClasses" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxPivotGridCellStyleClassesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxPivotCellStyleClasses',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,