import { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxTimeSummaryOperand } from '../summaries/grid-summary';
export class IgxPivotAggregate {
    /**
     * Gets array with default aggregator function for base aggregation.
     * ```typescript
     * IgxPivotAggregate.aggregators();
     * ```
     *
     * @memberof IgxPivotAggregate
     */
    static aggregators() {
        return [{
                key: 'COUNT',
                label: 'Count',
                aggregator: IgxPivotAggregate.count
            }];
    }
    /**
     * Counts all the records in the data source.
     * If filtering is applied, counts only the filtered records.
     * ```typescript
     * IgxSummaryOperand.count(dataSource);
     * ```
     *
     * @memberof IgxPivotAggregate
     */
    static count(members) {
        return members.length;
    }
}
export class IgxPivotNumericAggregate extends IgxPivotAggregate {
    /**
     * Gets array with default aggregator function for numeric aggregation.
     * ```typescript
     * IgxPivotAggregate.aggregators();
     * ```
     *
     * @memberof IgxPivotAggregate
     */
    static aggregators() {
        let result = [];
        result = result.concat(super.aggregators());
        result.push({
            key: 'MIN',
            label: 'Minimum',
            aggregator: IgxPivotNumericAggregate.min
        });
        result.push({
            key: 'MAX',
            label: 'Maximum',
            aggregator: IgxPivotNumericAggregate.max
        });
        result.push({
            key: 'SUM',
            label: 'Sum',
            aggregator: IgxPivotNumericAggregate.sum
        });
        result.push({
            key: 'AVG',
            label: 'Average',
            aggregator: IgxPivotNumericAggregate.average
        });
        return result;
    }
    /**
     * Returns the minimum numeric value in the provided data records.
     * If filtering is applied, returns the minimum value in the filtered data records.
     * ```typescript
     * IgxPivotNumericAggregate.min(members, data);
     * ```
     *
     * @memberof IgxPivotNumericAggregate
     */
    static min(members) {
        return IgxNumberSummaryOperand.min(members);
    }
    /**
     * Returns the maximum numeric value in the provided data records.
     * If filtering is applied, returns the maximum value in the filtered data records.
     * ```typescript
     * IgxPivotNumericAggregate.max(data);
     * ```
     *
     * @memberof IgxPivotNumericAggregate
     */
    static max(members) {
        return IgxNumberSummaryOperand.max(members);
    }
    /**
     * Returns the sum of the numeric values in the provided data records.
     * If filtering is applied, returns the sum of the numeric values in the data records.
     * ```typescript
     * IgxPivotNumericAggregate.sum(data);
     * ```
     *
     * @memberof IgxPivotNumericAggregate
     */
    static sum(members) {
        return IgxNumberSummaryOperand.sum(members);
    }
    /**
     * Returns the average numeric value in the data provided data records.
     * If filtering is applied, returns the average numeric value in the filtered data records.
     * ```typescript
     * IgxPivotNumericAggregate.average(data);
     * ```
     *
     * @memberof IgxPivotNumericAggregate
     */
    static average(members) {
        return IgxNumberSummaryOperand.average(members);
    }
}
export class IgxPivotDateAggregate extends IgxPivotAggregate {
    /**
     * Gets array with default aggregator function for date aggregation.
     * ```typescript
     * IgxPivotDateAggregate.aggregators();
     * ```
     *
     * @memberof IgxPivotAggregate
     */
    static aggregators() {
        let result = [];
        result = result.concat(super.aggregators());
        result.push({
            key: 'LATEST',
            label: 'Latest Date',
            aggregator: IgxPivotDateAggregate.latest
        });
        result.push({
            key: 'EARLIEST',
            label: 'Earliest Date',
            aggregator: IgxPivotDateAggregate.earliest
        });
        return result;
    }
    /**
     * Returns the latest date value in the data records.
     * If filtering is applied, returns the latest date value in the filtered data records.
     * ```typescript
     * IgxPivotDateAggregate.latest(data);
     * ```
     *
     * @memberof IgxPivotDateAggregate
     */
    static latest(members) {
        return IgxDateSummaryOperand.latest(members);
    }
    /**
     * Returns the earliest date value in the data records.
     * If filtering is applied, returns the latest date value in the filtered data records.
     * ```typescript
     * IgxPivotDateAggregate.earliest(data);
     * ```
     *
     * @memberof IgxPivotDateAggregate
     */
    static earliest(members) {
        return IgxDateSummaryOperand.earliest(members);
    }
}
export class IgxPivotTimeAggregate extends IgxPivotAggregate {
    /**
     * Gets array with default aggregator function for time aggregation.
     * ```typescript
     * IgxPivotTimeAggregate.aggregators();
     * ```
     *
     * @memberof IgxPivotAggregate
     */
    static aggregators() {
        let result = [];
        result = result.concat(super.aggregators());
        result.push({
            key: 'LATEST',
            label: 'Latest Time',
            aggregator: IgxPivotTimeAggregate.latestTime
        });
        result.push({
            key: 'EARLIEST',
            label: 'Earliest Time',
            aggregator: IgxPivotTimeAggregate.earliestTime
        });
        return result;
    }
    /**
     * Returns the latest time value in the data records. Compare only the time part of the date.
     * If filtering is applied, returns the latest time value in the filtered data records.
     * ```typescript
     * IgxPivotTimeAggregate.latestTime(data);
     * ```
     *
     * @memberof IgxPivotTimeAggregate
     */
    static latestTime(members) {
        return IgxTimeSummaryOperand.latestTime(members);
    }
    /**
     * Returns the earliest time value in the data records. Compare only the time part of the date.
     * If filtering is applied, returns the earliest time value in the filtered data records.
     * ```typescript
     * IgxPivotTimeAggregate.earliestTime(data);
     * ```
     *
     * @memberof IgxPivotTimeAggregate
     */
    static earliestTime(members) {
        return IgxTimeSummaryOperand.earliestTime(members);
    }
}
//# sourceMappingURL=data:application/json;base64,