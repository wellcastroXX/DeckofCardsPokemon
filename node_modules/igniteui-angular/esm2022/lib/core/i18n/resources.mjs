export class igxI18N {
    constructor() {
        this._currentResourceStrings = {};
    }
    static instance() {
        return this._instance || (this._instance = new this());
    }
    /**
     * Changes the resource strings for all components in the application
     * ```
     * @param resourceStrings to be applied
     */
    changei18n(resourceStrings) {
        for (const key of Object.keys(resourceStrings)) {
            this._currentResourceStrings[key] = resourceStrings[key];
        }
    }
    getCurrentResourceStrings(en) {
        for (const key of Object.keys(en)) {
            if (!this._currentResourceStrings[key]) {
                this._currentResourceStrings[key] = en[key];
            }
        }
        return this._currentResourceStrings;
    }
}
export function getCurrentResourceStrings(en) {
    return igxI18N.instance().getCurrentResourceStrings(en);
}
export function changei18n(resourceStrings) {
    igxI18N.instance().changei18n(resourceStrings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2NvcmUvaTE4bi9yZXNvdXJjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUJBLE1BQU0sT0FBTyxPQUFPO0lBS2hCO1FBRlEsNEJBQXVCLEdBQXFCLEVBQUcsQ0FBQztJQUVoQyxDQUFDO0lBRWxCLE1BQU0sQ0FBQyxRQUFRO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksVUFBVSxDQUFDLGVBQWlDO1FBQy9DLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVEO0lBQ0wsQ0FBQztJQUVNLHlCQUF5QixDQUFDLEVBQW9CO1FBQ2pELEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQy9DO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsRUFBb0I7SUFDMUQsT0FBTyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsZUFBaUM7SUFDeEQsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGVQaWNrZXJSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2RhdGUtcGlja2VyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUdyaWRSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2dyaWQtcmVzb3VyY2VzJztcbmltcG9ydCB7IElUaW1lUGlja2VyUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi90aW1lLXBpY2tlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVBhZ2luYXRvclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vcGFnaW5hdG9yLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJQ2Fyb3VzZWxSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2Nhcm91c2VsLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJQ2hpcFJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vY2hpcC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUxpc3RSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2xpc3QtcmVzb3VyY2VzJztcbmltcG9ydCB7IElDYWxlbmRhclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vY2FsZW5kYXItcmVzb3VyY2VzJztcbmltcG9ydCB7IElJbnB1dFJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vaW5wdXQtcmVzb3VyY2VzJztcbmltcG9ydCB7IElUcmVlUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi90cmVlLXJlc291cmNlcyc7XG5pbXBvcnQgeyBJQWN0aW9uU3RyaXBSZXNvdXJjZVN0cmluZ3MgfSBmcm9tICcuL2FjdGlvbi1zdHJpcC1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSVF1ZXJ5QnVpbGRlclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vcXVlcnktYnVpbGRlci1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUNvbWJvUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi9jb21iby1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgSUJhbm5lclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4vYmFubmVyLXJlc291cmNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlc291cmNlU3RyaW5ncyBleHRlbmRzIElHcmlkUmVzb3VyY2VTdHJpbmdzLCBJVGltZVBpY2tlclJlc291cmNlU3RyaW5ncywgSUNhbGVuZGFyUmVzb3VyY2VTdHJpbmdzLFxuICAgIElDYXJvdXNlbFJlc291cmNlU3RyaW5ncywgSUNoaXBSZXNvdXJjZVN0cmluZ3MsIElDb21ib1Jlc291cmNlU3RyaW5ncywgSUlucHV0UmVzb3VyY2VTdHJpbmdzLCBJRGF0ZVBpY2tlclJlc291cmNlU3RyaW5ncyxcbiAgICBJRGF0ZVJhbmdlUGlja2VyUmVzb3VyY2VTdHJpbmdzLCBJTGlzdFJlc291cmNlU3RyaW5ncywgSVBhZ2luYXRvclJlc291cmNlU3RyaW5ncywgSVRyZWVSZXNvdXJjZVN0cmluZ3MsXG4gICAgSUFjdGlvblN0cmlwUmVzb3VyY2VTdHJpbmdzLCBJUXVlcnlCdWlsZGVyUmVzb3VyY2VTdHJpbmdzLCBJQmFubmVyUmVzb3VyY2VTdHJpbmdzIHsgfVxuXG5leHBvcnQgY2xhc3MgaWd4STE4TiB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBpZ3hJMThOO1xuXG4gICAgcHJpdmF0ZSBfY3VycmVudFJlc291cmNlU3RyaW5nczogSVJlc291cmNlU3RyaW5ncyA9IHsgfTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSB8fCAodGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSByZXNvdXJjZSBzdHJpbmdzIGZvciBhbGwgY29tcG9uZW50cyBpbiB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2VTdHJpbmdzIHRvIGJlIGFwcGxpZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY2hhbmdlaTE4bihyZXNvdXJjZVN0cmluZ3M6IElSZXNvdXJjZVN0cmluZ3MpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVzb3VyY2VTdHJpbmdzKSkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlc291cmNlU3RyaW5nc1trZXldID0gcmVzb3VyY2VTdHJpbmdzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VycmVudFJlc291cmNlU3RyaW5ncyhlbjogSVJlc291cmNlU3RyaW5ncyk6IElSZXNvdXJjZVN0cmluZ3Mge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhlbikpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY3VycmVudFJlc291cmNlU3RyaW5nc1trZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFJlc291cmNlU3RyaW5nc1trZXldID0gZW5ba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFJlc291cmNlU3RyaW5ncztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50UmVzb3VyY2VTdHJpbmdzKGVuOiBJUmVzb3VyY2VTdHJpbmdzKSB7XG4gICAgcmV0dXJuIGlneEkxOE4uaW5zdGFuY2UoKS5nZXRDdXJyZW50UmVzb3VyY2VTdHJpbmdzKGVuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZWkxOG4ocmVzb3VyY2VTdHJpbmdzOiBJUmVzb3VyY2VTdHJpbmdzKSB7XG4gICAgaWd4STE4Ti5pbnN0YW5jZSgpLmNoYW5nZWkxOG4ocmVzb3VyY2VTdHJpbmdzKTtcbn1cbiJdfQ==