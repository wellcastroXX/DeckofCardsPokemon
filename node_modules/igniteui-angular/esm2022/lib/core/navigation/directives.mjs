import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./nav.service";
/**
 * Directive that can toggle targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button type="button" igxNavToggle="ID">Toggle</button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
export class IgxNavigationToggleDirective {
    constructor(nav) {
        this.state = nav;
    }
    toggleNavigationDrawer() {
        this.state.toggle(this.target, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxNavigationToggleDirective, deps: [{ token: i1.IgxNavigationService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxNavigationToggleDirective, isStandalone: true, selector: "[igxNavToggle]", inputs: { target: ["igxNavToggle", "target"] }, host: { listeners: { "click": "toggleNavigationDrawer()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxNavigationToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxNavToggle]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.IgxNavigationService }], propDecorators: { target: [{
                type: Input,
                args: ['igxNavToggle']
            }], toggleNavigationDrawer: [{
                type: HostListener,
                args: ['click']
            }] } });
/**
 * Directive that can close targets through provided NavigationService.
 *
 * Usage:
 * ```
 * <button type="button" igxNavClose="ID">Close</button>
 * ```
 * Where the `ID` matches the ID of compatible `IToggleView` component.
 */
export class IgxNavigationCloseDirective {
    constructor(nav) {
        this.state = nav;
    }
    closeNavigationDrawer() {
        this.state.close(this.target, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxNavigationCloseDirective, deps: [{ token: i1.IgxNavigationService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxNavigationCloseDirective, isStandalone: true, selector: "[igxNavClose]", inputs: { target: ["igxNavClose", "target"] }, host: { listeners: { "click": "closeNavigationDrawer()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxNavigationCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxNavClose]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.IgxNavigationService }], propDecorators: { target: [{
                type: Input,
                args: ['igxNavClose']
            }], closeNavigationDrawer: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jb3JlL25hdmlnYXRpb24vZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUcvRDs7Ozs7Ozs7R0FRRztBQUtILE1BQU0sT0FBTyw0QkFBNEI7SUFLckMsWUFBWSxHQUF5QjtRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztJQUNyQixDQUFDO0lBR00sc0JBQXNCO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQzs4R0FaUSw0QkFBNEI7a0dBQTVCLDRCQUE0Qjs7MkZBQTVCLDRCQUE0QjtrQkFKeEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixVQUFVLEVBQUUsSUFBSTtpQkFDbkI7eUZBRWtDLE1BQU07c0JBQXBDLEtBQUs7dUJBQUMsY0FBYztnQkFTZCxzQkFBc0I7c0JBRDVCLFlBQVk7dUJBQUMsT0FBTzs7QUFNekI7Ozs7Ozs7O0dBUUc7QUFLSCxNQUFNLE9BQU8sMkJBQTJCO0lBS3BDLFlBQVksR0FBeUI7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDckIsQ0FBQztJQUdNLHFCQUFxQjtRQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OEdBWlEsMkJBQTJCO2tHQUEzQiwyQkFBMkI7OzJGQUEzQiwyQkFBMkI7a0JBSnZDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjt5RkFFaUMsTUFBTTtzQkFBbkMsS0FBSzt1QkFBQyxhQUFhO2dCQVNiLHFCQUFxQjtzQkFEM0IsWUFBWTt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmF2LnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSB0aGF0IGNhbiB0b2dnbGUgdGFyZ2V0cyB0aHJvdWdoIHByb3ZpZGVkIE5hdmlnYXRpb25TZXJ2aWNlLlxuICpcbiAqIFVzYWdlOlxuICogYGBgXG4gKiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZ3hOYXZUb2dnbGU9XCJJRFwiPlRvZ2dsZTwvYnV0dG9uPlxuICogYGBgXG4gKiBXaGVyZSB0aGUgYElEYCBtYXRjaGVzIHRoZSBJRCBvZiBjb21wYXRpYmxlIGBJVG9nZ2xlVmlld2AgY29tcG9uZW50LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hOYXZUb2dnbGVdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25Ub2dnbGVEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgnaWd4TmF2VG9nZ2xlJykgcHJpdmF0ZSB0YXJnZXQ7XG5cbiAgICBwdWJsaWMgc3RhdGU6IElneE5hdmlnYXRpb25TZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IobmF2OiBJZ3hOYXZpZ2F0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gbmF2O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBwdWJsaWMgdG9nZ2xlTmF2aWdhdGlvbkRyYXdlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS50b2dnbGUodGhpcy50YXJnZXQsIHRydWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBjYW4gY2xvc2UgdGFyZ2V0cyB0aHJvdWdoIHByb3ZpZGVkIE5hdmlnYXRpb25TZXJ2aWNlLlxuICpcbiAqIFVzYWdlOlxuICogYGBgXG4gKiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZ3hOYXZDbG9zZT1cIklEXCI+Q2xvc2U8L2J1dHRvbj5cbiAqIGBgYFxuICogV2hlcmUgdGhlIGBJRGAgbWF0Y2hlcyB0aGUgSUQgb2YgY29tcGF0aWJsZSBgSVRvZ2dsZVZpZXdgIGNvbXBvbmVudC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TmF2Q2xvc2VdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneE5hdmlnYXRpb25DbG9zZURpcmVjdGl2ZSB7XG4gICAgQElucHV0KCdpZ3hOYXZDbG9zZScpIHByaXZhdGUgdGFyZ2V0O1xuXG4gICAgcHVibGljIHN0YXRlOiBJZ3hOYXZpZ2F0aW9uU2VydmljZTtcblxuICAgIGNvbnN0cnVjdG9yKG5hdjogSWd4TmF2aWdhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5hdjtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgcHVibGljIGNsb3NlTmF2aWdhdGlvbkRyYXdlcigpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jbG9zZSh0aGlzLnRhcmdldCwgdHJ1ZSk7XG4gICAgfVxufVxuIl19