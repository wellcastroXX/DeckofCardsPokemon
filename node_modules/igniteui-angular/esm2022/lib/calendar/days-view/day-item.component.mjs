import { Component, Input, Output, EventEmitter, HostBinding, HostListener, booleanAttribute } from '@angular/core';
import { CalendarSelection, isDateInRanges } from '../calendar';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class IgxDayItemComponent {
    /**
     * Returns boolean indicating if the day is selected
     *
     */
    get selected() {
        return this._selected;
    }
    /**
     * Selects the day
     */
    set selected(value) {
        this._selected = value;
    }
    get isCurrentMonth() {
        return this.date.isCurrentMonth;
    }
    get isPreviousMonth() {
        return this.date.isPrevMonth;
    }
    get isNextMonth() {
        return this.date.isNextMonth;
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    get isSelectedCSS() {
        return (!this.isDisabled && this.selected);
    }
    get isInactive() {
        return this.date.isNextMonth || this.date.isPrevMonth;
    }
    get isHidden() {
        return this.hideOutsideDays && this.isInactive;
    }
    get isToday() {
        const today = new Date(Date.now());
        const date = this.date.date;
        if (date.getDate() === today.getDate()) {
            this.nativeElement.setAttribute('aria-current', 'date');
        }
        return (date.getFullYear() === today.getFullYear() &&
            date.getMonth() === today.getMonth() &&
            date.getDate() === today.getDate());
    }
    get isWeekend() {
        const day = this.date.date.getDay();
        return day === 0 || day === 6;
    }
    get isDisabled() {
        if (this.disabledDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.disabledDates);
    }
    get isOutOfRange() {
        if (!this.outOfRangeDates) {
            return false;
        }
        return isDateInRanges(this.date.date, this.outOfRangeDates);
    }
    get isFocusable() {
        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;
    }
    get isWithinRangeCSS() {
        return !this.isSingleSelection && this.isWithinRange;
    }
    get isSpecial() {
        if (this.specialDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.specialDates);
    }
    get isDisabledCSS() {
        return this.isHidden || this.isDisabled || this.isOutOfRange;
    }
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.hideOutsideDays = false;
        this.isLastInRange = false;
        this.isFirstInRange = false;
        this.isWithinRange = false;
        this.dateSelection = new EventEmitter();
        this._selected = false;
    }
    onSelect(event) {
        event.stopPropagation();
        this.dateSelection.emit(this.date);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDayItemComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.2.4", type: IgxDayItemComponent, isStandalone: true, selector: "igx-day-item", inputs: { date: "date", selection: "selection", selected: "selected", disabledDates: "disabledDates", outOfRangeDates: "outOfRangeDates", specialDates: "specialDates", hideOutsideDays: ["hideOutsideDays", "hideOutsideDays", booleanAttribute], isLastInRange: ["isLastInRange", "isLastInRange", booleanAttribute], isFirstInRange: ["isFirstInRange", "isFirstInRange", booleanAttribute], isWithinRange: ["isWithinRange", "isWithinRange", booleanAttribute] }, outputs: { dateSelection: "dateSelection" }, host: { listeners: { "click": "onSelect($event)", "keydown.enter": "onSelect($event)" }, properties: { "class.igx-calendar__date--last": "this.isLastInRange", "class.igx-calendar__date--first": "this.isFirstInRange", "class.igx-calendar__date--selected": "this.isSelectedCSS", "class.igx-calendar__date--inactive": "this.isInactive", "class.igx-calendar__date--hidden": "this.isHidden", "class.igx-calendar__date--current": "this.isToday", "class.igx-calendar__date--weekend": "this.isWeekend", "class.igx-calendar__date--range": "this.isWithinRangeCSS", "class.igx-calendar__date--special": "this.isSpecial", "class.igx-calendar__date--disabled": "this.isDisabledCSS", "class.igx-calendar__date--single": "this.isSingleSelection" } }, ngImport: i0, template: "<span aria-hidden=\"true\" class=\"igx-calendar__date-content\">\n    <ng-content></ng-content>\n</span>\n" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxDayItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-day-item', standalone: true, template: "<span aria-hidden=\"true\" class=\"igx-calendar__date-content\">\n    <ng-content></ng-content>\n</span>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { date: [{
                type: Input
            }], selection: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], outOfRangeDates: [{
                type: Input
            }], specialDates: [{
                type: Input
            }], hideOutsideDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isLastInRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-calendar__date--last']
            }], isFirstInRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-calendar__date--first']
            }], isWithinRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dateSelection: [{
                type: Output
            }], isSelectedCSS: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--selected']
            }], isInactive: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--inactive']
            }], isHidden: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--hidden']
            }], isToday: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--current']
            }], isWeekend: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--weekend']
            }], isWithinRangeCSS: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--range']
            }], isSpecial: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--special']
            }], isDisabledCSS: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--disabled']
            }], isSingleSelection: [{
                type: HostBinding,
                args: ['class.igx-calendar__date--single']
            }], onSelect: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,