import { Pipe } from '@angular/core';
import { Calendar } from './calendar';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class IgxMonthViewSlotsCalendar {
    transform(monthViews) {
        return new Array(monthViews);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxMonthViewSlotsCalendar, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxMonthViewSlotsCalendar, isStandalone: true, name: "IgxMonthViewSlots" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxMonthViewSlotsCalendar, decorators: [{
            type: Pipe,
            args: [{
                    name: 'IgxMonthViewSlots',
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class IgxGetViewDateCalendar {
    constructor() {
        this.calendar = new Calendar();
    }
    transform(index, viewDate, wholeDate = true) {
        const date = this.calendar.timedelta(viewDate, 'month', index);
        return wholeDate ? date : date.getMonth();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGetViewDateCalendar, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.2.4", ngImport: i0, type: IgxGetViewDateCalendar, isStandalone: true, name: "IgxGetViewDate" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxGetViewDateCalendar, decorators: [{
            type: Pipe,
            args: [{
                    name: 'IgxGetViewDate',
                    standalone: true
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLXZpZXcucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9jYWxlbmRhci9tb250aHMtdmlldy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBRXRDOztHQUVHO0FBS0gsTUFBTSxPQUFPLHlCQUF5QjtJQUMzQixTQUFTLENBQUMsVUFBa0I7UUFDL0IsT0FBTyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDOzhHQUhRLHlCQUF5Qjs0R0FBekIseUJBQXlCOzsyRkFBekIseUJBQXlCO2tCQUpyQyxJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxtQkFBbUI7b0JBQ3pCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFPRDs7R0FFRztBQUtILE1BQU0sT0FBTyxzQkFBc0I7SUFFL0I7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUlNLFNBQVMsQ0FBQyxLQUFhLEVBQUUsUUFBYyxFQUFFLFNBQVMsR0FBRyxJQUFJO1FBQzVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlDLENBQUM7OEdBWFEsc0JBQXNCOzRHQUF0QixzQkFBc0I7OzJGQUF0QixzQkFBc0I7a0JBSmxDLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLGdCQUFnQjtvQkFDdEIsVUFBVSxFQUFFLElBQUk7aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICcuL2NhbGVuZGFyJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBQaXBlKHtcbiAgICBuYW1lOiAnSWd4TW9udGhWaWV3U2xvdHMnLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4TW9udGhWaWV3U2xvdHNDYWxlbmRhciBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyB0cmFuc2Zvcm0obW9udGhWaWV3czogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkobW9udGhWaWV3cyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdJZ3hHZXRWaWV3RGF0ZScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHZXRWaWV3RGF0ZUNhbGVuZGFyIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSBjYWxlbmRhcjogQ2FsZW5kYXI7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBuZXcgQ2FsZW5kYXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKGluZGV4OiBudW1iZXIsIHZpZXdEYXRlOiBEYXRlKTogRGF0ZTtcbiAgICBwdWJsaWMgdHJhbnNmb3JtKGluZGV4OiBudW1iZXIsIHZpZXdEYXRlOiBEYXRlLCB3aG9sZURhdGU6IGZhbHNlKTogbnVtYmVyO1xuICAgIHB1YmxpYyB0cmFuc2Zvcm0oaW5kZXg6IG51bWJlciwgdmlld0RhdGU6IERhdGUsIHdob2xlRGF0ZSA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMuY2FsZW5kYXIudGltZWRlbHRhKHZpZXdEYXRlLCAnbW9udGgnLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB3aG9sZURhdGUgPyBkYXRlIDogZGF0ZS5nZXRNb250aCgpO1xuICAgIH1cbn1cbiJdfQ==