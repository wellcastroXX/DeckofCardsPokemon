/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 *
 * @preferred
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { fromEvent, Subject, interval } from 'rxjs';
import { takeUntil, debounce, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../core/utils";
/**
 * @hidden
 */
export class IgxCalendarYearDirective {
    get currentCSS() {
        return this.isCurrentYear;
    }
    get role() {
        return this.isCurrentYear ? 'spinbutton' : null;
    }
    get valuenow() {
        return this.isCurrentYear ? this.date.getFullYear() : null;
    }
    get tabIndex() {
        return this.isCurrentYear ? 0 : -1;
    }
    get isCurrentYear() {
        return this.date.getFullYear() === this.value.getFullYear();
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.yearSelection = new EventEmitter();
    }
    onClick() {
        this.yearSelection.emit(this.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarYearDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxCalendarYearDirective, isStandalone: true, selector: "[igxCalendarYear]", inputs: { value: ["igxCalendarYear", "value"], date: "date" }, outputs: { yearSelection: "yearSelection" }, host: { listeners: { "click": "onClick()" }, properties: { "class.igx-calendar__year--current": "this.currentCSS", "attr.role": "this.role", "attr.aria-valuenow": "this.valuenow", "attr.tabindex": "this.tabIndex" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarYearDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarYear]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { value: [{
                type: Input,
                args: ['igxCalendarYear']
            }], date: [{
                type: Input
            }], yearSelection: [{
                type: Output
            }], currentCSS: [{
                type: HostBinding,
                args: ['class.igx-calendar__year--current']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], valuenow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
export class IgxCalendarMonthDirective {
    get currentCSS() {
        return this.isCurrentMonth;
    }
    get isCurrentMonth() {
        return this.date.getMonth() === this.value.getMonth();
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.monthSelection = new EventEmitter();
    }
    onClick() {
        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());
        this.monthSelection.emit(date);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarMonthDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxCalendarMonthDirective, isStandalone: true, selector: "[igxCalendarMonth]", inputs: { value: ["igxCalendarMonth", "value"], date: "date", index: "index" }, outputs: { monthSelection: "monthSelection" }, host: { listeners: { "click": "onClick()" }, properties: { "class.igx-calendar__month--current": "this.currentCSS" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarMonthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarMonth]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { value: [{
                type: Input,
                args: ['igxCalendarMonth']
            }], date: [{
                type: Input
            }], index: [{
                type: Input
            }], monthSelection: [{
                type: Output
            }], currentCSS: [{
                type: HostBinding,
                args: ['class.igx-calendar__month--current']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
/**
 * @hidden
 */
export class IgxCalendarHeaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarHeaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxCalendarHeaderTemplateDirective, isStandalone: true, selector: "[igxCalendarHeader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarHeaderTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarHeader]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
/**
 * @hidden
 */
export class IgxCalendarSubheaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarSubheaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxCalendarSubheaderTemplateDirective, isStandalone: true, selector: "[igxCalendarSubheader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarSubheaderTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarSubheader]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
/**
 * @hidden
 */
export class IgxCalendarScrollMonthDirective {
    constructor(element, zone, platform) {
        this.element = element;
        this.zone = zone;
        this.platform = platform;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     */
    onMouseDown() {
        this.startScroll();
    }
    /**
     * @hidden
     */
    onMouseUp(event) {
        this.stopScroll(event);
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        fromEvent(this.element.nativeElement, 'keyup').pipe(debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
            this.stopScroll(event);
        });
        this.zone.runOutsideAngular(() => {
            fromEvent(this.element.nativeElement, 'keydown').pipe(tap((event) => {
                if (this.platform.isActivationKey(event)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }), debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
                if (this.platform.isActivationKey(event)) {
                    this.zone.run(() => this.startScroll(true));
                }
            });
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarScrollMonthDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxCalendarScrollMonthDirective, isStandalone: true, selector: "[igxCalendarScrollMonth]", inputs: { startScroll: "startScroll", stopScroll: "stopScroll" }, host: { listeners: { "mousedown": "onMouseDown()", "mouseup": "onMouseUp($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxCalendarScrollMonthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarScrollMonth]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.PlatformUtil }], propDecorators: { startScroll: [{
                type: Input
            }], stopScroll: [{
                type: Input
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown']
            }], onMouseUp: [{
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,