import { Directive } from '@angular/core';
import { mkenum } from '../core/utils';
import * as i0 from "@angular/core";
/**
 * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbFromTemplateDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxThumbFromTemplateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxThumbFromTemplateDirective, isStandalone: true, selector: "[igxSliderThumbFrom]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxThumbFromTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSliderThumbFrom]',
                    standalone: true
                }]
        }] });
/**
 * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}
 *
 * ```html
 * <igx-slider>
 *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>
 * </igx-slider>
 * ```
 *
 * @context {@link IgxSliderComponent.context}
 */
export class IgxThumbToTemplateDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxThumbToTemplateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxThumbToTemplateDirective, isStandalone: true, selector: "[igxSliderThumbTo]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxThumbToTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSliderThumbTo]',
                    standalone: true
                }]
        }] });
/**
 * Template directive that allows you to set a custom template, represeting primary/secondary tick labels of the {@link IgxSliderComponent}
 *
 * @context {@link IgxTicksComponent.context}
 */
export class IgxTickLabelTemplateDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTickLabelTemplateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.4", type: IgxTickLabelTemplateDirective, isStandalone: true, selector: "[igxSliderTickLabel]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTickLabelTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSliderTickLabel]',
                    standalone: true
                }]
        }] });
export const IgxSliderType = /*@__PURE__*/ mkenum({
    /**
     * Slider with single thumb.
     */
    SLIDER: 'slider',
    /**
     *  Range slider with multiple thumbs, that can mark the range.
     */
    RANGE: 'range'
});
export const SliderHandle = /*@__PURE__*/ mkenum({
    FROM: 'from',
    TO: 'to'
});
/**
 * Slider Tick labels Orientation
 */
export const TickLabelsOrientation = /*@__PURE__*/ mkenum({
    Horizontal: 'horizontal',
    TopToBottom: 'toptobottom',
    BottomToTop: 'bottomtotop'
});
/**
 * Slider Ticks orientation
 */
export const TicksOrientation = /*@__PURE__*/ mkenum({
    Top: 'top',
    Bottom: 'bottom',
    Mirror: 'mirror'
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zbGlkZXIvc2xpZGVyLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXZDOzs7Ozs7Ozs7O0dBVUc7QUFLSCxNQUFNLE9BQU8sNkJBQTZCOzhHQUE3Qiw2QkFBNkI7a0dBQTdCLDZCQUE2Qjs7MkZBQTdCLDZCQUE2QjtrQkFKekMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7O0FBR0Q7Ozs7Ozs7Ozs7R0FVRztBQUtILE1BQU0sT0FBTywyQkFBMkI7OEdBQTNCLDJCQUEyQjtrR0FBM0IsMkJBQTJCOzsyRkFBM0IsMkJBQTJCO2tCQUp2QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFHRDs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLDZCQUE2Qjs4R0FBN0IsNkJBQTZCO2tHQUE3Qiw2QkFBNkI7OzJGQUE3Qiw2QkFBNkI7a0JBSnpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsVUFBVSxFQUFFLElBQUk7aUJBQ25COztBQWFELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUEsTUFBTSxDQUFDO0lBQzdDOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNqQixDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFBLE1BQU0sQ0FBQztJQUM1QyxJQUFJLEVBQUUsTUFBTTtJQUNaLEVBQUUsRUFBRSxJQUFJO0NBQ1gsQ0FBQyxDQUFDO0FBR0g7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQUEsTUFBTSxDQUFDO0lBQ3JELFVBQVUsRUFBRSxZQUFZO0lBQ3hCLFdBQVcsRUFBRSxhQUFhO0lBQzFCLFdBQVcsRUFBRSxhQUFhO0NBQzdCLENBQUMsQ0FBQztBQUdIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFBLE1BQU0sQ0FBQztJQUNoRCxHQUFHLEVBQUUsS0FBSztJQUNWLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLE1BQU0sRUFBRSxRQUFRO0NBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWtlbnVtIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5cbi8qKlxuICogVGVtcGxhdGUgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHlvdSB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGUgcmVwcmVzZW50aW5nIHRoZSBsb3dlciBsYWJlbCB2YWx1ZSBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBgYGBodG1sXG4gKiA8aWd4LXNsaWRlcj5cbiAqICA8bmctdGVtcGxhdGUgaWd4U2xpZGVyVGh1bWJGcm9tIGxldC12YWx1ZSBsZXQtbGFiZWxzPnt7dmFsdWV9fTwvbmctdGVtcGxhdGU+XG4gKiA8L2lneC1zbGlkZXI+XG4gKiBgYGBcbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRodW1iRnJvbV0nLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJGcm9tVGVtcGxhdGVEaXJlY3RpdmUge31cblxuLyoqXG4gKiBUZW1wbGF0ZSBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgeW91IHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZSByZXByZXNlbnRpbmcgdGhlIHVwcGVyIGxhYmVsIHZhbHVlIG9mIHRoZSB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50fVxuICpcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtc2xpZGVyPlxuICogIDxuZy10ZW1wbGF0ZSBpZ3hTbGlkZXJUaHVtYlRvIGxldC12YWx1ZSBsZXQtbGFiZWxzPnt7dmFsdWV9fTwvbmctdGVtcGxhdGU+XG4gKiA8L2lneC1zbGlkZXI+XG4gKiBgYGBcbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4U2xpZGVyQ29tcG9uZW50LmNvbnRleHR9XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFNsaWRlclRodW1iVG9dJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneFRodW1iVG9UZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG4vKipcbiAqIFRlbXBsYXRlIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyB5b3UgdG8gc2V0IGEgY3VzdG9tIHRlbXBsYXRlLCByZXByZXNldGluZyBwcmltYXJ5L3NlY29uZGFyeSB0aWNrIGxhYmVscyBvZiB0aGUge0BsaW5rIElneFNsaWRlckNvbXBvbmVudH1cbiAqXG4gKiBAY29udGV4dCB7QGxpbmsgSWd4VGlja3NDb21wb25lbnQuY29udGV4dH1cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4U2xpZGVyVGlja0xhYmVsXScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hUaWNrTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYW5nZVNsaWRlclZhbHVlIHtcbiAgICBsb3dlcjogbnVtYmVyO1xuICAgIHVwcGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNsaWRlclZhbHVlQ2hhbmdlRXZlbnRBcmdzIHtcbiAgICBvbGRWYWx1ZTogbnVtYmVyIHwgSVJhbmdlU2xpZGVyVmFsdWU7XG4gICAgdmFsdWU6IG51bWJlciB8IElSYW5nZVNsaWRlclZhbHVlO1xufVxuXG5leHBvcnQgY29uc3QgSWd4U2xpZGVyVHlwZSA9IC8qQF9fUFVSRV9fKi9ta2VudW0oe1xuICAgIC8qKlxuICAgICAqIFNsaWRlciB3aXRoIHNpbmdsZSB0aHVtYi5cbiAgICAgKi9cbiAgICBTTElERVI6ICdzbGlkZXInLFxuICAgIC8qKlxuICAgICAqICBSYW5nZSBzbGlkZXIgd2l0aCBtdWx0aXBsZSB0aHVtYnMsIHRoYXQgY2FuIG1hcmsgdGhlIHJhbmdlLlxuICAgICAqL1xuICAgIFJBTkdFOiAncmFuZ2UnXG59KTtcbmV4cG9ydCB0eXBlIElneFNsaWRlclR5cGUgPSAodHlwZW9mIElneFNsaWRlclR5cGUpW2tleW9mIHR5cGVvZiBJZ3hTbGlkZXJUeXBlXTtcblxuZXhwb3J0IGNvbnN0IFNsaWRlckhhbmRsZSA9IC8qQF9fUFVSRV9fKi9ta2VudW0oe1xuICAgIEZST006ICdmcm9tJyxcbiAgICBUTzogJ3RvJ1xufSk7XG5leHBvcnQgdHlwZSBTbGlkZXJIYW5kbGUgPSAodHlwZW9mIFNsaWRlckhhbmRsZSlba2V5b2YgdHlwZW9mIFNsaWRlckhhbmRsZV07XG5cbi8qKlxuICogU2xpZGVyIFRpY2sgbGFiZWxzIE9yaWVudGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBUaWNrTGFiZWxzT3JpZW50YXRpb24gPSAvKkBfX1BVUkVfXyovbWtlbnVtKHtcbiAgICBIb3Jpem9udGFsOiAnaG9yaXpvbnRhbCcsXG4gICAgVG9wVG9Cb3R0b206ICd0b3B0b2JvdHRvbScsXG4gICAgQm90dG9tVG9Ub3A6ICdib3R0b210b3RvcCdcbn0pO1xuZXhwb3J0IHR5cGUgVGlja0xhYmVsc09yaWVudGF0aW9uID0gKHR5cGVvZiBUaWNrTGFiZWxzT3JpZW50YXRpb24pW2tleW9mIHR5cGVvZiBUaWNrTGFiZWxzT3JpZW50YXRpb25dO1xuXG4vKipcbiAqIFNsaWRlciBUaWNrcyBvcmllbnRhdGlvblxuICovXG5leHBvcnQgY29uc3QgVGlja3NPcmllbnRhdGlvbiA9IC8qQF9fUFVSRV9fKi9ta2VudW0oe1xuICAgIFRvcDogJ3RvcCcsXG4gICAgQm90dG9tOiAnYm90dG9tJyxcbiAgICBNaXJyb3I6ICdtaXJyb3InXG59KTtcbmV4cG9ydCB0eXBlIFRpY2tzT3JpZW50YXRpb24gPSAodHlwZW9mIFRpY2tzT3JpZW50YXRpb24pW2tleW9mIHR5cGVvZiBUaWNrc09yaWVudGF0aW9uXTtcbiJdfQ==