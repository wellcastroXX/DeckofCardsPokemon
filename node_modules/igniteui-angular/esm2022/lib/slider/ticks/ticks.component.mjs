import { Component, Input, HostBinding, booleanAttribute } from '@angular/core';
import { TicksOrientation, TickLabelsOrientation } from '../slider.common';
import { NgFor, NgClass, NgTemplateOutlet } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class IgxTicksComponent {
    constructor() {
        /**
         * @hidden
         */
        this.ticksClass = true;
    }
    /**
     * @hidden
     */
    get ticksTopClass() {
        return this.ticksOrientation === TicksOrientation.Top;
    }
    /**
     * @hidden
     */
    get hasPrimaryClass() {
        return this.primaryTicks > 0;
    }
    /**
     * @hidden
     */
    get labelsTopToBottomClass() {
        return this.tickLabelsOrientation === TickLabelsOrientation.TopToBottom;
    }
    /**
     * @hidden
     */
    get labelsBottomToTopClass() {
        return this.tickLabelsOrientation === TickLabelsOrientation.BottomToTop;
    }
    /**
     * Returns the template context corresponding to
     * {@link IgxTickLabelTemplateDirective}
     *
     * ```typescript
     * return {
     *  $implicit //returns the value per each tick label.
     *  isPrimery //returns if the tick is primary.
     *  labels // returns the {@link labels} collection.
     *  index // returns the index per each tick of the whole sequence.
     * }
     * ```
     *
     * @param idx the index per each tick label.
     */
    context(idx) {
        return {
            $implicit: this.tickLabel(idx),
            isPrimary: this.isPrimary(idx),
            labels: this.labels,
            index: idx
        };
    }
    /**
     * @hidden
     */
    get ticksLength() {
        return this.primaryTicks > 0 ?
            ((this.primaryTicks - 1) * this.secondaryTicks) + this.primaryTicks :
            this.secondaryTicks > 0 ? this.secondaryTicks : 0;
    }
    hiddenTickLabels(idx) {
        return this.isPrimary(idx) ? this.primaryTickLabels : this.secondaryTickLabels;
    }
    /**
     * @hidden
     */
    isPrimary(idx) {
        return this.primaryTicks <= 0 ? false :
            idx % (this.secondaryTicks + 1) === 0;
    }
    /**
     * @hidden
     */
    tickLabel(idx) {
        if (this.labelsViewEnabled) {
            return this.labels[idx];
        }
        const labelStep = (Math.max(this.minValue, this.maxValue) - Math.min(this.minValue, this.maxValue)) / (this.ticksLength - 1);
        const labelVal = labelStep * idx;
        return (this.minValue + labelVal).toFixed(2);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTicksComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.2.4", type: IgxTicksComponent, isStandalone: true, selector: "igx-ticks", inputs: { primaryTicks: "primaryTicks", secondaryTicks: "secondaryTicks", primaryTickLabels: ["primaryTickLabels", "primaryTickLabels", booleanAttribute], secondaryTickLabels: ["secondaryTickLabels", "secondaryTickLabels", booleanAttribute], ticksOrientation: "ticksOrientation", tickLabelsOrientation: "tickLabelsOrientation", maxValue: "maxValue", minValue: "minValue", labelsViewEnabled: ["labelsViewEnabled", "labelsViewEnabled", booleanAttribute], labels: "labels", tickLabelTemplateRef: "tickLabelTemplateRef" }, host: { properties: { "class.igx-slider__ticks": "this.ticksClass", "class.igx-slider__ticks--top": "this.ticksTopClass", "class.igx-slider__ticks--tall": "this.hasPrimaryClass", "class.igx-slider__tick-labels--top-bottom": "this.labelsTopToBottomClass", "class.igx-slider__tick-labels--bottom-top": "this.labelsBottomToTopClass" } }, ngImport: i0, template: "<div class=\"igx-slider__ticks-group\" *ngFor=\"let n of [].constructor(ticksLength); let idx=index\" [ngClass]=\"{ 'igx-slider__ticks-group--tall': isPrimary(idx)}\">\n    <div class=\"igx-slider__ticks-tick\">\n        <span class=\"igx-slider__ticks-label\" [ngClass]=\"{ 'igx-slider__tick-label--hidden': !hiddenTickLabels(idx)}\">\n            <ng-container *ngTemplateOutlet=\"tickLabelTemplateRef ? tickLabelTemplateRef : tickLabelDefaultTemplate; context: context(idx)\"></ng-container>\n        </span>\n    </div>\n</div>\n\n<ng-template #tickLabelDefaultTemplate let-value>\n    {{ value }}\n</ng-template>\n", dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.4", ngImport: i0, type: IgxTicksComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-ticks', standalone: true, imports: [NgFor, NgClass, NgTemplateOutlet], template: "<div class=\"igx-slider__ticks-group\" *ngFor=\"let n of [].constructor(ticksLength); let idx=index\" [ngClass]=\"{ 'igx-slider__ticks-group--tall': isPrimary(idx)}\">\n    <div class=\"igx-slider__ticks-tick\">\n        <span class=\"igx-slider__ticks-label\" [ngClass]=\"{ 'igx-slider__tick-label--hidden': !hiddenTickLabels(idx)}\">\n            <ng-container *ngTemplateOutlet=\"tickLabelTemplateRef ? tickLabelTemplateRef : tickLabelDefaultTemplate; context: context(idx)\"></ng-container>\n        </span>\n    </div>\n</div>\n\n<ng-template #tickLabelDefaultTemplate let-value>\n    {{ value }}\n</ng-template>\n" }]
        }], propDecorators: { primaryTicks: [{
                type: Input
            }], secondaryTicks: [{
                type: Input
            }], primaryTickLabels: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], secondaryTickLabels: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], ticksOrientation: [{
                type: Input
            }], tickLabelsOrientation: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], minValue: [{
                type: Input
            }], labelsViewEnabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labels: [{
                type: Input
            }], tickLabelTemplateRef: [{
                type: Input
            }], ticksClass: [{
                type: HostBinding,
                args: ['class.igx-slider__ticks']
            }], ticksTopClass: [{
                type: HostBinding,
                args: ['class.igx-slider__ticks--top']
            }], hasPrimaryClass: [{
                type: HostBinding,
                args: ['class.igx-slider__ticks--tall']
            }], labelsTopToBottomClass: [{
                type: HostBinding,
                args: ['class.igx-slider__tick-labels--top-bottom']
            }], labelsBottomToTopClass: [{
                type: HostBinding,
                args: ['class.igx-slider__tick-labels--bottom-top']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3NsaWRlci90aWNrcy90aWNrcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2xpZGVyL3RpY2tzL3RpY2tzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFlLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUVuRTs7R0FFRztBQU9ILE1BQU0sT0FBTyxpQkFBaUI7SUFOOUI7UUF3Q0k7O1dBRUc7UUFFSSxlQUFVLEdBQUcsSUFBSSxDQUFDO0tBNEY1QjtJQTFGRzs7T0FFRztJQUNILElBQ1csYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7SUFDMUQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFDVyxlQUFlO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFDVyxzQkFBc0I7UUFDN0IsT0FBTyxJQUFJLENBQUMscUJBQXFCLEtBQUsscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7T0FFRztJQUNILElBQ1csc0JBQXNCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixLQUFLLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztJQUM1RSxD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O2dCQUlDLG9CQUFvQjtzQkFEMUIsS0FBSztnQkFPQyxVQUFVO3NCQURoQixXQUFXO3VCQUFDLHlCQUF5QjtnQkFPM0IsYUFBYTtzQkFEdkIsV0FBVzt1QkFBQyw4QkFBOEI7Z0JBU2hDLGVBQWU7c0JBRHpCLFdBQVc7dUJBQUMsK0JBQStCO2dCQVNqQyxzQkFBc0I7c0JBRGhDLFdBQVc7dUJBQUMsMkNBQTJDO2dCQVM3QyxzQkFBc0I7c0JBRGhDLFdBQVc7dUJBQUMsMkNBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIEhvc3RCaW5kaW5nLCBib29sZWFuQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaWNrc09yaWVudGF0aW9uLCBUaWNrTGFiZWxzT3JpZW50YXRpb24gfSBmcm9tICcuLi9zbGlkZXIuY29tbW9uJztcbmltcG9ydCB7IE5nRm9yLCBOZ0NsYXNzLCBOZ1RlbXBsYXRlT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LXRpY2tzJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3RpY2tzLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIGltcG9ydHM6IFtOZ0ZvciwgTmdDbGFzcywgTmdUZW1wbGF0ZU91dGxldF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4VGlja3NDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHByaW1hcnlUaWNrczogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2Vjb25kYXJ5VGlja3M6IG51bWJlcjtcblxuICAgIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICAgIHB1YmxpYyBwcmltYXJ5VGlja0xhYmVsczogYm9vbGVhbjtcblxuICAgIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICAgIHB1YmxpYyBzZWNvbmRhcnlUaWNrTGFiZWxzOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdGlja3NPcmllbnRhdGlvbjogVGlja3NPcmllbnRhdGlvbjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRpY2tMYWJlbHNPcmllbnRhdGlvbjogVGlja0xhYmVsc09yaWVudGF0aW9uO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgbWF4VmFsdWU6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIG1pblZhbHVlOiBudW1iZXI7XG5cbiAgICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcbiAgICBwdWJsaWMgbGFiZWxzVmlld0VuYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBsYWJlbHM6IEFycmF5PG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkPjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRpY2tMYWJlbFRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fdGlja3MnKVxuICAgIHB1YmxpYyB0aWNrc0NsYXNzID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX3RpY2tzLS10b3AnKVxuICAgIHB1YmxpYyBnZXQgdGlja3NUb3BDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlja3NPcmllbnRhdGlvbiA9PT0gVGlja3NPcmllbnRhdGlvbi5Ub3A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fdGlja3MtLXRhbGwnKVxuICAgIHB1YmxpYyBnZXQgaGFzUHJpbWFyeUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmltYXJ5VGlja3MgPiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX3RpY2stbGFiZWxzLS10b3AtYm90dG9tJylcbiAgICBwdWJsaWMgZ2V0IGxhYmVsc1RvcFRvQm90dG9tQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tMYWJlbHNPcmllbnRhdGlvbiA9PT0gVGlja0xhYmVsc09yaWVudGF0aW9uLlRvcFRvQm90dG9tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX3RpY2stbGFiZWxzLS1ib3R0b20tdG9wJylcbiAgICBwdWJsaWMgZ2V0IGxhYmVsc0JvdHRvbVRvVG9wQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tMYWJlbHNPcmllbnRhdGlvbiA9PT0gVGlja0xhYmVsc09yaWVudGF0aW9uLkJvdHRvbVRvVG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRlbXBsYXRlIGNvbnRleHQgY29ycmVzcG9uZGluZyB0b1xuICAgICAqIHtAbGluayBJZ3hUaWNrTGFiZWxUZW1wbGF0ZURpcmVjdGl2ZX1cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiByZXR1cm4ge1xuICAgICAqICAkaW1wbGljaXQgLy9yZXR1cm5zIHRoZSB2YWx1ZSBwZXIgZWFjaCB0aWNrIGxhYmVsLlxuICAgICAqICBpc1ByaW1lcnkgLy9yZXR1cm5zIGlmIHRoZSB0aWNrIGlzIHByaW1hcnkuXG4gICAgICogIGxhYmVscyAvLyByZXR1cm5zIHRoZSB7QGxpbmsgbGFiZWxzfSBjb2xsZWN0aW9uLlxuICAgICAqICBpbmRleCAvLyByZXR1cm5zIHRoZSBpbmRleCBwZXIgZWFjaCB0aWNrIG9mIHRoZSB3aG9sZSBzZXF1ZW5jZS5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWR4IHRoZSBpbmRleCBwZXIgZWFjaCB0aWNrIGxhYmVsLlxuICAgICAqL1xuICAgIHB1YmxpYyBjb250ZXh0KGlkeDogbnVtYmVyKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICRpbXBsaWNpdDogdGhpcy50aWNrTGFiZWwoaWR4KSxcbiAgICAgICAgICAgIGlzUHJpbWFyeTogdGhpcy5pc1ByaW1hcnkoaWR4KSxcbiAgICAgICAgICAgIGxhYmVsczogdGhpcy5sYWJlbHMsXG4gICAgICAgICAgICBpbmRleDogaWR4XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdGlja3NMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaW1hcnlUaWNrcyA+IDAgP1xuICAgICAgICAgICAgKCh0aGlzLnByaW1hcnlUaWNrcyAtIDEpICogdGhpcy5zZWNvbmRhcnlUaWNrcykgKyB0aGlzLnByaW1hcnlUaWNrcyA6XG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeVRpY2tzID4gMCA/IHRoaXMuc2Vjb25kYXJ5VGlja3MgOiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRkZW5UaWNrTGFiZWxzKGlkeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzUHJpbWFyeShpZHgpID8gdGhpcy5wcmltYXJ5VGlja0xhYmVscyA6IHRoaXMuc2Vjb25kYXJ5VGlja0xhYmVscztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGlzUHJpbWFyeShpZHg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmltYXJ5VGlja3MgPD0gMCA/IGZhbHNlIDpcbiAgICAgICAgICAgIGlkeCAlICh0aGlzLnNlY29uZGFyeVRpY2tzICsgMSkgPT09IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyB0aWNrTGFiZWwoaWR4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxzVmlld0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhYmVsc1tpZHhdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFiZWxTdGVwID0gKE1hdGgubWF4KHRoaXMubWluVmFsdWUsIHRoaXMubWF4VmFsdWUpIC0gTWF0aC5taW4odGhpcy5taW5WYWx1ZSwgdGhpcy5tYXhWYWx1ZSkpIC8gKHRoaXMudGlja3NMZW5ndGggLSAxKTtcbiAgICAgICAgY29uc3QgbGFiZWxWYWwgPSBsYWJlbFN0ZXAgKiBpZHg7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLm1pblZhbHVlICsgbGFiZWxWYWwpLnRvRml4ZWQoMik7XG4gICAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImlneC1zbGlkZXJfX3RpY2tzLWdyb3VwXCIgKm5nRm9yPVwibGV0IG4gb2YgW10uY29uc3RydWN0b3IodGlja3NMZW5ndGgpOyBsZXQgaWR4PWluZGV4XCIgW25nQ2xhc3NdPVwieyAnaWd4LXNsaWRlcl9fdGlja3MtZ3JvdXAtLXRhbGwnOiBpc1ByaW1hcnkoaWR4KX1cIj5cbiAgICA8ZGl2IGNsYXNzPVwiaWd4LXNsaWRlcl9fdGlja3MtdGlja1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlneC1zbGlkZXJfX3RpY2tzLWxhYmVsXCIgW25nQ2xhc3NdPVwieyAnaWd4LXNsaWRlcl9fdGljay1sYWJlbC0taGlkZGVuJzogIWhpZGRlblRpY2tMYWJlbHMoaWR4KX1cIj5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0aWNrTGFiZWxUZW1wbGF0ZVJlZiA/IHRpY2tMYWJlbFRlbXBsYXRlUmVmIDogdGlja0xhYmVsRGVmYXVsdFRlbXBsYXRlOyBjb250ZXh0OiBjb250ZXh0KGlkeClcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxuZy10ZW1wbGF0ZSAjdGlja0xhYmVsRGVmYXVsdFRlbXBsYXRlIGxldC12YWx1ZT5cbiAgICB7eyB2YWx1ZSB9fVxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==