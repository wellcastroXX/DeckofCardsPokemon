"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjects = exports.addFontsToIndexHtml = exports.importDefaultTheme = void 0;
const core_1 = require("@angular-devkit/core");
const cli_core_1 = require("@igniteui/cli-core");
const path = require("path");
function importDefaultTheme(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        const projects = yield getProjects(tree);
        for (const project of projects.values()) {
            const sourceRoot = project === null || project === void 0 ? void 0 : project.sourceRoot;
            if (!sourceRoot) {
                continue;
            }
            const pathWithoutExt = path.join(sourceRoot, "styles");
            if (tree.exists(`${pathWithoutExt}.sass`)) {
                importDefaultThemeSass(tree, `${pathWithoutExt}.sass`);
                continue;
            }
            else if (tree.exists(`${pathWithoutExt}.scss`)) {
                importDefaultThemeSass(tree, `${pathWithoutExt}.scss`);
                continue;
            }
            yield importIgDefaultTheme(tree);
            continue;
        }
    });
}
exports.importDefaultTheme = importDefaultTheme;
function addFontsToIndexHtml(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        const titillium = '<link href="https://fonts.googleapis.com/css?family=Titillium+Web" rel="stylesheet">';
        const materialIcons = '<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">';
        const projects = yield getProjects(tree);
        projects.forEach(project => {
            var _a, _b;
            const targetFile = (_b = (_a = project.targets.get("build")) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.index;
            if (targetFile && tree.exists(targetFile)) {
                let content = tree.read(targetFile).toString();
                if (!content.includes(titillium)) {
                    content = content.replace("</head>", `  ${titillium}\n</head>`);
                }
                if (!content.includes(materialIcons)) {
                    content = content.replace("</head>", `  ${materialIcons}\n</head>`);
                }
                tree.overwrite(targetFile, content);
            }
        });
    });
}
exports.addFontsToIndexHtml = addFontsToIndexHtml;
function importDefaultThemeSass(tree, filePath) {
    const igxPackage = (0, cli_core_1.resolvePackage)(cli_core_1.NPM_ANGULAR);
    const sassImports = `
@use "${igxPackage}/theming" as *;
// Uncomment the following lines if you want to add a custom palette:
// $primary: #731963 !default;
// $secondary: #ce5712 !default;
// $app-palette: palette($primary, $secondary, $surface);

/* autoprefixer grid: on */

@include core();
@include typography($font-family: $material-typeface, $type-scale: $material-type-scale);
@include theme($default-palette);
`;
    let content = tree.read(filePath).toString();
    if (!content.includes(sassImports)) {
        content = sassImports + content;
    }
    tree.overwrite(filePath, content);
}
function importIgDefaultTheme(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        const host = (0, cli_core_1.createWorkspaceHost)(tree);
        const { workspace } = yield core_1.workspaces.readWorkspace("/", host);
        importDefaultThemeToAngularWorkspace(workspace, "build");
        importDefaultThemeToAngularWorkspace(workspace, "test");
        // workspace tracks changes internally:
        yield core_1.workspaces.writeWorkspace(workspace, host);
    });
}
function getProjects(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        const { workspace } = yield core_1.workspaces.readWorkspace("/", (0, cli_core_1.createWorkspaceHost)(tree));
        return workspace.projects;
    });
}
exports.getProjects = getProjects;
function importDefaultThemeToAngularWorkspace(workspace, key) {
    const igxPackage = (0, cli_core_1.resolvePackage)(cli_core_1.NPM_ANGULAR);
    const cssImport = `node_modules/${igxPackage}/styles/igniteui-angular.css`;
    const project = workspace.extensions.defaultProject ?
        workspace.projects.get(workspace.extensions.defaultProject) :
        workspace.projects.values().next().value;
    const target = project === null || project === void 0 ? void 0 : project.targets.get(key);
    if (!target) {
        // TODO: Log target not found
        return;
    }
    target.options = target.options || {};
    target.options.styles = target.options.styles || [];
    const styles = target.options.styles;
    if (!styles.includes(cssImport)) {
        styles.push(cssImport);
    }
}
